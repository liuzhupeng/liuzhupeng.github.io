<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>liuzhupeng的博客</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-06-16T04:38:55.690Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>刘铸澎</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>多线多进程程爬虫</title>
    <link href="http://yoursite.com/2017/06/16/test/code%20test/"/>
    <id>http://yoursite.com/2017/06/16/test/code test/</id>
    <published>2017-06-16T04:34:56.977Z</published>
    <updated>2017-06-16T04:38:55.690Z</updated>
    
    <content type="html"><![CDATA[<h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> urllib2</div><div class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</div><div class="line"><span class="keyword">import</span> json</div><div class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</div><div class="line"><span class="keyword">import</span> httplib</div><div class="line"><span class="keyword">import</span> hashlib</div><div class="line"><span class="keyword">from</span> pybloomfilter <span class="keyword">import</span> BloomFilter</div><div class="line"><span class="keyword">import</span> thread</div><div class="line"><span class="keyword">import</span> threading</div><div class="line"><span class="keyword">import</span> time</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CrawlBSF</span>:</span></div><div class="line">    request_headers = &#123;</div><div class="line">        <span class="string">'host'</span>: <span class="string">"www.mafengwo.cn"</span>,</div><div class="line">        <span class="string">'connection'</span>: <span class="string">"keep-alive"</span>,</div><div class="line">        <span class="string">'cache-control'</span>: <span class="string">"no-cache"</span>,</div><div class="line">        <span class="string">'upgrade-insecure-requests'</span>: <span class="string">"1"</span>,</div><div class="line">        <span class="string">'user-agent'</span>: <span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.95 Safari/537.36"</span>,</div><div class="line">        <span class="string">'accept'</span>: <span class="string">"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8"</span>,</div><div class="line">        <span class="string">'accept-language'</span>: <span class="string">"zh-CN,en-US;q=0.8,en;q=0.6"</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    cur_level = <span class="number">0</span></div><div class="line">    max_level = <span class="number">5</span></div><div class="line">    dir_name = <span class="string">'iterate/'</span></div><div class="line">    iter_width = <span class="number">50</span></div><div class="line">    downloaded_urls = []</div><div class="line"></div><div class="line">    du_md5_file_name = dir_name + <span class="string">'download.txt'</span></div><div class="line">    du_url_file_name = dir_name + <span class="string">'urls.txt'</span></div><div class="line"></div><div class="line">    bloom_downloaded_urls = BloomFilter(<span class="number">1024</span> * <span class="number">1024</span> * <span class="number">16</span>, <span class="number">0.01</span>)</div><div class="line">    bloom_url_queue = BloomFilter(<span class="number">1024</span> * <span class="number">1024</span> * <span class="number">16</span>, <span class="number">0.01</span>)</div><div class="line"></div><div class="line">    cur_queue = deque()</div><div class="line">    child_queue = deque()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, url)</span>:</span></div><div class="line">        self.root_url = url</div><div class="line">        self.cur_queue.append(url)</div><div class="line">        self.du_file = open(self.du_url_file_name, <span class="string">'a+'</span>)</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            self.dumd5_file = open(self.du_md5_file_name, <span class="string">'r'</span>)</div><div class="line">            self.downloaded_urls = self.dumd5_file.readlines()</div><div class="line">            self.dumd5_file.close()</div><div class="line">            <span class="keyword">for</span> urlmd5 <span class="keyword">in</span> self.downloaded_urls:</div><div class="line">                self.bloom_downloaded_urls.add(urlmd5[:<span class="number">-2</span>])</div><div class="line">        <span class="keyword">except</span> IOError:</div><div class="line">            <span class="keyword">print</span> <span class="string">"File not found"</span></div><div class="line">        <span class="keyword">finally</span>:</div><div class="line">            self.dumd5_file = open(self.du_md5_file_name, <span class="string">'a+'</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">enqueueUrl</span><span class="params">(self, url)</span>:</span></div><div class="line">        <span class="keyword">if</span> url <span class="keyword">not</span> <span class="keyword">in</span> self.bloom_url_queue <span class="keyword">and</span> hashlib.md5(url).hexdigest() <span class="keyword">not</span> <span class="keyword">in</span> crawler.bloom_downloaded_urls:</div><div class="line">            self.child_queue.append(url)</div><div class="line">            self.bloom_url_queue.add(url)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dequeuUrl</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            url = self.cur_queue.popleft()</div><div class="line">            <span class="keyword">return</span> url</div><div class="line">        <span class="keyword">except</span> IndexError:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">None</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close</span><span class="params">(self)</span>:</span></div><div class="line">        self.dumd5_file.close()</div><div class="line">        self.du_file.close()</div><div class="line"></div><div class="line"></div><div class="line">num_downloaded_pages = <span class="number">0</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#download the page content</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_page_content</span><span class="params">(cur_url)</span>:</span></div><div class="line">    <span class="keyword">global</span> num_downloaded_pages</div><div class="line">    <span class="keyword">print</span> <span class="string">"downloading %s at level %d"</span> % (cur_url, crawler.cur_level)</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        req = urllib2.Request(cur_url, headers=crawler.request_headers)</div><div class="line">        response = urllib2.urlopen(req)</div><div class="line">        html_page = response.read()</div><div class="line">        filename = cur_url[<span class="number">7</span>:].replace(<span class="string">'/'</span>, <span class="string">'_'</span>)</div><div class="line">        fo = open(<span class="string">"%s%s.html"</span> % (crawler.dir_name, filename), <span class="string">'wb+'</span>)</div><div class="line">        fo.write(html_page)</div><div class="line">        fo.close()</div><div class="line">    <span class="keyword">except</span> urllib2.HTTPError, Arguments:</div><div class="line">        <span class="keyword">print</span> Arguments</div><div class="line">        <span class="keyword">return</span></div><div class="line">    <span class="keyword">except</span> httplib.BadStatusLine, Arguments:</div><div class="line">        <span class="keyword">print</span> Arguments</div><div class="line">        <span class="keyword">return</span></div><div class="line">    <span class="keyword">except</span> IOError, Arguments:</div><div class="line">        <span class="keyword">print</span> Arguments</div><div class="line">        <span class="keyword">return</span></div><div class="line">    <span class="keyword">except</span> Exception, Arguments:</div><div class="line">        <span class="keyword">print</span> Arguments</div><div class="line">        <span class="keyword">return</span></div><div class="line">    <span class="comment"># print 'add ' + hashlib.md5(cur_url).hexdigest() + ' to list'</span></div><div class="line"></div><div class="line">    <span class="comment"># save page and set bloomfilter</span></div><div class="line">    dumd5 = hashlib.md5(cur_url).hexdigest()</div><div class="line">    crawler.downloaded_urls.append(dumd5)</div><div class="line">    crawler.dumd5_file.write(dumd5 + <span class="string">'\r\n'</span>)</div><div class="line">    crawler.du_file.write(cur_url + <span class="string">'\r\n'</span>)</div><div class="line">    crawler.bloom_downloaded_urls.add(dumd5)</div><div class="line">    num_downloaded_pages += <span class="number">1</span></div><div class="line"></div><div class="line">    html = etree.HTML(html_page.lower().decode(<span class="string">'utf-8'</span>))</div><div class="line">    hrefs = html.xpath(<span class="string">u"//a"</span>)</div><div class="line"></div><div class="line">    <span class="keyword">for</span> href <span class="keyword">in</span> hrefs:</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            <span class="keyword">if</span> <span class="string">'href'</span> <span class="keyword">in</span> href.attrib:</div><div class="line">                val = href.attrib[<span class="string">'href'</span>]</div><div class="line">                <span class="keyword">if</span> val.find(<span class="string">'javascript:'</span>) != <span class="number">-1</span>:</div><div class="line">                    <span class="keyword">continue</span></div><div class="line">                <span class="keyword">if</span> val.startswith(<span class="string">'http://'</span>) <span class="keyword">is</span> <span class="keyword">False</span>:</div><div class="line">                    <span class="keyword">if</span> val.startswith(<span class="string">'/'</span>):</div><div class="line">                        val = <span class="string">'http://www.mafengwo.cn'</span> + val</div><div class="line">                    <span class="keyword">else</span>:</div><div class="line">                        <span class="keyword">continue</span></div><div class="line">                <span class="keyword">if</span> val[<span class="number">-1</span>] == <span class="string">'/'</span>:</div><div class="line">                    val = val[<span class="number">0</span>:<span class="number">-1</span>]</div><div class="line">                <span class="comment"># if hashlib.md5(val).hexdigest() not in self.downloaded_urls:</span></div><div class="line">                crawler.enqueueUrl(val)</div><div class="line">                <span class="comment"># else:</span></div><div class="line">                    <span class="comment"># print 'Skip %s' % (val)</span></div><div class="line">        <span class="keyword">except</span> ValueError:</div><div class="line">            <span class="keyword">continue</span></div><div class="line"></div><div class="line"></div><div class="line">crawler = CrawlBSF(<span class="string">"http://www.mafengwo.cn"</span>)</div><div class="line">start_time = time.time()</div><div class="line"></div><div class="line"><span class="comment"># if it's the first page (start url), if true, crawl it in main thread in sync(blocking) mode</span></div><div class="line"><span class="comment"># 如果是第一个抓取页面的话，在主线程用同步（阻塞）的模式下载，后续的页面会通过创建子线程的方式异步爬取</span></div><div class="line">is_root_page = <span class="keyword">True</span></div><div class="line">threads = []</div><div class="line">max_threads = <span class="number">10</span></div><div class="line"></div><div class="line">CRAWL_DELAY = <span class="number">0.6</span></div><div class="line"></div><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">    url = crawler.dequeuUrl()</div><div class="line">    <span class="comment"># Go on next level, before that, needs to wait all current level crawling done</span></div><div class="line">    <span class="keyword">if</span> url <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">        crawler.cur_level += <span class="number">1</span></div><div class="line">        <span class="keyword">for</span> t <span class="keyword">in</span> threads:</div><div class="line">            t.join()</div><div class="line">        <span class="keyword">if</span> crawler.cur_level == crawler.max_level:</div><div class="line">            <span class="keyword">break</span></div><div class="line">        <span class="keyword">if</span> len(crawler.child_queue) == <span class="number">0</span>:</div><div class="line">            <span class="keyword">break</span></div><div class="line">        crawler.cur_queue = crawler.child_queue</div><div class="line">        crawler.child_queue = deque()</div><div class="line">        <span class="keyword">continue</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment"># looking for an empty thread from pool to crawl</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> is_root_page <span class="keyword">is</span> <span class="keyword">True</span>:</div><div class="line">        get_page_content(url)</div><div class="line">        is_root_page = <span class="keyword">False</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:    </div><div class="line">            <span class="comment"># first remove all finished running threads</span></div><div class="line">            <span class="keyword">for</span> t <span class="keyword">in</span> threads:</div><div class="line">                <span class="keyword">if</span> <span class="keyword">not</span> t.is_alive():</div><div class="line">                    threads.remove(t)</div><div class="line">            <span class="keyword">if</span> len(threads) &gt;= max_threads:</div><div class="line">                time.sleep(CRAWL_DELAY)</div><div class="line">                <span class="keyword">continue</span></div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                t = threading.Thread(target=get_page_content, name=<span class="keyword">None</span>, args=(url,))</div><div class="line">                threads.append(t)</div><div class="line">                <span class="comment"># set daemon so main thread can exit when receives ctrl-c</span></div><div class="line">                t.setDaemon(<span class="keyword">True</span>)</div><div class="line">                t.start()</div><div class="line">                time.sleep(CRAWL_DELAY)</div><div class="line">                <span class="keyword">break</span></div><div class="line">            <span class="keyword">except</span> Exception:</div><div class="line">                <span class="keyword">print</span> <span class="string">"Error: unable to start thread"</span></div><div class="line"></div><div class="line"><span class="keyword">print</span> <span class="string">'%d pages downloaded, time cost %0.2f seconds'</span> % (num_downloaded_pages, time.time()-start_time)</div></pre></td></tr></table></figure>
<h3 id="多进程"><a href="#多进程" class="headerlink" title="多进程"></a>多进程</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> urllib2</div><div class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</div><div class="line"><span class="keyword">import</span> json</div><div class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</div><div class="line"><span class="keyword">import</span> httplib</div><div class="line"><span class="keyword">import</span> hashlib</div><div class="line"><span class="keyword">from</span> pybloomfilter <span class="keyword">import</span> BloomFilter</div><div class="line"><span class="keyword">import</span> thread</div><div class="line"><span class="keyword">import</span> threading</div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">from</span> dbmanager <span class="keyword">import</span> CrawlDatabaseManager</div><div class="line"></div><div class="line"><span class="keyword">from</span> mysql.connector <span class="keyword">import</span> errorcode</div><div class="line"><span class="keyword">import</span> mysql.connector</div><div class="line"></div><div class="line">request_headers = &#123;</div><div class="line">    <span class="string">'host'</span>: <span class="string">"www.mafengwo.cn"</span>,</div><div class="line">    <span class="string">'connection'</span>: <span class="string">"keep-alive"</span>,</div><div class="line">    <span class="string">'cache-control'</span>: <span class="string">"no-cache"</span>,</div><div class="line">    <span class="string">'upgrade-insecure-requests'</span>: <span class="string">"1"</span>,</div><div class="line">    <span class="string">'user-agent'</span>: <span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.95 Safari/537.36"</span>,</div><div class="line">    <span class="string">'accept'</span>: <span class="string">"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8"</span>,</div><div class="line">    <span class="string">'accept-language'</span>: <span class="string">"zh-CN,en-US;q=0.8,en;q=0.6"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_page_content</span><span class="params">(cur_url, index, depth)</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">"downloading %s at level %d"</span> % (cur_url, depth)</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        req = urllib2.Request(cur_url, headers=request_headers)</div><div class="line">        response = urllib2.urlopen(req)</div><div class="line">        html_page = response.read()</div><div class="line">        filename = cur_url[<span class="number">7</span>:].replace(<span class="string">'/'</span>, <span class="string">'_'</span>)</div><div class="line">        fo = open(<span class="string">"%s%s.html"</span> % (dir_name, filename), <span class="string">'wb+'</span>)</div><div class="line">        fo.write(html_page)</div><div class="line">        fo.close()</div><div class="line">        dbmanager.finishUrl(index)</div><div class="line">    <span class="keyword">except</span> urllib2.HTTPError, Arguments:</div><div class="line">        <span class="keyword">print</span> Arguments</div><div class="line">        <span class="keyword">return</span></div><div class="line">    <span class="keyword">except</span> httplib.BadStatusLine, Arguments:</div><div class="line">        <span class="keyword">print</span> Arguments</div><div class="line">        <span class="keyword">return</span></div><div class="line">    <span class="keyword">except</span> IOError, Arguments:</div><div class="line">        <span class="keyword">print</span> Arguments</div><div class="line">        <span class="keyword">return</span></div><div class="line">    <span class="keyword">except</span> Exception, Arguments:</div><div class="line">        <span class="keyword">print</span> Arguments</div><div class="line">        <span class="keyword">return</span></div><div class="line">    <span class="comment"># print 'add ' + hashlib.md5(cur_url).hexdigest() + ' to list'</span></div><div class="line"></div><div class="line">    html = etree.HTML(html_page.lower().decode(<span class="string">'utf-8'</span>))</div><div class="line">    hrefs = html.xpath(<span class="string">u"//a"</span>)</div><div class="line"></div><div class="line">    <span class="keyword">for</span> href <span class="keyword">in</span> hrefs:</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            <span class="keyword">if</span> <span class="string">'href'</span> <span class="keyword">in</span> href.attrib:</div><div class="line">                val = href.attrib[<span class="string">'href'</span>]</div><div class="line">                <span class="keyword">if</span> val.find(<span class="string">'javascript:'</span>) != <span class="number">-1</span>:</div><div class="line">                    <span class="keyword">continue</span></div><div class="line">                <span class="keyword">if</span> val.startswith(<span class="string">'http://'</span>) <span class="keyword">is</span> <span class="keyword">False</span>:</div><div class="line">                    <span class="keyword">if</span> val.startswith(<span class="string">'/'</span>):</div><div class="line">                        val = <span class="string">'http://www.mafengwo.cn'</span> + val</div><div class="line">                    <span class="keyword">else</span>:</div><div class="line">                        <span class="keyword">continue</span></div><div class="line">                <span class="keyword">if</span> val[<span class="number">-1</span>] == <span class="string">'/'</span>:</div><div class="line">                    val = val[<span class="number">0</span>:<span class="number">-1</span>]</div><div class="line">                dbmanager.enqueueUrl(val, depth + <span class="number">1</span>)</div><div class="line"></div><div class="line">        <span class="keyword">except</span> ValueError:</div><div class="line">            <span class="keyword">continue</span></div><div class="line"></div><div class="line"></div><div class="line">max_num_thread = <span class="number">5</span></div><div class="line"></div><div class="line"><span class="comment"># create instance of Mysql database manager, which is used as a queue for crawling</span></div><div class="line">dbmanager = CrawlDatabaseManager(max_num_thread)</div><div class="line"></div><div class="line"><span class="comment"># dir for saving HTML files</span></div><div class="line">dir_name = <span class="string">'dir_process/'</span></div><div class="line"></div><div class="line"><span class="comment"># put first page into queue</span></div><div class="line">dbmanager.enqueueUrl(<span class="string">"http://www.mafengwo.cn"</span>, <span class="number">0</span>)</div><div class="line">start_time = time.time()</div><div class="line">is_root_page = <span class="keyword">True</span></div><div class="line">threads = []</div><div class="line"></div><div class="line"><span class="comment"># time delay before a new crawling thread is created</span></div><div class="line"><span class="comment"># use a delay to control the crawling rate, avoiding visiting target website too frequently</span></div><div class="line"><span class="comment"># 设置超时，控制下载的速率，避免太过频繁访问目标网站</span></div><div class="line">CRAWL_DELAY = <span class="number">0.6</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">    curtask = dbmanager.dequeueUrl()</div><div class="line">    <span class="comment"># Go on next level, before that, needs to wait all current level crawling done</span></div><div class="line">    <span class="keyword">if</span> curtask <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">        <span class="keyword">for</span> t <span class="keyword">in</span> threads:</div><div class="line">            t.join()</div><div class="line">        <span class="keyword">break</span></div><div class="line"></div><div class="line">    <span class="comment"># looking for an empty thread from pool to crawl</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> is_root_page <span class="keyword">is</span> <span class="keyword">True</span>:</div><div class="line">        get_page_content(curtask[<span class="string">'url'</span>], curtask[<span class="string">'index'</span>], curtask[<span class="string">'depth'</span>])</div><div class="line">        is_root_page = <span class="keyword">False</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:    </div><div class="line">            <span class="comment"># first remove all finished running threads</span></div><div class="line">            <span class="keyword">for</span> t <span class="keyword">in</span> threads:</div><div class="line">                <span class="keyword">if</span> <span class="keyword">not</span> t.is_alive():</div><div class="line">                    threads.remove(t)</div><div class="line">            <span class="keyword">if</span> len(threads) &gt;= max_num_thread:</div><div class="line">                time.sleep(CRAWL_DELAY)</div><div class="line">                <span class="keyword">continue</span></div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                t = threading.Thread(target=get_page_content, name=<span class="keyword">None</span>, args=(curtask[<span class="string">'url'</span>], curtask[<span class="string">'index'</span>], curtask[<span class="string">'depth'</span>]))</div><div class="line">                threads.append(t)</div><div class="line">                <span class="comment"># set daemon so main thread can exit when receives ctrl-c</span></div><div class="line">                t.setDaemon(<span class="keyword">True</span>)</div><div class="line">                t.start()</div><div class="line">                time.sleep(CRAWL_DELAY)</div><div class="line">                <span class="keyword">break</span></div><div class="line">            <span class="keyword">except</span> Exception:</div><div class="line">                <span class="keyword">print</span> <span class="string">"Error: unable to start thread"</span></div><div class="line"></div><div class="line">cursor.close()</div><div class="line">cnx.close()</div></pre></td></tr></table></figure>
<h3 id="MySQL数据库操作"><a href="#MySQL数据库操作" class="headerlink" title="MySQL数据库操作"></a>MySQL数据库操作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div></pre></td><td class="code"><pre><div class="line">import mysql.connector</div><div class="line">import hashlib</div><div class="line">from mysql.connector import errorcode</div><div class="line"></div><div class="line"></div><div class="line">class CrawlDatabaseManager:</div><div class="line"></div><div class="line">    DB_NAME = &apos;mfw_pro_crawl&apos;</div><div class="line"></div><div class="line">    SERVER_IP = &apos;localhost&apos;</div><div class="line"></div><div class="line">    TABLES = &#123;&#125;</div><div class="line">    # create new table, using sql</div><div class="line">    TABLES[&apos;urls&apos;] = (</div><div class="line">        &quot;CREATE TABLE `urls` (&quot;</div><div class="line">        &quot;  `index` int(11) NOT NULL AUTO_INCREMENT,&quot; # index of queue</div><div class="line">        &quot;  `url` varchar(512) NOT NULL,&quot;</div><div class="line">        &quot;  `md5` varchar(16) NOT NULL,&quot;</div><div class="line">        &quot;  `status` varchar(11) NOT NULL DEFAULT &apos;new&apos;,&quot; # could be new, downloading and finish</div><div class="line">        &quot;  `depth` int(11) NOT NULL,&quot;</div><div class="line">        &quot;  `queue_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,&quot;</div><div class="line">        &quot;  `done_time` timestamp NOT NULL DEFAULT 0 ON UPDATE CURRENT_TIMESTAMP,&quot;</div><div class="line">        &quot;  PRIMARY KEY (`index`),&quot;</div><div class="line">        &quot;  UNIQUE KEY `md5` (`md5`)&quot;</div><div class="line">        &quot;) ENGINE=InnoDB&quot;)</div><div class="line"></div><div class="line"></div><div class="line">    def __init__(self, max_num_thread):</div><div class="line">        # connect mysql server</div><div class="line">        try:</div><div class="line">            cnx = mysql.connector.connect(host=self.SERVER_IP, user=&apos;root&apos;)</div><div class="line">        except mysql.connector.Error as err:</div><div class="line">            if err.errno == errorcode.ER_ACCESS_DENIED_ERROR:</div><div class="line">                print &quot;Something is wrong with your user name or password&quot;</div><div class="line">            elif err.errno == errorcode.ER_BAD_DB_ERROR:</div><div class="line">                print &quot;Database does not exist&quot;</div><div class="line">            else:</div><div class="line">                print &apos;Create Error &apos; + err.msg</div><div class="line">            exit(1)</div><div class="line"></div><div class="line">        cursor = cnx.cursor()</div><div class="line"></div><div class="line">        # use database, create it if not exist</div><div class="line">        try:</div><div class="line">            cnx.database = self.DB_NAME</div><div class="line">        except mysql.connector.Error as err:</div><div class="line">            if err.errno == errorcode.ER_BAD_DB_ERROR:</div><div class="line">                # create database and table</div><div class="line">                self.create_database(cursor)</div><div class="line">                cnx.database = self.DB_NAME</div><div class="line">                self.create_tables(cursor)</div><div class="line">            else:</div><div class="line">                print err</div><div class="line">                exit(1)</div><div class="line">        finally:</div><div class="line">            cursor.close()</div><div class="line">            cnx.close()</div><div class="line"></div><div class="line">        dbconfig = &#123;</div><div class="line">            &quot;database&quot;: self.DB_NAME,</div><div class="line">            &quot;user&quot;:     &quot;root&quot;,</div><div class="line">            &quot;host&quot;:     self.SERVER_IP,</div><div class="line">        &#125;</div><div class="line">        self.cnxpool = mysql.connector.pooling.MySQLConnectionPool(pool_name=&quot;mypool&quot;,</div><div class="line">                                                          pool_size=max_num_thread,</div><div class="line">                                                          **dbconfig)</div><div class="line"></div><div class="line"></div><div class="line">    # create databse</div><div class="line">    def create_database(self, cursor):</div><div class="line">        try:</div><div class="line">            cursor.execute(</div><div class="line">                &quot;CREATE DATABASE &#123;&#125; DEFAULT CHARACTER SET &apos;utf8&apos;&quot;.format(self.DB_NAME))</div><div class="line">        except mysql.connector.Error as err:</div><div class="line">            print &quot;Failed creating database: &#123;&#125;&quot;.format(err)</div><div class="line">            exit(1)</div><div class="line"></div><div class="line">    def create_tables(self, cursor):</div><div class="line">        for name, ddl in self.TABLES.iteritems():</div><div class="line">            try:</div><div class="line">                cursor.execute(ddl)</div><div class="line">            except mysql.connector.Error as err:</div><div class="line">                if err.errno == errorcode.ER_TABLE_EXISTS_ERROR:</div><div class="line">                    print &apos;create tables error ALREADY EXISTS&apos;</div><div class="line">                else:</div><div class="line">                    print &apos;create tables error &apos; + err.msg</div><div class="line">            else:</div><div class="line">                print &apos;Tables created&apos;</div><div class="line"></div><div class="line"></div><div class="line">    # put an url into queue</div><div class="line">    def enqueueUrl(self, url, depth):</div><div class="line">        con = self.cnxpool.get_connection()</div><div class="line">        cursor = con.cursor()</div><div class="line">        try:</div><div class="line">            add_url = (&quot;INSERT INTO urls (url, md5, depth) VALUES (%s, %s, %s)&quot;)</div><div class="line">            data_url = (url, hashlib.md5(url).hexdigest(), depth)</div><div class="line">            cursor.execute(add_url, data_url)</div><div class="line">            # commit this transaction, please refer to &quot;mysql transaction&quot; for more info</div><div class="line">            con.commit()</div><div class="line">        except mysql.connector.Error as err:</div><div class="line">            # print &apos;enqueueUrl() &apos; + err.msg</div><div class="line">            return</div><div class="line">        finally:</div><div class="line">            cursor.close()</div><div class="line">            con.close()</div><div class="line"></div><div class="line"></div><div class="line">    # get an url from queue</div><div class="line">    def dequeueUrl(self):</div><div class="line">        con = self.cnxpool.get_connection()</div><div class="line">        cursor = con.cursor(dictionary=True)</div><div class="line">        try:</div><div class="line">            # use select * for update to lock the rows for read</div><div class="line">            query = (&quot;SELECT `index`, `url`, `depth` FROM urls WHERE status=&apos;new&apos; ORDER BY `index` ASC LIMIT 1 FOR UPDATE&quot;)</div><div class="line">            cursor.execute(query)</div><div class="line">            if cursor.rowcount is 0:</div><div class="line">                return None</div><div class="line">            row = cursor.fetchone()</div><div class="line">            update_query = (&quot;UPDATE urls SET `status`=&apos;downloading&apos; WHERE `index`=%d&quot;) % (row[&apos;index&apos;])</div><div class="line">            cursor.execute(update_query)</div><div class="line">            con.commit()</div><div class="line">            return row</div><div class="line">        except mysql.connector.Error as err:</div><div class="line">            # print &apos;dequeueUrl() &apos; + err.msg</div><div class="line">            return None</div><div class="line">        finally:</div><div class="line">            cursor.close()</div><div class="line">            con.close()</div><div class="line"></div><div class="line">    def finishUrl(self, index):</div><div class="line">        con = self.cnxpool.get_connection()</div><div class="line">        cursor = con.cursor()</div><div class="line">        try:</div><div class="line">            # we don&apos;t need to update done_time using time.strftime(&apos;%Y-%m-%d %H:%M:%S&apos;) as it&apos;s auto updated</div><div class="line">            update_query = (&quot;UPDATE urls SET `status`=&apos;done&apos; WHERE `index`=%d&quot;) % (index)</div><div class="line">            cursor.execute(update_query)</div><div class="line">            con.commit()</div><div class="line">        except mysql.connector.Error as err:</div><div class="line">            # print &apos;finishUrl() &apos; + err.msg</div><div class="line">            return</div><div class="line">        finally:</div><div class="line">            cursor.close()</div><div class="line">            con.close()</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;多线程&quot;&gt;&lt;a href=&quot;#多线程&quot; class=&quot;headerlink&quot; title=&quot;多线程&quot;&gt;&lt;/a&gt;多线程&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;
    
    </summary>
    
      <category term="test" scheme="http://yoursite.com/categories/test/"/>
    
    
      <category term="临时代码学习" scheme="http://yoursite.com/tags/%E4%B8%B4%E6%97%B6%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>第一节网络爬虫基础相关知识点</title>
    <link href="http://yoursite.com/2017/06/15/scarp/1%E7%88%AC%E8%99%AB%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
    <id>http://yoursite.com/2017/06/15/scarp/1爬虫基本概念/</id>
    <published>2017-06-15T14:36:04.649Z</published>
    <updated>2017-06-16T01:12:22.477Z</updated>
    
    <content type="html"><![CDATA[<h3 id="基础环境Python-Unix"><a href="#基础环境Python-Unix" class="headerlink" title="基础环境Python Unix"></a>基础环境Python Unix</h3><ul>
<li>python 2.7</li>
<li>pip，并设置 pip 源<ul>
<li>配置 pip conf，自动设置源</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># mkdir ~/.pip/</span></div><div class="line"><span class="comment"># vim ~/.pip/pip.conf</span></div><div class="line">[<span class="keyword">global</span>]</div><div class="line">index-url=https://pypi.tuna.tsinghua.edu.cn/simple</div><div class="line">也可以每次安装的时候制定 source</div><div class="line"><span class="comment"># pip install –i https://pypi.tuna.tsinghua.edu.cn/simple lxml</span></div></pre></td></tr></table></figure>
<ul>
<li>解析网页<br>pip search lxml<br>pip install lxml</li>
</ul>
<h3 id="基础环境Python-Unix-1"><a href="#基础环境Python-Unix-1" class="headerlink" title="基础环境Python Unix"></a>基础环境Python Unix</h3><ul>
<li>直接下载 Anaconda，很多比较难以安装的源都已经包含了</li>
<li>仍然配置 pip 源，各个系统的默认 pip.ini 位置不同，需要根据实际情况设置<ul>
<li>官网： <a href="https://anaconda.org/" target="_blank" rel="external">https://anaconda.org/</a></li>
<li>下载主页：<a href="https://www.continuum.io/downloads" target="_blank" rel="external">https://www.continuum.io/downloads</a></li>
</ul>
</li>
</ul>
<h3 id="HTTP-协议"><a href="#HTTP-协议" class="headerlink" title="HTTP 协议"></a>HTTP 协议</h3><h4 id="TCP-IP-四层-与-OSI-七层"><a href="#TCP-IP-四层-与-OSI-七层" class="headerlink" title="TCP/IP 四层 与 OSI 七层"></a>TCP/IP 四层 与 OSI 七层</h4><p><img src="http://i.imgur.com/oK75jjA.png" alt=""></p>
<ul>
<li>物理层：电器连接</li>
<li>数据链路层：交换机，STP，帧中继</li>
<li>网络层：路由器，IP 协议</li>
<li>传输层：TCP、UDP 协议</li>
<li>会话层：建立通信连接，网络拨号</li>
<li>表示层：每次连接只处理一个请求</li>
<li>应用层：HTTP、FTP</li>
</ul>
<p>https 不是协议 是工作在表示层，把应用层数据加密封装通过SOcket传出去</p>
<h4 id="HTTP-协议-1"><a href="#HTTP-协议-1" class="headerlink" title="HTTP 协议"></a>HTTP 协议</h4><ul>
<li>应用层的协议</li>
<li>无连接：每次连接只处理一个请求</li>
<li>无状态：每次连接、传输都是独立的<h4 id="HTTP-HEADER"><a href="#HTTP-HEADER" class="headerlink" title="HTTP HEADER"></a>HTTP HEADER</h4><ul>
<li><font color="red">Accept: text/plain</font></li>
<li>请求为文本</li>
<li><font color="red">Accept-Charset: utf-8</font></li>
</ul>
</li>
<li>编码：UTF-8<ul>
<li><font color="red">Accept-Encoding: gzip, deflate</font></li>
<li>gzip网页可以压缩（爬数据的时候带了该字段，数据需要解压） </li>
</ul>
</li>
<li>deflate</li>
<li>Accept-Language: en-US</li>
<li><font color="red">Connection: keep-alive</font></li>
<li>Content-Length: 348<ul>
<li>Content-Type: application/x-www-form-urlencoded</li>
</ul>
</li>
<li>Date: Tue, 15 Nov 1994 08:12:31 GMT</li>
<li>Host: en.wikipedia.org:80</li>
<li><font color="red">User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:12.0) Gecko/20100101 Firefox/21.0</font></li>
<li><font color="red">Cookie: $Version=1; Skin=new;</font><h4 id="RESPONSE-的-HTTP-HEADER"><a href="#RESPONSE-的-HTTP-HEADER" class="headerlink" title="RESPONSE 的 HTTP HEADER"></a>RESPONSE 的 HTTP HEADER</h4></li>
<li>Accept-Patch: text/example;charset=utf-8</li>
<li>Cache-Control: max-age=3600</li>
<li>Content-Encoding: gzip</li>
<li>Last-Modified: Tue, 15 Nov 1994 12:45:26 GMT</li>
<li>Content-Language: da</li>
<li>Content-Length: 348</li>
<li>ETag: “737060cd8c284d8af7ad3082f209582d“</li>
<li>Expires: Thu, 01 Dec 1994 16:00:00 GMT</li>
<li><font color="red">Location: <a href="http://www.w3.org/pub/WWW/People.html" target="_blank" rel="external">http://www.w3.org/pub/WWW/People.html</a></font></li>
<li><font color="red">Set-Cookie: UserID=JohnDoe; Max-Age=3600; Version=1</font></li>
<li><font color="red">Status: 200 OK</font><ul>
<li>Status: 300 网站需要 跳转<h4 id="keep-alive"><a href="#keep-alive" class="headerlink" title="keep-alive"></a>keep-alive</h4></li>
</ul>
</li>
<li>HTTP是一个请求&lt;-&gt;响应模式的典型范例，即客户端向服务器发送一个请求信息，服务器来响应这个信息。在老的HTTP版本中，每个请求都将被创建一个新的客户端-&gt;服务器的连接，在这个连接上发送请求，然后接收请求。这样的模式有一个很大的优点就是，它很简单，很容易理解和编程实现；它也有一个很大的缺点就是，它效率很低，因此Keep-Alive被提出用来解决效率低的问题。</li>
<li>Keep-Alive功能使客户端到服务器端的连接持续有效，当出现对服务器的后继请求时，Keep-Alive功能避免了建立或者重新建立连接。</li>
<li>HTTP/1.1<pre><code>-  默认情况下所在HTTP1.1中所有连接都被保持，除非在请求头或响应头中指明要关闭：Connection: Close
</code></pre><h4 id="HTTP-请求方法"><a href="#HTTP-请求方法" class="headerlink" title="HTTP 请求方法"></a>HTTP 请求方法</h4><img src="http://i.imgur.com/rvplRp9.png" alt=""></li>
<li>对于静态网页使用Get方法</li>
<li>对于动态网页（ajax），使用POST方法是知道其<br>WebServer并直接对其处理</li>
<li>Post VS Get</li>
<li>Post告诉服务器做一件事情，如果设计上有什么漏洞，用户可以通过Post方法删除掉数据</li>
<li>get 是逆等，是取内容回来<h4 id="HTTP-响应状态码"><a href="#HTTP-响应状态码" class="headerlink" title="HTTP 响应状态码"></a>HTTP 响应状态码</h4></li>
<li>2XX 成功</li>
<li>3XX 跳转</li>
<li>4XX 客户端错误</li>
<li>500 服务器错误</li>
<li>HTTP 响应状态码 300<ul>
<li>300 Multiple Choices 存在多个可用的资源，可处理或丢弃</li>
<li>301 Moved Permanetly 重定向</li>
<li>302 Found 重定向</li>
<li>304 Not Modified 请求的资源未更新，丢弃<ul>
<li>一些 Python 库，例如 urllib2 已结对重定向做了处理，会自动跳转；动态网页处理的时候，也是自动跳转，所以不需要单独处理</li>
</ul>
</li>
<li>HTTP 响应状态码 400、500<ul>
<li>400 Bad Request 客户端请求有语法错误，不能被服务器所理解</li>
<li>401 Unauthorized 请求未经授权，这个状态代码必须和WWW-Authenticate报头域一起使用</li>
<li>403 Forbidden 服务器收到请求，但是拒绝提供服务</li>
<li>404 Not Found 请求资源不存在，eg：输入了错误的URL</li>
<li>500 Internal Server Error 服务器发生不可预期的错误</li>
<li>503 Server Unavailable 服务器当前不能处理客户端的请求，一段时间后可能恢复正常</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="宽度及深度抓取"><a href="#宽度及深度抓取" class="headerlink" title="宽度及深度抓取"></a>宽度及深度抓取</h3><h4 id="网页抓取原理"><a href="#网页抓取原理" class="headerlink" title="网页抓取原理"></a>网页抓取原理</h4><p><img src="http://i.imgur.com/81IvxKN.png" alt=""></p>
<h4 id="深度优先策略"><a href="#深度优先策略" class="headerlink" title="深度优先策略"></a>深度优先策略</h4><p><img src="http://i.imgur.com/c9SvTkn.png" alt=""><br>递归的方式（处于递归的栈里）</p>
<h4 id="宽度优先策略"><a href="#宽度优先策略" class="headerlink" title="宽度优先策略"></a>宽度优先策略</h4><p><img src="http://i.imgur.com/VSJVHQw.png" alt=""><br>队列方式</p>
<h4 id="选择哪种策略？"><a href="#选择哪种策略？" class="headerlink" title="选择哪种策略？"></a>选择哪种策略？</h4><ul>
<li>重要的网页距离种子站点比较近</li>
<li>万维网的深度并没有很深，一个网页有很多路径可以到达</li>
<li>宽度优先有利于多爬虫并行合作抓取</li>
<li>深度限制与宽度优先相结合</li>
</ul>
<h3 id="不重复抓取策略"><a href="#不重复抓取策略" class="headerlink" title="不重复抓取策略"></a>不重复抓取策略</h3><h4 id="如何记录抓取历史？"><a href="#如何记录抓取历史？" class="headerlink" title="如何记录抓取历史？"></a>如何记录抓取历史？</h4><ul>
<li>1.将访问过的URL保存到数据库<font color="red">效率太低</font><ul>
<li>设置UNIQUE字段</li>
<li>url UNIQUE</li>
</ul>
</li>
<li>2.用HashSet将访问过的URL保存起来。那只需接近O(1)的代价就可以查到一个URL是否被访问过了。<font color="red">消耗内存</font></li>
<li>3.URL经过MD5或SHA-1等单向哈希后再保存到HashSet或数据库。</li>
<li>4.Bit-Map方法。建立一个BitSet，将每个URL经过一个哈希函数映射到某一位。<h4 id="MD5-函数"><a href="#MD5-函数" class="headerlink" title="MD5 函数"></a>MD5 函数</h4>MD5 签名是一个哈希函数，可以将任意长度的数据量转换为一个固定长度的数字（通常是4个整型，128位）。计算机不可能有2的128那么大内存，因此实际的哈希表都会是URL.MD5再%n（即取模）。现实世界的URL组合必然超越哈希表的槽位数，因此碰撞是一定存在的，一般的HASH函数，例如Java的 HashTable 是一个HASH表再跟上一个链表，链表里存的是碰撞结果<br><img src="http://i.imgur.com/7yWiFIh.png" alt=""><h4 id="提高效率？"><a href="#提高效率？" class="headerlink" title="提高效率？"></a>提高效率？</h4></li>
<li>评估网站的网页数量</li>
<li>选择合适的HASH算法和空间阈值，降低碰撞几率</li>
<li>选择合适的存储结构和算法<h4 id="评估网页数量"><a href="#评估网页数量" class="headerlink" title="评估网页数量"></a>评估网页数量</h4><img src="http://i.imgur.com/lFgwG9G.png" alt=""><br><img src="http://i.imgur.com/MT0DU2e.png" alt=""><h4 id="BITMAP-方式记录"><a href="#BITMAP-方式记录" class="headerlink" title="BITMAP 方式记录"></a>BITMAP 方式记录</h4></li>
<li><p>将URL的MD5值再次哈希，用一个或多个BIT位来记录一个URL：</p>
<ul>
<li>1.确定空间大小 e.g. facebook 1.5Gb</li>
<li>2.按倍增加槽位 e.g. 16GB</li>
<li><p>3.HASH 算法映射(murmurhash3, cityhash) Python: mmh3 bitarray</p>
<p> <img src="http://i.imgur.com/cW4AUMU.png" alt=""></p>
</li>
<li><p>pip install murmurhash3 bitarray<br><img src="http://i.imgur.com/L66nkl5.png" alt=""></p>
</li>
</ul>
</li>
<li>优势：对存储进行了进一步压缩，在MD5的基础上，可以从128位最多压缩到1位，一般情况，如果用4bit或者8bit表示一个url，也能压缩32或者16倍</li>
<li>缺陷：碰撞概率增加</li>
</ul>
<h4 id="Bloom-Filter"><a href="#Bloom-Filter" class="headerlink" title="Bloom Filter"></a>Bloom Filter</h4><ul>
<li>Bloom Filter使用了多个哈希函数，而不是一个。创建一个m位BitSet，先将所有位初始化为0，然后选择k个不同的哈希函数。第i个哈希函数对字符串str哈希的结果记为h（i，str），且h（i，str）的范围是0到m-1。<br>只能插入，不能删除！<br><img src="http://i.imgur.com/JaRZ1JO.png" alt=""></li>
<li>pybloomfilter</li>
<li><p>安装</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">pip install pybloomfilter (可能运行时会crash）</div><div class="line">- 安装</div><div class="line">git clone https://github.com/axiak/pybloomfiltermmap.git</div><div class="line">python setup.py install</div></pre></td></tr></table></figure>
</li>
<li><p>构造函数</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">class pybloomfilter.BloomFilter(capacity : int, error_rate : float[, filename=None : string ][, perm=0755 ])</div><div class="line">并不实际检查容量，如果需要比较低的error_rate，则需要设置更大的容量</div></pre></td></tr></table></figure>
</li>
<li><p>Sample</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>fruit = pybloomfilter.BloomFilter(<span class="number">100000</span>, <span class="number">0.1</span>, <span class="string">'/tmp/words.bloom'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fruit.update((<span class="string">'apple'</span>, <span class="string">'pear'</span>, <span class="string">'orange'</span>, <span class="string">'apple'</span>))</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>len(fruit) <span class="number">3</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'mike'</span> <span class="keyword">in</span> fruit</div><div class="line"><span class="keyword">False</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'apple'</span> <span class="keyword">in</span> fruit</div><div class="line"><span class="keyword">True</span></div></pre></td></tr></table></figure>
</li>
<li><p>官方文档<br><a herf="https://media.readthedocs.org/pdf/pybloomfiltermmap3/latest/pybloomfiltermmap3.pdf">https://media.readthedocs.org/pdf/pybloomfiltermmap3/latest/pybloomfiltermmap3.pdf</a></p>
</li>
</ul>
<h4 id="如何有效记录抓取历史？"><a href="#如何有效记录抓取历史？" class="headerlink" title="如何有效记录抓取历史？"></a>如何有效记录抓取历史？</h4><ul>
<li>多数情况下不需要压缩，尤其网页数量少的情况</li>
<li>网页数量大的情况下，使用 Bloom Filter 压缩</li>
<li>重点是计算碰撞概率，并根据碰撞概率来确定存储空间的阈值</li>
<li>分布式系统，将散列映射到多台主机的内存</li>
</ul>
<h3 id="网站结构分析"><a href="#网站结构分析" class="headerlink" title="网站结构分析"></a>网站结构分析</h3><ul>
<li>Robots.txt<ul>
<li>网站对爬虫的限制</li>
<li>利用 sitemap 来分析网站结构和估算目标网页的规模<br><img src="http://i.imgur.com/oopQg7k.png" alt=""></li>
</ul>
</li>
<li><p>Sitemap</p>
<p>  <img src="http://i.imgur.com/lh6GD2X.png" alt=""></p>
</li>
</ul>
<h4 id="有效率抓取特定内容"><a href="#有效率抓取特定内容" class="headerlink" title="有效率抓取特定内容"></a>有效率抓取特定内容</h4><ul>
<li>利用 sitemap 里的信息<ul>
<li>直接对目标网页 .html 进行抓取</li>
</ul>
</li>
<li>对网站目录结构进行分析<ul>
<li>大多数网站都会存在明确的 top-down 的分类的目录结构，我们可以进入特定目录进行抓取</li>
<li>对网站目录结构进行分析<br>对于 www.mafengwo.cn 这个网站，所有旅游的游记都位于 www.mafengwo.cn/mdd 下，按照城市进行了分类，每个城市的游记位于城市的首页。</li>
<li>城市的首页： /travel-scenic-spot/mafengwo/10774.html</li>
<li>游记的分页格式： /yj/10774/1-0-01.html</li>
<li>游记的页面：/i/3523364.html</li>
</ul>
</li>
</ul>
<h3 id="简单爬虫代码"><a href="#简单爬虫代码" class="headerlink" title="简单爬虫代码"></a>简单爬虫代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> urllib2</div><div class="line"><span class="keyword">import</span> httplib</div><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="keyword">from</span> pybloomfilter <span class="keyword">import</span> BloomFilter</div><div class="line"><span class="keyword">import</span> os</div><div class="line"></div><div class="line">request_headers = &#123;</div><div class="line">    <span class="string">'host'</span>: <span class="string">"www.mafengwo.cn"</span>,</div><div class="line">    <span class="string">'connection'</span>: <span class="string">"keep-alive"</span>,</div><div class="line">    <span class="string">'cache-control'</span>: <span class="string">"no-cache"</span>,</div><div class="line">    <span class="string">'upgrade-insecure-requests'</span>: <span class="string">"1"</span>,</div><div class="line">    <span class="string">'user-agent'</span>: <span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.95 Safari/537.36"</span>,</div><div class="line">    <span class="string">'accept'</span>: <span class="string">"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8"</span>,</div><div class="line">    <span class="string">'accept-language'</span>: <span class="string">"zh-CN,en-US;q=0.8,en;q=0.6"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">city_home_pages = []</div><div class="line">city_ids = []</div><div class="line">dirname = <span class="string">'mafengwo_notes/'</span></div><div class="line"></div><div class="line"><span class="comment"># 创建 Bloom Filter</span></div><div class="line">download_bf = BloomFilter(<span class="number">1024</span> * <span class="number">1024</span> * <span class="number">16</span>, <span class="number">0.01</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">download_city_notes</span><span class="params">(id)</span>:</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">999</span>):</div><div class="line">        url = <span class="string">'http://www.mafengwo.cn/yj/%s/1-0-%d.html'</span> % (id, i)</div><div class="line">        <span class="keyword">if</span> url <span class="keyword">in</span> download_bf:</div><div class="line">            <span class="keyword">continue</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'open url %s'</span> % (url)</div><div class="line">        download_bf.add(url)</div><div class="line">        req = urllib2.Request(url, headers=request_headers)</div><div class="line">        response = urllib2.urlopen(req)</div><div class="line">        htmlcontent = response.read()</div><div class="line">        city_notes = re.findall(<span class="string">'href="/i/\d&#123;7&#125;.html'</span>, htmlcontent)</div><div class="line"></div><div class="line">        <span class="comment"># 如果导航页错误，该页的游记数为0，则意味着 1-0-xxx.html 已经遍历完，结束这个城市</span></div><div class="line">        <span class="keyword">if</span> len(city_notes) == <span class="number">0</span>:</div><div class="line">            <span class="keyword">return</span></div><div class="line">        <span class="keyword">for</span> city_note <span class="keyword">in</span> city_notes:</div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                city_url = <span class="string">'http://www.mafengwo.cn%s'</span> % (city_note[<span class="number">6</span>:])</div><div class="line">                <span class="keyword">if</span> city_url <span class="keyword">in</span> download_bf:</div><div class="line">                    <span class="keyword">continue</span></div><div class="line">                <span class="keyword">print</span> <span class="string">'download %s'</span> % (city_url)</div><div class="line">                req = urllib2.Request(city_url, headers=request_headers)</div><div class="line">                response = urllib2.urlopen(req)</div><div class="line">                html = response.read()</div><div class="line">                filename = city_url[<span class="number">7</span>:].replace(<span class="string">'/'</span>, <span class="string">'_'</span>)</div><div class="line">                fo = open(<span class="string">"%s%s"</span> % (dirname, filename), <span class="string">'wb+'</span>)</div><div class="line">                fo.write(html)</div><div class="line">                fo.close()</div><div class="line">                download_bf.add(city_url)</div><div class="line">            <span class="keyword">except</span> Exception, Arguments:</div><div class="line">                <span class="keyword">print</span> Arguments</div><div class="line">                <span class="keyword">continue</span></div><div class="line"></div><div class="line"><span class="comment"># 检查用于存储网页文件夹是否存在，不存在则创建</span></div><div class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exits(dirname):</div><div class="line">    os.makedirs(dirname)</div><div class="line"></div><div class="line"><span class="keyword">try</span>:</div><div class="line">    <span class="comment"># 下载目的地的首页</span></div><div class="line">    req = urllib2.Request(<span class="string">'http://www.mafengwo.cn/mdd/'</span>, headers=request_headers)</div><div class="line">    response = urllib2.urlopen(req)</div><div class="line">    htmlcontent = response.read()</div><div class="line"></div><div class="line">    <span class="comment"># 利用正则表达式，找出所有的城市主页</span></div><div class="line">    city_home_pages = re.findall(<span class="string">'/travel-scenic-spot/mafengwo/\d&#123;5&#125;.html'</span>, htmlcontent)</div><div class="line"></div><div class="line">    <span class="comment"># 通过循环，依次下载每个城市下的所有游记</span></div><div class="line">    <span class="keyword">for</span> city <span class="keyword">in</span> city_home_pages:</div><div class="line">        city_ids.append(city[<span class="number">29</span>:<span class="number">34</span>])</div><div class="line">        download_city_notes(city[<span class="number">29</span>:<span class="number">34</span>])</div><div class="line"><span class="keyword">except</span> urllib2.HTTPError, Arguments:</div><div class="line">    <span class="keyword">print</span> Arguments</div><div class="line"><span class="keyword">except</span> httplib.BadStatusLine:</div><div class="line">    <span class="keyword">print</span> <span class="string">'BadStatusLine'</span></div><div class="line"><span class="keyword">except</span> Exception, Arguments:</div><div class="line">    <span class="keyword">print</span> Arguments</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;基础环境Python-Unix&quot;&gt;&lt;a href=&quot;#基础环境Python-Unix&quot; class=&quot;headerlink&quot; title=&quot;基础环境Python Unix&quot;&gt;&lt;/a&gt;基础环境Python Unix&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;python 2.7&lt;/
    
    </summary>
    
      <category term="网络爬虫" scheme="http://yoursite.com/categories/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="爬虫" scheme="http://yoursite.com/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>HashMap原理及实现</title>
    <link href="http://yoursite.com/2017/06/15/%E7%AE%97%E6%B3%95/hashmap/"/>
    <id>http://yoursite.com/2017/06/15/算法/hashmap/</id>
    <published>2017-06-15T13:13:41.928Z</published>
    <updated>2017-06-15T13:42:20.389Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是hash"><a href="#什么是hash" class="headerlink" title="什么是hash"></a>什么是hash</h3><ul>
<li>它将一个长度为二进制通过一个映射关系转换成一个固定长度的二进制值。<br><img src="http://i.imgur.com/sxzJQY5.png" alt=""><ul>
<li>1.任意长度的二进制</li>
<li>2.映射关系（哈希算法–就相当于一个大学里面的学号的一个映射规则）</li>
<li>3.固定的二进制（哈希值–相当于我大学里面的学号）</li>
</ul>
</li>
<li>任意长度的二进制和固定长度的二进制 是一个一一对应关系</li>
<li>固定长度的二进制就相当于一个任意长度的二进制的摘要</li>
<li>固定长度的二进制 相当于一个关键字 key</li>
<li>真正有效的数据 就是这个学生的基本信息，一个任意长度的二进制value<h4 id="key-–-value"><a href="#key-–-value" class="headerlink" title="key – value"></a>key – value</h4></li>
<li>hash 只是确定了一个key和一个value的唯一映射关系</li>
</ul>
<h3 id="hash表"><a href="#hash表" class="headerlink" title="hash表"></a>hash表</h3><ul>
<li>特点：它存储效率很高，取数据的时间复杂度是1 o(1)<br>-hash 通过一个key一个输入，通过一个哈希函数，来找到数组与这个key唯一映射的value，根据这个hash函数找到数组中这个value的下标<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">table a = []</div><div class="line">int index = hash(key)</div><div class="line">int value = a[index]</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="hash函数"><a href="#hash函数" class="headerlink" title="hash函数"></a>hash函数</h3><p>key,找下标，有哪些方法可以找到下标</p>
<h4 id="除留取余数法（取模）"><a href="#除留取余数法（取模）" class="headerlink" title="除留取余数法（取模）"></a>除留取余数法（取模）</h4><ul>
<li>定义数 a 长度是16<ul>
<li>int index = key%m;</li>
</ul>
</li>
<li>m的取值规则：<ul>
<li>m要取比数组长长度小的最大质数</li>
<li>m = 13</li>
</ul>
</li>
</ul>
<h4 id="平方取中法"><a href="#平方取中法" class="headerlink" title="平方取中法"></a>平方取中法</h4><h3 id="hash-表处理冲突"><a href="#hash-表处理冲突" class="headerlink" title="hash 表处理冲突"></a>hash 表处理冲突</h3><ul>
<li>1.线性探测法：探测的步长n=1；<ul>
<li>如果插入新数据时在index位置发现有老数据存在，新数据插入的位置向后移动 步长n,如果后面还有数据则继续往后移动步长n，直到把新数据没有数据存在的位置</li>
</ul>
</li>
<li>2.链表形式<ul>
<li>插入发现位置有老数据存在，新的放在老的位置并使新的数据next指向刚覆盖的老数据<br><img src="http://i.imgur.com/cuqpxQP.png" alt=""></li>
</ul>
</li>
</ul>
<h3 id="MD5-函数"><a href="#MD5-函数" class="headerlink" title="MD5 函数"></a>MD5 函数</h3><ul>
<li>MD5 签名是一个哈希函数，可以将任意长度的数据量转换为一个固定长度的数字（通常是4个整型，128位）。计算机不可能有2的128次方那么大内存，因此实际的哈希表都会是URL.MD5再%n（即取模）。现实世界的URL组合必然超越哈希表的槽位数，因此碰撞是一定存在的，一般的HASH函数，例如Java的 HashTable 是一个HASH表再跟上一个链表，链表里存的是碰撞结果</li>
</ul>
<p><img src="http://i.imgur.com/V608V3y.png" alt=""></p>
<h3 id="hashMap-java-代码实现"><a href="#hashMap-java-代码实现" class="headerlink" title="hashMap(java)代码实现"></a>hashMap(java)代码实现</h3><h4 id="定义接口Ihashmap-java"><a href="#定义接口Ihashmap-java" class="headerlink" title="定义接口Ihashmap.java"></a>定义接口Ihashmap.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Ihashmap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K k,V v)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(K k)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>;</div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span>  <span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span>&#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> K <span class="title">getKey</span><span class="params">()</span></span>;</div><div class="line">        <span class="function"><span class="keyword">public</span> V <span class="title">getValue</span><span class="params">()</span></span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="实现接口hMap-java"><a href="#实现接口hMap-java" class="headerlink" title="实现接口hMap.java"></a>实现接口hMap.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">hMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Ihashmap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">private</span>  <span class="keyword">static</span> <span class="keyword">int</span> defaultLength = <span class="number">16</span>;</div><div class="line">    <span class="comment">//负载因子 超过defaultLength*defalutLoader Hasp必须扩容</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">double</span> defalutLoader = <span class="number">0.75</span>;</div><div class="line">    <span class="keyword">private</span> Entry&lt;K,V&gt; [] table = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">private</span>  <span class="keyword">int</span> size = <span class="number">0</span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">hMap</span><span class="params">(<span class="keyword">int</span> length,<span class="keyword">double</span> loader)</span></span>&#123;</div><div class="line">        defalutLoader = loader;</div><div class="line">        defaultLength = length;</div><div class="line">        table = <span class="keyword">new</span> Entry[defaultLength];</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">hMap</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>(defaultLength,defalutLoader);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K k,V v)</span></span>&#123;</div><div class="line">        <span class="comment">//在这里判断一下size是否达到扩容的标准</span></div><div class="line">        <span class="keyword">if</span>(size &gt;= defaultLength*defalutLoader)&#123;</div><div class="line">            up2size();</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//1.创建一个hash函数，根据key和hash函数算出数组下标</span></div><div class="line">        <span class="keyword">int</span> index = getIndex(k);</div><div class="line">        Entry&lt;K,V&gt; entry = table[index];</div><div class="line">        <span class="keyword">if</span> (entry == <span class="keyword">null</span>)&#123;</div><div class="line">            <span class="comment">//如果entry为null，说明table的index位置没有元素</span></div><div class="line">            table[index] = newEntry(k,v,<span class="keyword">null</span>);</div><div class="line">            size++;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="comment">//如果index位置不为空，说明index位置有元素，那么要进行一个替换，然后next指针指向老数据</span></div><div class="line">            table[index] = newEntry(k,v,entry);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> table[index].getValue();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">up2size</span><span class="params">()</span></span>&#123;</div><div class="line">        Entry&lt;K,V&gt;[] newTable = <span class="keyword">new</span> Entry[<span class="number">2</span>*defaultLength];</div><div class="line">        <span class="comment">//新创建的数组以后，以前老数组里面的元素要对新数组再进行散列</span></div><div class="line">        againHash(newTable);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">private</span>  <span class="keyword">void</span> <span class="title">againHash</span><span class="params">(Entry&lt;K,V&gt;[]newTable)</span></span>&#123;</div><div class="line">        List&lt;Entry&lt;K,V&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;Entry&lt;K, V&gt;&gt;();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;table.length;i++)&#123;</div><div class="line">            <span class="keyword">if</span>(table[i] == <span class="keyword">null</span>)&#123;</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line">            findEntryByNext(table[i],list);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(list.size()&gt;<span class="number">0</span>)&#123;</div><div class="line">            <span class="comment">//要进行一个数组的再散列</span></div><div class="line">            size = <span class="number">0</span>;</div><div class="line">            defaultLength = defaultLength * <span class="number">2</span>;</div><div class="line">            table = newTable;</div><div class="line">            <span class="keyword">for</span>(Entry&lt;K,V&gt; entry:list)&#123;</div><div class="line">                <span class="keyword">if</span>(entry.next != <span class="keyword">null</span>)&#123;</div><div class="line">                    entry.next = <span class="keyword">null</span>;</div><div class="line">                &#125;</div><div class="line">                put(entry.getKey(),entry.getValue());</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">private</span>  <span class="keyword">void</span> <span class="title">findEntryByNext</span><span class="params">(Entry&lt;K,V&gt; entry,List&lt;Entry&lt;K,V&gt;&gt; list)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(entry != <span class="keyword">null</span> &amp;&amp; entry.next != <span class="keyword">null</span>)&#123;</div><div class="line">            list.add(entry);</div><div class="line">            findEntryByNext(entry.next,list);</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            list.add(entry);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">private</span>  Entry&lt;K,V&gt; <span class="title">newEntry</span><span class="params">(K k,V v,Entry&lt;K,V&gt;next)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Entry(k,v,next);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getIndex</span><span class="params">(K k)</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> m = defaultLength;</div><div class="line">        <span class="keyword">int</span> index = k.hashCode()%m;</div><div class="line">        <span class="keyword">return</span>  index&gt;=<span class="number">0</span> ? index:-index;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(K k)</span></span>&#123;</div><div class="line">        <span class="comment">//1.创建一个hash函数，根据key和hash函数算出数组下标</span></div><div class="line">        <span class="keyword">int</span> index = getIndex(k);</div><div class="line">        <span class="keyword">if</span> (table[index] == <span class="keyword">null</span>)&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> findValueByEqualKey(k,table[index]);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">findValueByEqualKey</span><span class="params">(K k,Entry&lt;K,V&gt; entry)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(k == entry.getKey() || k.equals((entry.getKey())))&#123;</div><div class="line">            <span class="keyword">return</span>  entry.getValue();</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">if</span> (entry.next != <span class="keyword">null</span>)&#123;</div><div class="line">                <span class="keyword">return</span>  findValueByEqualKey(k,entry.next);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> size;</div><div class="line">    &#125;</div><div class="line">    <span class="class"><span class="keyword">class</span>   <span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Ihashmap</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span>&#123;</div><div class="line">        K k;</div><div class="line">        V v;</div><div class="line">        Entry&lt;K,V&gt; next;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Entry</span><span class="params">(K k,V v,Entry&lt;K,V&gt; next)</span></span>&#123;</div><div class="line">            <span class="keyword">this</span>.k = k;</div><div class="line">            <span class="keyword">this</span>.v = v;</div><div class="line">            <span class="keyword">this</span>.next = next;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> K <span class="title">getKey</span><span class="params">()</span></span>&#123;</div><div class="line">            <span class="keyword">return</span> k;</div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="keyword">public</span> V <span class="title">getValue</span><span class="params">()</span></span>&#123;</div><div class="line">            <span class="keyword">return</span> v;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="测试类test-java"><a href="#测试类test-java" class="headerlink" title="测试类test.java"></a>测试类test.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.HashMap;</div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by Administrator on 2017/6/15.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">        Ihashmap&lt;String,String&gt; lmap = <span class="keyword">new</span> hMap&lt;String,String&gt;();</div><div class="line">        Long t1 = System.currentTimeMillis();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</div><div class="line">            lmap.put(<span class="string">"key"</span>+i,<span class="string">"value"</span>+i);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</div><div class="line">            System.out.println(<span class="string">"key:"</span>+<span class="string">"key"</span>+i + <span class="string">"   value:"</span>+lmap.get(<span class="string">"key"</span>+i));</div><div class="line">        &#125;</div><div class="line">        Long t2 = System.currentTimeMillis();</div><div class="line">        System.out.println(<span class="string">"手写实现haspmap耗时："</span>+(t2-t1));</div><div class="line">        System.out.println(<span class="string">"--------------hashMap--------------"</span>);</div><div class="line"></div><div class="line">        Map&lt;String,String&gt; map = <span class="keyword">new</span> HashMap&lt;String,String&gt;();</div><div class="line">        Long t3 = System.currentTimeMillis();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</div><div class="line">            lmap.put(<span class="string">"key"</span>+i,<span class="string">"value"</span>+i);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</div><div class="line">            System.out.println(<span class="string">"key:"</span>+<span class="string">"key"</span>+i + <span class="string">"  value:"</span>+lmap.get(<span class="string">"key"</span>+i));</div><div class="line">        &#125;</div><div class="line">        Long t4 = System.currentTimeMillis();</div><div class="line">        System.out.println(<span class="string">"JDK实现haspmap耗时："</span>+(t4-t3));</div><div class="line">        System.out.println(<span class="string">"手写实现haspmap耗时："</span>+(t2-t1));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><a href="https://github.com/liuzhupeng/hashmaps" target="_blank" rel="external">git源码</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;什么是hash&quot;&gt;&lt;a href=&quot;#什么是hash&quot; class=&quot;headerlink&quot; title=&quot;什么是hash&quot;&gt;&lt;/a&gt;什么是hash&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;它将一个长度为二进制通过一个映射关系转换成一个固定长度的二进制值。&lt;br&gt;&lt;img sr
    
    </summary>
    
      <category term="算法与数据结构" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="算法与数据结构" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="HashMap" scheme="http://yoursite.com/tags/HashMap/"/>
    
  </entry>
  
  <entry>
    <title>朴素贝叶斯 模型的手工实现</title>
    <link href="http://yoursite.com/2017/06/15/MachineLearning/%E6%9C%B4%E7%B4%A0%E8%B4%9D%E5%8F%B6%E6%96%AF/"/>
    <id>http://yoursite.com/2017/06/15/MachineLearning/朴素贝叶斯/</id>
    <published>2017-06-14T16:06:54.230Z</published>
    <updated>2017-06-15T06:51:02.062Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li><p>主函数（main.py）</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> make_classification</div><div class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</div><div class="line"><span class="keyword">from</span> nb_tools <span class="keyword">import</span> NaiveBayes, cal_acc</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_main</span><span class="params">()</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">        主函数</div><div class="line">    """</div><div class="line">    <span class="comment">#认为构造400个样本，每个样本100个维度， 4分类</span></div><div class="line">    n_feat = <span class="number">100</span>    <span class="comment"># 特征个数</span></div><div class="line">    X, y = make_classification(</div><div class="line">        n_samples=<span class="number">400</span>,</div><div class="line">        n_features=n_feat,</div><div class="line">        n_classes=<span class="number">4</span>,</div><div class="line">        random_state=<span class="number">5</span>)</div><div class="line">    </div><div class="line">    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=<span class="number">0.3</span>,</div><div class="line">                                                        random_state=<span class="number">17</span>)</div><div class="line"></div><div class="line">    nb_model = NaiveBayes(n_feat)</div><div class="line"></div><div class="line">    <span class="comment"># 样本特征为连续值，假设其符合高斯分布，则需要求出每个特征的均值和标准差</span></div><div class="line">    <span class="comment"># 这里称为统计参数 stats</span></div><div class="line"></div><div class="line">    <span class="comment"># 获取训练集中每个类别的统计参数</span></div><div class="line">    tr_cls_stats = nb_model.get_cls_stats(X_train, y_train)</div><div class="line">    <span class="keyword">for</span> cls, samples_stats <span class="keyword">in</span> tr_cls_stats.items():</div><div class="line">        print(<span class="string">'类&#123;&#125;的统计参数：'</span>.format(cls))</div><div class="line">        <span class="keyword">for</span> i, feat_stats <span class="keyword">in</span> enumerate(samples_stats):</div><div class="line">            <span class="comment"># 查看每个特征的统计参数</span></div><div class="line">            print(<span class="string">'第&#123;&#125;个特征的统计参数&#123;&#125;'</span>.format(i, feat_stats))</div><div class="line"></div><div class="line">    <span class="comment"># 根据训练样本的统计参数进行预测</span></div><div class="line">    y_pred = nb_model.predict(tr_cls_stats, X_test)</div><div class="line"></div><div class="line">    <span class="comment"># 准确率</span></div><div class="line">    print(<span class="string">'准确率：&#123;&#125;'</span>.format(cal_acc(y_test, y_pred)))</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    run_main()</div></pre></td></tr></table></figure>
</li>
<li><p>nb_tools.py</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">import</span> scipy.stats</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">NaiveBayes</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">        Naive Bayes 类</div><div class="line">    """</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, n_feat)</span>:</span></div><div class="line">        self.n_feat = n_feat    <span class="comment"># 样本的特征维度</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_cls_stats</span><span class="params">(self, X_train, y_train)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">            返回训练集中每个类的统计参数</div><div class="line">        """</div><div class="line">        <span class="comment"># 获取类别</span></div><div class="line">        unique_cls_list = list(set(y_train.tolist()))</div><div class="line"></div><div class="line">        <span class="comment"># 构造字典</span></div><div class="line">        dataset_stats = &#123;&#125;</div><div class="line">        <span class="keyword">for</span> cls <span class="keyword">in</span> unique_cls_list:</div><div class="line">            <span class="comment"># 获取属于该类的样本</span></div><div class="line">            samples_in_cls = X_train[y_train == cls]</div><div class="line"></div><div class="line">            <span class="comment"># 获取该类样本中每个特征的统计参数</span></div><div class="line">            samples_in_cls_stats = self.get_samples_stats(samples_in_cls)</div><div class="line">            dataset_stats[cls] = samples_in_cls_stats</div><div class="line"></div><div class="line">        <span class="keyword">return</span> dataset_stats</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_samples_stats</span><span class="params">(self, samples)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">            返回一组样本中每个特征（属性）的统计参数</div><div class="line">        """</div><div class="line">        <span class="comment"># 每个特征维度上计算统计参数，即均值和标准差</span></div><div class="line">        samples_stats = [(np.mean(samples[:, i]), np.std(samples[:, i]))</div><div class="line">                         <span class="keyword">for</span> i <span class="keyword">in</span> range(self.n_feat)]</div><div class="line">        <span class="keyword">return</span> samples_stats</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">predict</span><span class="params">(self, tr_cls_stats, X_test)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">            根据训练样本统计参数预测整个测试样本集</div><div class="line">        """</div><div class="line">        y_pred = []</div><div class="line">        n_sample = X_test.shape[<span class="number">0</span>]  <span class="comment"># 测试样本的个数</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n_sample):</div><div class="line">            <span class="comment"># 遍历每个测试样本</span></div><div class="line">            sample = X_test[i, :]</div><div class="line">            pred = self.predict_sample(tr_cls_stats, sample)</div><div class="line">            y_pred.append(pred)</div><div class="line"></div><div class="line">        <span class="keyword">return</span> y_pred</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">predict_sample</span><span class="params">(self, tr_cls_stats, sample)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">            根据训练样本统计参数预测单一样本</div><div class="line">        """</div><div class="line">        cls_probs = self.cal_cls_probs(tr_cls_stats, sample)</div><div class="line"></div><div class="line">        <span class="comment"># 初始化</span></div><div class="line">        best_label = <span class="keyword">None</span></div><div class="line">        best_prob = <span class="number">-1</span></div><div class="line"></div><div class="line">        <span class="keyword">for</span> cls, cls_prob <span class="keyword">in</span> cls_probs.items():</div><div class="line">            <span class="keyword">if</span> best_label <span class="keyword">is</span> <span class="keyword">None</span> <span class="keyword">or</span> cls_prob &gt; best_prob:</div><div class="line">                best_prob = cls_prob</div><div class="line">                best_label = cls</div><div class="line"></div><div class="line">        <span class="keyword">return</span> best_label</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cal_cls_probs</span><span class="params">(self, tr_cls_stats, sample)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">            根据高斯分布及训练集的统计参数返回样本分类的概率</div><div class="line">        """</div><div class="line">        probs = &#123;&#125;</div><div class="line">        <span class="keyword">for</span> cls, cls_stats <span class="keyword">in</span> tr_cls_stats.items():</div><div class="line">            <span class="comment"># 初始化属于cls类的概率</span></div><div class="line">            probs[cls] = <span class="number">1</span></div><div class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(len(cls_stats)):</div><div class="line">                <span class="comment"># 遍历cls类中每个特征维度上的统计参数</span></div><div class="line">                mean, std = cls_stats[i]</div><div class="line">                single_feat_vec = sample[i]</div><div class="line"></div><div class="line">                <span class="comment"># 根据高斯分布的概率密度函数及每个特征维度上的统计参数求联合该概率</span></div><div class="line">                probs[cls] *= scipy.stats.norm.pdf(single_feat_vec, mean, std)</div><div class="line"></div><div class="line">        <span class="keyword">return</span> probs</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">cal_acc</span><span class="params">(true_labels, pred_labels)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">        计算准确率</div><div class="line">    """</div><div class="line">    n_total = len(true_labels)</div><div class="line">    correct_list = [true_labels[i] == pred_labels[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(n_total)]</div><div class="line"></div><div class="line">    acc = sum(correct_list) / n_total</div><div class="line">    <span class="keyword">return</span> acc</div></pre></td></tr></table></figure></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;p&gt;主函数（main.py）&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;
    
    </summary>
    
      <category term="机器学习" scheme="http://yoursite.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="python朴素贝叶斯" scheme="http://yoursite.com/tags/python%E6%9C%B4%E7%B4%A0%E8%B4%9D%E5%8F%B6%E6%96%AF/"/>
    
  </entry>
  
  <entry>
    <title>文本情感分析朴素贝叶斯、SVM、K-mean、逻辑回归</title>
    <link href="http://yoursite.com/2017/06/14/MachineLearning/%E6%96%87%E6%9C%AC%E6%83%85%E6%84%9F%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2017/06/14/MachineLearning/文本情感分析/</id>
    <published>2017-06-14T12:16:39.272Z</published>
    <updated>2017-06-14T16:00:45.874Z</updated>
    
    <content type="html"><![CDATA[<h4 id="逻辑回归"><a href="#逻辑回归" class="headerlink" title="逻辑回归"></a>逻辑回归</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-  </span></div><div class="line"><span class="keyword">import</span> scipy <span class="keyword">as</span> sp  </div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np  </div><div class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</div><div class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> SGDClassifier</div><div class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_files  </div><div class="line"><span class="keyword">from</span> sklearn.cross_validation <span class="keyword">import</span> train_test_split  </div><div class="line"><span class="keyword">from</span> sklearn.feature_extraction.text <span class="keyword">import</span>  TfidfVectorizer  </div><div class="line"><span class="keyword">from</span> sklearn.feature_extraction.text <span class="keyword">import</span>  TfidfTransformer</div><div class="line"><span class="keyword">from</span> sklearn.feature_extraction.text <span class="keyword">import</span> CountVectorizer</div><div class="line"><span class="keyword">from</span> sklearn.naive_bayes <span class="keyword">import</span> MultinomialNB</div><div class="line"><span class="keyword">import</span> jieba</div><div class="line"></div><div class="line"><span class="comment">#数据集的组织方式是，一个文本存放在文件下，标签相同的文件放在同一个文件夹下</span></div><div class="line"><span class="comment">#可以很好的加载这种结构的数据集，数据加载完成后，就可以形成data-target对应的分类。</span></div><div class="line">movie_reviews = load_files(<span class="string">'comment'</span>)</div><div class="line"><span class="comment">#movie_reviews &#123;'target':,'target_names'：,'DESCR':,'filenames':,dtype='&lt;U23)','data':&#125;</span></div><div class="line">print([w.decode(<span class="string">'utf8'</span>) <span class="keyword">for</span> w <span class="keyword">in</span> movie_reviews.data])</div><div class="line">print(movie_reviews.target)</div><div class="line"></div><div class="line">f = open(<span class="string">'stopwords.txt'</span>, <span class="string">'rb'</span>)<span class="comment">#rb</span></div><div class="line">stop_words_raw = f.read()</div><div class="line">f.close()</div><div class="line"></div><div class="line"></div><div class="line">stop_words = stop_words_raw.split()<span class="comment">#stop_words_raw.decode('utf8').strip().split('\n')</span></div><div class="line">print([w.decode(<span class="string">'utf8'</span>) <span class="keyword">for</span> w <span class="keyword">in</span> stop_words])</div><div class="line"><span class="comment"># BOOL型特征下的向量空间模型</span></div><div class="line"><span class="comment">#该类会将文本中的词语转换为词频矩阵，矩阵元素a[i][j] 表示j词在i类文本下的词频</span></div><div class="line">count_vec = CountVectorizer(binary = <span class="keyword">False</span>, decode_error = <span class="string">'ignore'</span>, tokenizer=jieba.cut, stop_words=stop_words)</div><div class="line">x_train_vec = count_vec.fit_transform(movie_reviews.data)<span class="comment">#fit_transform是将文本转为词频矩阵</span></div><div class="line"><span class="comment"># print(count_vec)</span></div><div class="line"><span class="comment"># print(x_train_vec)</span></div><div class="line"><span class="comment">#TF-IDF</span></div><div class="line">tfidf_transformer = TfidfTransformer()</div><div class="line">X_train_tfidf = tfidf_transformer.fit_transform(x_train_vec)</div><div class="line">print(X_train_tfidf)</div><div class="line"><span class="comment"># 构造 LogisticRegression 对象</span></div><div class="line">lr = LogisticRegression()</div><div class="line"></div><div class="line"><span class="comment"># 用基于 tfidf 的特征词表与训练数据的标签来训练模型</span></div><div class="line">lr.fit(X_train_tfidf, movie_reviews.target)</div><div class="line"></div><div class="line"><span class="comment"># 用 Naive Bayes 来进行分类训练和预测</span></div><div class="line"><span class="comment"># MultinomialNB 离散型朴素贝叶斯</span></div><div class="line">clf = MultinomialNB().fit(X_train_tfidf, movie_reviews.target)</div><div class="line"></div><div class="line"><span class="comment"># 构造测试样本</span></div><div class="line">ratings_new = [<span class="string">'电影很好看'</span>,<span class="string">'不好看'</span>,<span class="string">'很不错的电影，太棒了'</span>,<span class="string">'太赞了，很值得看的电影'</span>,<span class="string">'烂'</span>,<span class="string">'好让我失望'</span>,<span class="string">'刘铸澎'</span>]</div><div class="line">X_new_counts = count_vec.transform(ratings_new)</div><div class="line">print(<span class="string">'------------------------------'</span>)</div><div class="line">print(X_new_counts)</div><div class="line">X_new_tfidf = tfidf_transformer.transform(X_new_counts)</div><div class="line">print(X_new_tfidf)</div><div class="line"><span class="comment"># 预测</span></div><div class="line">print(lr.predict(X_new_tfidf))</div><div class="line"><span class="comment">#[0 0 1 1 0 0 1]</span></div><div class="line">print(clf.predict(X_new_tfidf))</div><div class="line"><span class="comment">#[0 0 1 1 0 0 1]</span></div></pre></td></tr></table></figure>
<h4 id="k-mean"><a href="#k-mean" class="headerlink" title="k-mean"></a>k-mean</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-  </span></div><div class="line"><span class="keyword">import</span> scipy <span class="keyword">as</span> sp  </div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np  </div><div class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</div><div class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> SGDClassifier</div><div class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_files  </div><div class="line"><span class="keyword">from</span> sklearn.cross_validation <span class="keyword">import</span> train_test_split  </div><div class="line"><span class="keyword">from</span> sklearn.feature_extraction.text <span class="keyword">import</span>  TfidfVectorizer  </div><div class="line"><span class="keyword">from</span> sklearn.feature_extraction.text <span class="keyword">import</span>  TfidfTransformer</div><div class="line"><span class="keyword">from</span> sklearn.feature_extraction.text <span class="keyword">import</span> CountVectorizer</div><div class="line"><span class="keyword">from</span> sklearn.cluster <span class="keyword">import</span> KMeans</div><div class="line"><span class="keyword">import</span> jieba</div><div class="line">  </div><div class="line">movie_reviews = load_files(<span class="string">'comment'</span>)</div><div class="line"></div><div class="line">f = open(<span class="string">'stopwords.txt'</span>, <span class="string">'rb'</span>)</div><div class="line">stop_words_raw = f.read()</div><div class="line">f.close()</div><div class="line"></div><div class="line">stop_words = stop_words_raw.split()<span class="comment">#'\n'</span></div><div class="line"></div><div class="line"><span class="comment"># BOOL型特征下的向量空间模型</span></div><div class="line">count_vec = CountVectorizer(binary = <span class="keyword">False</span>, decode_error = <span class="string">'ignore'</span>, tokenizer=jieba.cut, stop_words=stop_words)  </div><div class="line">x_train_vec = count_vec.fit_transform(movie_reviews.data)</div><div class="line"></div><div class="line">tfidf_transformer = TfidfTransformer()</div><div class="line">X_train_tfidf = tfidf_transformer.fit_transform(x_train_vec)</div><div class="line"></div><div class="line"><span class="comment"># 构造 LogisticRegression 对象</span></div><div class="line">kmeans = KMeans(<span class="number">2</span>).fit(X_train_tfidf)</div><div class="line">labels = kmeans.predict(X_train_tfidf)</div><div class="line"></div><div class="line">print(labels)</div><div class="line">print(movie_reviews.target)</div></pre></td></tr></table></figure>
<h4 id="svm"><a href="#svm" class="headerlink" title="svm"></a>svm</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-  </span></div><div class="line"><span class="keyword">import</span> scipy <span class="keyword">as</span> sp  </div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np  </div><div class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</div><div class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> SGDClassifier</div><div class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_files  </div><div class="line"><span class="keyword">from</span> sklearn.cross_validation <span class="keyword">import</span> train_test_split  </div><div class="line"><span class="keyword">from</span> sklearn.feature_extraction.text <span class="keyword">import</span>  TfidfVectorizer  </div><div class="line"><span class="keyword">from</span> sklearn.feature_extraction.text <span class="keyword">import</span>  TfidfTransformer</div><div class="line"><span class="keyword">from</span> sklearn.feature_extraction.text <span class="keyword">import</span> CountVectorizer</div><div class="line"><span class="keyword">from</span> sklearn.naive_bayes <span class="keyword">import</span> MultinomialNB</div><div class="line"><span class="keyword">from</span> sklearn.svm <span class="keyword">import</span> SVC</div><div class="line"><span class="keyword">import</span> jieba</div><div class="line">  </div><div class="line">movie_reviews = load_files(<span class="string">'comment'</span>)</div><div class="line"></div><div class="line">f = open(<span class="string">'stopwords.txt'</span>, <span class="string">'rb'</span>)</div><div class="line">stop_words_raw = f.read()</div><div class="line">f.close()</div><div class="line"></div><div class="line">stop_words = stop_words_raw.split()<span class="comment">#'\n'</span></div><div class="line"></div><div class="line"><span class="comment"># BOOL型特征下的向量空间模型</span></div><div class="line">count_vec = CountVectorizer(binary = <span class="keyword">False</span>, decode_error = <span class="string">'ignore'</span>, tokenizer=jieba.cut, stop_words=stop_words)  </div><div class="line">x_train_vec = count_vec.fit_transform(movie_reviews.data)</div><div class="line"></div><div class="line">tfidf_transformer = TfidfTransformer()</div><div class="line">X_train_tfidf = tfidf_transformer.fit_transform(x_train_vec)</div><div class="line"></div><div class="line"><span class="comment"># 构造 Linear Kernel 的 SVC</span></div><div class="line">linear_svc = SVC(kernel=<span class="string">'linear'</span>)</div><div class="line"><span class="comment"># 构造 rbf 的 SVC，rbf 是默认kernel，因此等价于 SVN()</span></div><div class="line">rbf_svc = SVC(kernel=<span class="string">'rbf'</span>)</div><div class="line"><span class="comment"># 构造 sigmoid 的 SVC</span></div><div class="line">sigmoid_svc = SVC(kernel=<span class="string">'sigmoid'</span>)</div><div class="line"><span class="comment"># 构造 poly 的 SVC</span></div><div class="line">poly_svc = SVC(kernel=<span class="string">'poly'</span>)</div><div class="line"></div><div class="line"><span class="comment"># 用基于 tfidf 的特征词表与训练数据的标签来训练模型</span></div><div class="line">linear_svc.fit(X_train_tfidf, movie_reviews.target)</div><div class="line">rbf_svc.fit(X_train_tfidf, movie_reviews.target)</div><div class="line">sigmoid_svc.fit(X_train_tfidf, movie_reviews.target)</div><div class="line">poly_svc.fit(X_train_tfidf, movie_reviews.target)</div><div class="line"></div><div class="line"><span class="comment"># 构造测试样本</span></div><div class="line">ratings_new = [<span class="string">'电影很好看'</span>,<span class="string">'不好看'</span>,<span class="string">'很不错的电影，太棒了'</span>,<span class="string">'太赞了，很值得看的电影'</span>,<span class="string">'烂'</span>,<span class="string">'好让我失望'</span>]</div><div class="line">X_new_counts = count_vec.transform(ratings_new)</div><div class="line">X_new_tfidf = tfidf_transformer.transform(X_new_counts)</div><div class="line"></div><div class="line"><span class="comment"># 预测</span></div><div class="line">print(linear_svc.predict(X_new_tfidf))</div><div class="line"></div><div class="line">print(rbf_svc.predict(X_new_tfidf))</div><div class="line"></div><div class="line">print(sigmoid_svc.predict(X_new_tfidf))</div><div class="line"></div><div class="line">print(poly_svc.predict(X_new_tfidf))</div></pre></td></tr></table></figure>
<h4 id="jieba分词"><a href="#jieba分词" class="headerlink" title="jieba分词"></a>jieba分词</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> jieba</div><div class="line"></div><div class="line">text = <span class="string">'分布式爬虫是包含了分布式存储、任务管理、分布式数据库和爬虫进程的一套数据抓取系统'</span></div><div class="line"></div><div class="line">words = list(jieba.cut(text))</div><div class="line"></div><div class="line">print(<span class="string">','</span>.join(words))</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">分布式,爬虫,是,包含,了,分布式,存储,、,任务,管理,、,分布式,数据库,和,爬虫,进程,的,一套,数据,抓取,系统</div></pre></td></tr></table></figure>
<h4 id="特征值"><a href="#特征值" class="headerlink" title="特征值"></a>特征值</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-  </span></div><div class="line"><span class="keyword">import</span> scipy <span class="keyword">as</span> sp  </div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np  </div><div class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_files  </div><div class="line"><span class="keyword">from</span> sklearn.cross_validation <span class="keyword">import</span> train_test_split  </div><div class="line"><span class="keyword">from</span> sklearn.feature_extraction.text <span class="keyword">import</span>  TfidfVectorizer  </div><div class="line"><span class="keyword">import</span> jieba</div><div class="line">  </div><div class="line"><span class="comment"># 加载数据集，切分数据集70%训练，30%测试</span></div><div class="line">movie_reviews = load_files(<span class="string">'comment'</span>)</div><div class="line">doc_terms_train, doc_terms_test, y_train, y_test = train_test_split(movie_reviews.data, movie_reviews.target, test_size = <span class="number">0.3</span>)  </div><div class="line"></div><div class="line">f = open(<span class="string">'stopwords.txt'</span>, <span class="string">'rb'</span>)</div><div class="line">stop_words_raw = f.read()</div><div class="line">f.close()</div><div class="line"></div><div class="line">stop_words = stop_words_raw.split()</div><div class="line"></div><div class="line"><span class="comment"># BOOL型特征下的向量空间模型</span></div><div class="line">count_vec = TfidfVectorizer(binary = <span class="keyword">False</span>, decode_error = <span class="string">'ignore'</span>, tokenizer=jieba.cut, stop_words=stop_words)  </div><div class="line">x_train = count_vec.fit_transform(doc_terms_train)  </div><div class="line">x_test  = count_vec.transform(doc_terms_test)  </div><div class="line">x       = count_vec.transform(movie_reviews.data)  </div><div class="line">y       = movie_reviews.target</div><div class="line"><span class="comment"># print doc_terms_train</span></div><div class="line">print(count_vec.get_feature_names())</div><div class="line">print(x_train.toarray())</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div></pre></td><td class="code"><pre><div class="line">[&apos;vs&apos;, &apos;。&apos;, &apos;上映&apos;, &apos;不&apos;, &apos;不好&apos;, &apos;不错&apos;, &apos;久&apos;, &apos;了&apos;, &apos;人&apos;, &apos;值得&apos;, &apos;叙事&apos;, &apos;呢&apos;, &apos;喜欢&apos;, &apos;垃圾&apos;, &apos;大爱&apos;, &apos;太&apos;,</div><div class="line"> &apos;太赞&apos;, &apos;失望&apos;, &apos;好&apos;, &apos;好久&apos;, &apos;好看&apos;, &apos;完全&apos;, &apos;尊重&apos;, &apos;差&apos;, &apos;很&apos;, &apos;性&apos;,&apos;情节&apos;, &apos;我&apos;, &apos;暗示&apos;, &apos;更为&apos;, &apos;最&apos;, </div><div class="line"> &apos;没有&apos;, &apos;混乱&apos;, &apos;演技&apos;, &apos;烂&apos;, &apos;烂片&apos;, &apos;爱马&apos;, &apos;特&apos;, &apos;电影&apos;, &apos;的&apos;, &apos;看&apos;, &apos;看不懂&apos;, &apos;等&apos;, &apos;简单&apos;, &apos;终于&apos;, &apos;美女&apos;,</div><div class="line">  &apos;自然&apos;, &apos;让&apos;, &apos;超&apos;, &apos;超级&apos;, &apos;达蒙&apos;, &apos;这种&apos;, &apos;这部&apos;, &apos;野兽&apos;, &apos;，&apos;]</div><div class="line">[[ 0.          0.          0.          0.          0.          1.          0.</div><div class="line">   0.          0.          0.          0.          0.          0.          0.</div><div class="line">   0.          0.          0.          0.          0.          0.          0.</div><div class="line">   0.          0.          0.          0.          0.          0.          0.</div><div class="line">   0.          0.          0.          0.          0.          0.          0.</div><div class="line">   0.          0.          0.          0.          0.          0.          0.</div><div class="line">   0.          0.          0.          0.          0.          0.          0.</div><div class="line">   0.          0.          0.          0.          0.          0.        ]</div><div class="line"> [ 0.          0.          0.          0.          0.          0.43453376</div><div class="line">   0.          0.          0.          0.56426138  0.          0.          0.</div><div class="line">   0.          0.          0.          0.          0.          0.          0.</div><div class="line">   0.          0.          0.          0.          0.          0.          0.</div><div class="line">   0.          0.          0.          0.          0.          0.          0.</div><div class="line">   0.          0.          0.          0.          0.35864797  0.</div><div class="line">   0.56426138  0.          0.          0.          0.          0.          0.</div><div class="line">   0.          0.          0.          0.          0.          0.          0.</div><div class="line">   0.21393977]</div><div class="line"> [ 0.          0.          0.          0.          0.          0.          0.</div><div class="line">   0.          0.3520751   0.          0.3520751   0.          0.          0.</div><div class="line">   0.          0.          0.          0.27113058  0.          0.          0.</div><div class="line">   0.          0.          0.          0.22378108  0.          0.30472559</div><div class="line">   0.          0.          0.          0.          0.          0.3520751</div><div class="line">   0.          0.          0.          0.          0.          0.22378108</div><div class="line">   0.27113058  0.          0.          0.          0.3520751   0.          0.</div><div class="line">   0.          0.30472559  0.          0.          0.          0.          0.</div><div class="line">   0.          0.26697863]</div><div class="line"> [ 0.          0.          0.          0.          0.          0.          0.</div><div class="line">   0.          0.          0.          0.          0.          0.          0.</div><div class="line">   0.          0.          0.          0.          0.          0.</div><div class="line">   0.30302578  0.          0.          0.          0.27669975  0.          0.</div><div class="line">   0.          0.          0.          0.          0.          0.          0.</div><div class="line">   0.          0.          0.37678563  0.37678563  0.27669975  0.33524623</div><div class="line">   0.          0.          0.          0.          0.          0.          0.</div><div class="line">   0.          0.43533212  0.          0.37678563  0.          0.          0.</div><div class="line">   0.16505622]</div><div class="line"> [ 0.          0.          0.          0.          0.          0.          0.</div><div class="line">   0.          0.          0.          0.          0.          0.</div><div class="line">   0.57109203  0.          0.          0.          0.          0.          0.</div><div class="line">   0.          0.          0.          0.          0.          0.          0.</div><div class="line">   0.          0.          0.          0.          0.          0.          0.</div><div class="line">   0.          0.65983064  0.          0.          0.41939237  0.          0.</div><div class="line">   0.          0.          0.          0.          0.          0.          0.</div><div class="line">   0.          0.          0.          0.          0.          0.</div><div class="line">   0.25017487]</div><div class="line"> [ 0.          0.          0.          0.45284409  0.          0.          0.</div><div class="line">   0.40932132  0.          0.          0.          0.          0.          0.</div><div class="line">   0.          0.45284409  0.          0.45284409  0.          0.</div><div class="line">   0.40932132  0.          0.          0.          0.          0.          0.</div><div class="line">   0.          0.          0.          0.          0.          0.          0.</div><div class="line">   0.          0.          0.          0.          0.          0.          0.</div><div class="line">   0.          0.          0.          0.          0.          0.          0.</div><div class="line">   0.          0.          0.          0.          0.          0.</div><div class="line">   0.22295473]</div><div class="line"> [ 0.          0.          0.          0.          0.          0.          0.</div><div class="line">   0.3579589   0.          0.          0.          0.          0.          0.</div><div class="line">   0.          0.          0.51424999  0.          0.51424999  0.          0.</div><div class="line">   0.          0.          0.          0.32686043  0.          0.          0.</div><div class="line">   0.          0.          0.          0.          0.          0.44509008</div><div class="line">   0.          0.          0.          0.          0.          0.          0.</div><div class="line">   0.          0.          0.          0.          0.          0.          0.</div><div class="line">   0.          0.          0.          0.          0.          0.</div><div class="line">   0.19497795]</div><div class="line"> [ 0.          0.          0.          0.28676293  0.3723744   0.          0.</div><div class="line">   0.          0.          0.          0.          0.          0.          0.</div><div class="line">   0.          0.28676293  0.          0.          0.          0.</div><div class="line">   0.2592022   0.          0.          0.3723744   0.          0.</div><div class="line">   0.3222949   0.          0.          0.          0.          0.          0.</div><div class="line">   0.3222949   0.3222949   0.          0.          0.          0.          0.</div><div class="line">   0.          0.          0.          0.          0.          0.          0.</div><div class="line">   0.          0.          0.          0.          0.          0.          0.</div><div class="line">   0.42355739]</div><div class="line"> [ 0.          0.          0.          0.          0.          0.          0.</div><div class="line">   0.          0.          0.          0.          0.          0.          0.</div><div class="line">   0.          0.          0.          0.          0.          0.          0.</div><div class="line">   0.50683335  0.          0.          0.          0.          0.          0.</div><div class="line">   0.          0.          0.          0.          0.          0.</div><div class="line">   0.43867088  0.          0.          0.          0.          0.          0.</div><div class="line">   0.50683335  0.          0.          0.          0.          0.          0.</div><div class="line">   0.          0.50683335  0.          0.          0.          0.</div><div class="line">   0.19216592]</div><div class="line"> [ 0.          0.          0.27400222  0.          0.          0.          0.</div><div class="line">   0.38145467  0.          0.          0.          0.          0.          0.</div><div class="line">   0.          0.          0.          0.2110072   0.          0.27400222</div><div class="line">   0.          0.          0.          0.          0.          0.          0.</div><div class="line">   0.27400222  0.          0.          0.27400222  0.23715249  0.          0.</div><div class="line">   0.          0.          0.23715249  0.23715249  0.          0.          0.</div><div class="line">   0.          0.23715249  0.          0.27400222  0.          0.</div><div class="line">   0.23715249  0.          0.          0.23715249  0.          0.          0.</div><div class="line">   0.31166392]</div><div class="line"> [ 0.          0.          0.          0.          0.          0.</div><div class="line">   0.43706187  0.60845964  0.          0.          0.          0.          0.</div><div class="line">   0.          0.43706187  0.          0.          0.          0.          0.</div><div class="line">   0.          0.          0.          0.          0.27779919  0.          0.</div><div class="line">   0.          0.          0.          0.          0.          0.          0.</div><div class="line">   0.          0.          0.          0.          0.          0.          0.</div><div class="line">   0.          0.37828275  0.          0.          0.          0.          0.</div><div class="line">   0.          0.          0.          0.          0.          0.</div><div class="line">   0.16571206]</div><div class="line"> [ 0.          0.          0.          0.40811873  0.          0.          0.</div><div class="line">   0.          0.          0.          0.          0.          0.</div><div class="line">   0.45868754  0.          0.40811873  0.          0.          0.          0.</div><div class="line">   0.36889451  0.          0.          0.          0.          0.          0.</div><div class="line">   0.          0.          0.          0.          0.          0.          0.</div><div class="line">   0.          0.          0.          0.          0.33684599  0.40811873</div><div class="line">   0.          0.          0.          0.          0.          0.          0.</div><div class="line">   0.          0.          0.          0.          0.          0.          0.</div><div class="line">   0.20093451]</div><div class="line"> [ 0.          0.          0.          0.          0.          0.54494164</div><div class="line">   0.          0.          0.          0.          0.          0.70763091</div><div class="line">   0.          0.          0.          0.          0.          0.          0.</div><div class="line">   0.          0.          0.          0.          0.          0.44977452</div><div class="line">   0.          0.          0.          0.          0.          0.          0.</div><div class="line">   0.          0.          0.          0.          0.          0.          0.</div><div class="line">   0.          0.          0.          0.          0.          0.          0.</div><div class="line">   0.          0.          0.          0.          0.          0.          0.</div><div class="line">   0.          0.        ]</div><div class="line"> [ 0.2508412   0.5016824   0.          0.          0.          0.          0.</div><div class="line">   0.          0.          0.          0.          0.          0.2508412</div><div class="line">   0.          0.          0.          0.          0.          0.          0.</div><div class="line">   0.          0.          0.2508412   0.          0.          0.2508412</div><div class="line">   0.          0.          0.2508412   0.2508412   0.          0.21710633</div><div class="line">   0.          0.          0.          0.          0.          0.          0.</div><div class="line">   0.          0.          0.          0.          0.          0.</div><div class="line">   0.2508412   0.2508412   0.          0.          0.          0.</div><div class="line">   0.2508412   0.2508412   0.2508412   0.09510647]]</div></pre></td></tr></table></figure>
<h3 id="朴素贝叶斯"><a href="#朴素贝叶斯" class="headerlink" title="朴素贝叶斯"></a>朴素贝叶斯</h3><ul>
<li><p>main.py</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line"><span class="keyword">import</span> nltk</div><div class="line"><span class="keyword">from</span> tools <span class="keyword">import</span> proc_text, split_train_test, get_word_list_from_data, extract_feat_from_data, cal_acc</div><div class="line"><span class="keyword">from</span> nltk.text <span class="keyword">import</span> TextCollection</div><div class="line"><span class="keyword">from</span> sklearn.naive_bayes <span class="keyword">import</span> GaussianNB</div><div class="line"></div><div class="line">dataset_path = <span class="string">'./dataset'</span></div><div class="line">text_filenames = [<span class="string">'0_simplifyweibo.txt'</span>, <span class="string">'1_simplifyweibo.txt'</span>,</div><div class="line">                  <span class="string">'2_simplifyweibo.txt'</span>, <span class="string">'3_simplifyweibo.txt'</span>]</div><div class="line"><span class="comment">#text_filenames = ['0_test.txt','1_test.txt','2_test.txt','3_test.txt']</span></div><div class="line"><span class="comment"># 原始数据的csv文件</span></div><div class="line">output_text_filename = <span class="string">'raw_weibo_text.csv'</span></div><div class="line"></div><div class="line"><span class="comment"># 清洗好的文本数据文件</span></div><div class="line">output_cln_text_filename = <span class="string">'clean_weibo_text.csv'</span></div><div class="line"></div><div class="line"><span class="comment"># 处理和清洗文本数据的时间较长，通过设置is_first_run进行配置</span></div><div class="line"><span class="comment"># 如果是第一次运行需要对原始文本数据进行处理和清洗，需要设为True</span></div><div class="line"><span class="comment"># 如果之前已经处理了文本数据，并已经保存了清洗好的文本数据，设为False即可</span></div><div class="line">is_first_run = <span class="keyword">False</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_and_save_to_csv</span><span class="params">()</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">        读取原始文本数据，将标签和文本数据保存成csv</div><div class="line">    """</div><div class="line"></div><div class="line">    text_w_label_df_lst = []</div><div class="line">    <span class="keyword">for</span> text_filename <span class="keyword">in</span> text_filenames:</div><div class="line">        text_file = os.path.join(dataset_path, text_filename)</div><div class="line"></div><div class="line">        <span class="comment"># 获取标签，即0, 1, 2, 3</span></div><div class="line">        label = int(text_filename[<span class="number">0</span>])</div><div class="line"></div><div class="line">        <span class="comment"># 读取文本文件</span></div><div class="line">        <span class="keyword">with</span> open(text_file, <span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</div><div class="line">            lines = f.read().splitlines()</div><div class="line"></div><div class="line">        labels = [label] * len(lines)</div><div class="line"></div><div class="line">        text_series = pd.Series(lines)</div><div class="line">        label_series = pd.Series(labels)</div><div class="line"></div><div class="line">        <span class="comment"># 构造dataframe</span></div><div class="line">        text_w_label_df = pd.concat([label_series, text_series], axis=<span class="number">1</span>)</div><div class="line">        text_w_label_df_lst.append(text_w_label_df)</div><div class="line"></div><div class="line">    result_df = pd.concat(text_w_label_df_lst, axis=<span class="number">0</span>)</div><div class="line"></div><div class="line">    <span class="comment"># 保存成csv文件</span></div><div class="line">    result_df.columns = [<span class="string">'label'</span>, <span class="string">'text'</span>]</div><div class="line">    result_df.to_csv(os.path.join(dataset_path, output_text_filename),</div><div class="line">                     index=<span class="keyword">None</span>, encoding=<span class="string">'utf-8'</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_main</span><span class="params">()</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">        主函数</div><div class="line">    """</div><div class="line">    <span class="comment"># 1. 数据读取，处理，清洗，准备</span></div><div class="line">    <span class="keyword">if</span> is_first_run:</div><div class="line">        print(<span class="string">'处理清洗文本数据中...'</span>, end=<span class="string">' '</span>)</div><div class="line">        <span class="comment"># 如果是第一次运行需要对原始文本数据进行处理和清洗</span></div><div class="line"></div><div class="line">        <span class="comment"># 读取原始文本数据，将标签和文本数据保存成csv</span></div><div class="line">        read_and_save_to_csv()</div><div class="line"></div><div class="line">        <span class="comment"># 读取处理好的csv文件，构造数据集</span></div><div class="line">        text_df = pd.read_csv(os.path.join(dataset_path, output_text_filename),</div><div class="line">                              encoding=<span class="string">'utf-8'</span>)</div><div class="line"></div><div class="line">        <span class="comment"># 处理文本数据</span></div><div class="line">        text_df[<span class="string">'text'</span>] = text_df[<span class="string">'text'</span>].apply(proc_text)</div><div class="line"></div><div class="line">        <span class="comment"># 过滤空字符串</span></div><div class="line">        text_df = text_df[text_df[<span class="string">'text'</span>] != <span class="string">''</span>]</div><div class="line"></div><div class="line">        <span class="comment"># 保存处理好的文本数据</span></div><div class="line">        text_df.to_csv(os.path.join(dataset_path, output_cln_text_filename),</div><div class="line">                       index=<span class="keyword">None</span>, encoding=<span class="string">'utf-8'</span>)</div><div class="line">        print(<span class="string">'完成，并保存结果。'</span>)</div><div class="line">   </div><div class="line">    <span class="comment"># 2. 分割训练集、测试集</span></div><div class="line">    print(<span class="string">'加载处理好的文本数据'</span>)</div><div class="line">    clean_text_df = pd.read_csv(os.path.join(dataset_path, output_cln_text_filename),</div><div class="line">                                encoding=<span class="string">'utf-8'</span>)</div><div class="line">    <span class="comment"># 分割训练集和测试集</span></div><div class="line">    train_text_df, test_text_df = split_train_test(clean_text_df)</div><div class="line">    <span class="comment"># 查看训练集测试集基本信息</span></div><div class="line">    print(<span class="string">'训练集中各类的数据个数：'</span>, train_text_df.groupby(<span class="string">'label'</span>).size())</div><div class="line">    print(<span class="string">'测试集中各类的数据个数：'</span>, test_text_df.groupby(<span class="string">'label'</span>).size())</div><div class="line"></div><div class="line">    <span class="comment"># 3. 取</span></div><div class="line">    <span class="comment"># 计算词频</span></div><div class="line">    n_common_words = <span class="number">200</span></div><div class="line"></div><div class="line">    <span class="comment"># 将训练集中的单词拿出来统计词频</span></div><div class="line">    print(<span class="string">'统计词频...'</span>)</div><div class="line">    all_words_in_train = get_word_list_from_data(train_text_df)</div><div class="line">    fdisk = nltk.FreqDist(all_words_in_train)</div><div class="line">    common_words_freqs = fdisk.most_common(n_common_words)</div><div class="line">    print(<span class="string">'出现最多的&#123;&#125;个词是：'</span>.format(n_common_words))</div><div class="line">    <span class="keyword">for</span> word, count <span class="keyword">in</span> common_words_freqs:</div><div class="line">        print(<span class="string">'&#123;&#125;: &#123;&#125;次'</span>.format(word, count))</div><div class="line">    print()</div><div class="line"></div><div class="line">    <span class="comment"># 在训练集上提取特征</span></div><div class="line">    text_collection = TextCollection(train_text_df[<span class="string">'text'</span>].values.tolist())</div><div class="line">    print(<span class="string">'训练样本提取特征...'</span>, end=<span class="string">' '</span>)</div><div class="line">    train_X, train_y = extract_feat_from_data(train_text_df, text_collection, common_words_freqs)</div><div class="line">    print(<span class="string">'完成'</span>)</div><div class="line">    print()</div><div class="line"></div><div class="line">    print(<span class="string">'测试样本提取特征...'</span>, end=<span class="string">' '</span>)</div><div class="line">    test_X, test_y = extract_feat_from_data(test_text_df, text_collection, common_words_freqs)</div><div class="line">    print(<span class="string">'完成'</span>)</div><div class="line"></div><div class="line">    <span class="comment"># 4. 训练模型Naive Bayes</span></div><div class="line">    print(<span class="string">'训练模型...'</span>, end=<span class="string">' '</span>)</div><div class="line">    gnb = GaussianNB()</div><div class="line">    gnb.fit(train_X, train_y)</div><div class="line">    print(<span class="string">'完成'</span>)</div><div class="line">    print()</div><div class="line"></div><div class="line">    <span class="comment"># 5. 预测</span></div><div class="line">    print(<span class="string">'测试模型...'</span>, end=<span class="string">' '</span>)</div><div class="line">    test_pred = gnb.predict(test_X)</div><div class="line">    print(<span class="string">'完成'</span>)</div><div class="line"></div><div class="line">    <span class="comment"># 输出准确率</span></div><div class="line">    print(<span class="string">'准确率：'</span>, cal_acc(test_y, test_pred))</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    run_main()</div></pre></td></tr></table></figure>
</li>
<li><p>tools.py</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="keyword">import</span> jieba.posseg <span class="keyword">as</span> pseg</div><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line"><span class="keyword">import</span> math</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"></div><div class="line"><span class="comment"># 加载常用停用词</span></div><div class="line">stopwords1 = [line.rstrip() <span class="keyword">for</span> line <span class="keyword">in</span> open(<span class="string">'./中文停用词库.txt'</span>, <span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>)]</div><div class="line">stopwords2 = [line.rstrip() <span class="keyword">for</span> line <span class="keyword">in</span> open(<span class="string">'./哈工大停用词表.txt'</span>, <span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>)]</div><div class="line">stopwords3 = [line.rstrip() <span class="keyword">for</span> line <span class="keyword">in</span> open(<span class="string">'./四川大学机器智能实验室停用词库.txt'</span>, <span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>)]</div><div class="line"><span class="comment">#stopwords = stopwords1 + stopwords2 + stopwords3</span></div><div class="line">stopwords = stopwords1</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">proc_text</span><span class="params">(raw_line)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">        处理每行的文本数据</div><div class="line">        返回分词结果</div><div class="line">    """</div><div class="line">    <span class="comment"># 1. 使用正则表达式去除非中文字符</span></div><div class="line">    filter_pattern = re.compile(<span class="string">'[^\u4E00-\u9FD5]+'</span>)</div><div class="line">    chinese_only = filter_pattern.sub(<span class="string">''</span>, raw_line)</div><div class="line"></div><div class="line">    <span class="comment"># 2. 结巴分词+词性标注</span></div><div class="line">    words_lst = pseg.cut(chinese_only)</div><div class="line"></div><div class="line">    <span class="comment"># 3. 去除停用词</span></div><div class="line">    meaninful_words = []</div><div class="line">    <span class="keyword">for</span> word, flag <span class="keyword">in</span> words_lst:</div><div class="line">        <span class="comment"># if (word not in stopwords) and (flag == 'v'):</span></div><div class="line">            <span class="comment"># 也可根据词性去除非动词等</span></div><div class="line">        <span class="keyword">if</span> word <span class="keyword">not</span> <span class="keyword">in</span> stopwords:</div><div class="line">            meaninful_words.append(word)</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="string">' '</span>.join(meaninful_words)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">split_train_test</span><span class="params">(text_df, size=<span class="number">0.8</span>)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">        分割训练集和测试集</div><div class="line">    """</div><div class="line">    <span class="comment"># 为保证每个类中的数据能在训练集中和测试集中的比例相同，所以需要依次对每个类进行处理</span></div><div class="line">    train_text_df = pd.DataFrame()</div><div class="line">    test_text_df = pd.DataFrame()</div><div class="line"></div><div class="line">    labels = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line">    <span class="keyword">for</span> label <span class="keyword">in</span> labels:</div><div class="line">        <span class="comment"># 找出label的记录</span></div><div class="line">        text_df_w_label = text_df[text_df[<span class="string">'label'</span>] == label]</div><div class="line">        <span class="comment"># 重新设置索引，保证每个类的记录是从0开始索引，方便之后的拆分</span></div><div class="line">        text_df_w_label = text_df_w_label.reset_index()</div><div class="line"></div><div class="line">        <span class="comment"># 默认按80%训练集，20%测试集分割</span></div><div class="line">        <span class="comment"># 这里为了简化操作，取前80%放到训练集中，后20%放到测试集中</span></div><div class="line">        <span class="comment"># 当然也可以随机拆分80%，20%（尝试实现下DataFrame中的随机拆分）</span></div><div class="line"></div><div class="line">        <span class="comment"># 该类数据的行数</span></div><div class="line">        n_lines = text_df_w_label.shape[<span class="number">0</span>]</div><div class="line">        split_line_no = math.floor(n_lines * size)</div><div class="line">        text_df_w_label_train = text_df_w_label.iloc[:split_line_no, :]</div><div class="line">        text_df_w_label_test = text_df_w_label.iloc[split_line_no:, :]</div><div class="line"></div><div class="line">        <span class="comment"># 放入整体训练集，测试集中</span></div><div class="line">        train_text_df = train_text_df.append(text_df_w_label_train)</div><div class="line">        test_text_df = test_text_df.append(text_df_w_label_test)</div><div class="line"></div><div class="line">    train_text_df = train_text_df.reset_index()</div><div class="line">    test_text_df = test_text_df.reset_index()</div><div class="line">    <span class="keyword">return</span> train_text_df, test_text_df</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_word_list_from_data</span><span class="params">(text_df)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">        将数据集中的单词放入到一个列表中</div><div class="line">    """</div><div class="line">    word_list = []</div><div class="line">    <span class="keyword">for</span> _, r_data <span class="keyword">in</span> text_df.iterrows():</div><div class="line">        word_list += r_data[<span class="string">'text'</span>].split(<span class="string">' '</span>)</div><div class="line">    <span class="keyword">return</span> word_list</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">extract_feat_from_data</span><span class="params">(text_df, text_collection, common_words_freqs)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">        特征提取</div><div class="line">    """</div><div class="line">    <span class="comment"># 这里只选择TF-IDF特征作为例子</span></div><div class="line">    <span class="comment"># 可考虑使用词频或其他文本特征作为额外的特征</span></div><div class="line"></div><div class="line">    n_sample = text_df.shape[<span class="number">0</span>]</div><div class="line">    n_feat = len(common_words_freqs)</div><div class="line">    common_words = [word <span class="keyword">for</span> word, _ <span class="keyword">in</span> common_words_freqs]</div><div class="line"></div><div class="line">    <span class="comment"># 初始化</span></div><div class="line">    X = np.zeros([n_sample, n_feat])</div><div class="line">    y = np.zeros(n_sample)</div><div class="line"></div><div class="line">    print(<span class="string">'提取特征...'</span>)</div><div class="line">    <span class="keyword">for</span> i, r_data <span class="keyword">in</span> text_df.iterrows():</div><div class="line">        <span class="keyword">if</span> (i + <span class="number">1</span>) % <span class="number">5000</span> == <span class="number">0</span>:</div><div class="line">            print(<span class="string">'已完成&#123;&#125;个样本的特征提取'</span>.format(i + <span class="number">1</span>))</div><div class="line"></div><div class="line">        text = r_data[<span class="string">'text'</span>]</div><div class="line">        feat_vec = []</div><div class="line">        <span class="keyword">for</span> word <span class="keyword">in</span> common_words:</div><div class="line">            <span class="keyword">if</span> word <span class="keyword">in</span> text:</div><div class="line">                <span class="comment"># 如果在高频词中，计算TF-IDF值</span></div><div class="line">                tf_idf_val = text_collection.tf_idf(word, text)</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                tf_idf_val = <span class="number">0</span></div><div class="line"></div><div class="line">            feat_vec.append(tf_idf_val)</div><div class="line"></div><div class="line">        <span class="comment"># 赋值</span></div><div class="line">        X[i, :] = np.array(feat_vec)</div><div class="line">        y[i] = int(r_data[<span class="string">'label'</span>])</div><div class="line"></div><div class="line">    <span class="keyword">return</span> X, y</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">cal_acc</span><span class="params">(true_labels, pred_labels)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">        计算准确率</div><div class="line">    """</div><div class="line">    n_total = len(true_labels)</div><div class="line">    correct_list = [true_labels[i] == pred_labels[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(n_total)]</div><div class="line"></div><div class="line">    acc = sum(correct_list) / n_total</div><div class="line">    <span class="keyword">return</span> acc</div></pre></td></tr></table></figure></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;逻辑回归&quot;&gt;&lt;a href=&quot;#逻辑回归&quot; class=&quot;headerlink&quot; title=&quot;逻辑回归&quot;&gt;&lt;/a&gt;逻辑回归&lt;/h4&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;p
    
    </summary>
    
      <category term="机器学习" scheme="http://yoursite.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="K-means" scheme="http://yoursite.com/tags/K-means/"/>
    
      <category term="SVM" scheme="http://yoursite.com/tags/SVM/"/>
    
      <category term="朴素贝叶斯" scheme="http://yoursite.com/tags/%E6%9C%B4%E7%B4%A0%E8%B4%9D%E5%8F%B6%E6%96%AF/"/>
    
      <category term="逻辑回归" scheme="http://yoursite.com/tags/%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>最邻近规则分类(K-Nearest Neighbor)KNN算法</title>
    <link href="http://yoursite.com/2017/06/13/MachineLearning/(K-Nearest%20Neighbor)KNN/"/>
    <id>http://yoursite.com/2017/06/13/MachineLearning/(K-Nearest Neighbor)KNN/</id>
    <published>2017-06-13T12:47:55.548Z</published>
    <updated>2017-06-13T13:01:40.111Z</updated>
    
    <content type="html"><![CDATA[<h3 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h3><pre><code>- Cover和Hart在1968年提出了最初的邻近算法
- 分类(classification)算法
- 输入基于实例的学习(instance-based learning), 懒惰学习(lazy learning)
</code></pre><h3 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h3><p>  <img src="http://i.imgur.com/i0UK8Q6.png" alt=""></p>
<ul>
<li>未知电影属于什么类型？<br><img src="http://i.imgur.com/eNELLCC.png" alt=""><br><img src="http://i.imgur.com/eNELLCC.png" alt=""></li>
</ul>
<h3 id="算法详述"><a href="#算法详述" class="headerlink" title="算法详述"></a>算法详述</h3><h4 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h4><ul>
<li>为了判断未知实例的类别，以所有已知类别的实例作为参照</li>
<li>选择参数K</li>
<li>计算未知实例与所有已知实例的距离</li>
<li>选择最近K个已知实例</li>
<li>根据少数服从多数的投票法则(majority-voting)，让未知实例归类为K个最邻近样本中最多数的类别</li>
</ul>
<h4 id="细节"><a href="#细节" class="headerlink" title="细节:"></a>细节:</h4><ul>
<li>关于K</li>
<li><p>关于距离的衡量方法:</p>
<ul>
<li><p>Euclidean Distance 定义</p>
<p><img src="http://i.imgur.com/vL5FdAy.jpg" alt=""><img src="http://i.imgur.com/6JVfVjS.png" alt=""></p>
</li>
</ul>
</li>
<li><p>其他距离衡量：余弦值（cos）, 相关度 （correlation）, 曼哈顿距离 （Manhattan distance）</p>
</li>
</ul>
<h4 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h4><p><img src="http://i.imgur.com/jYuv1Zx.png" alt=""></p>
<h3 id="算法优缺点："><a href="#算法优缺点：" class="headerlink" title="算法优缺点："></a>算法优缺点：</h3><h4 id="算法优点"><a href="#算法优点" class="headerlink" title="算法优点"></a>算法优点</h4><ul>
<li>简单</li>
<li>易于理解</li>
<li>容易实现</li>
<li>通过对K的选择可具备丢噪音数据的健壮性</li>
</ul>
<h4 id="算法缺点"><a href="#算法缺点" class="headerlink" title="算法缺点"></a>算法缺点</h4><p><img src="http://i.imgur.com/hze5HXz.png" alt=""></p>
<ul>
<li>需要大量空间储存所有已知实例<ul>
<li>算法复杂度高（需要比较所有已知实例与要分类的实例）</li>
<li>当其样本分布不平衡时，比如其中一类样本过大（实例数量过多）占主导的时候，新的未知实例容易被归类为这个主导样本，因为这类样本实例的数量过大，但这个新的未知实例实际并木接近目标样本</li>
</ul>
</li>
</ul>
<h3 id="改进版本"><a href="#改进版本" class="headerlink" title="改进版本"></a>改进版本</h3><ul>
<li>考虑距离，根据距离加上权重<ul>
<li>比如: 1/d (d: 距离）</li>
</ul>
</li>
</ul>
<h3 id="案例实现"><a href="#案例实现" class="headerlink" title="案例实现"></a>案例实现</h3><h4 id="数据集介绍："><a href="#数据集介绍：" class="headerlink" title="数据集介绍："></a>数据集介绍：</h4><ul>
<li>虹膜</li>
</ul>
<p><img src="http://i.imgur.com/tuA5KWR.jpg" alt=""></p>
<ul>
<li>150个实例</li>
<li>萼片长度，萼片宽度，花瓣长度，花瓣宽度(sepal length, sepal width, petal length and petal width）</li>
<li>类别：<ul>
<li>Iris setosa, Iris versicolor, Iris virginica.</li>
</ul>
</li>
</ul>
<h4 id="利用Python的机器学习库sklearn"><a href="#利用Python的机器学习库sklearn" class="headerlink" title="利用Python的机器学习库sklearn"></a>利用Python的机器学习库sklearn</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> neighbors</div><div class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets</div><div class="line"></div><div class="line">knn = neighbors.KNeighborsClassifier()</div><div class="line">iris = datasets.load_iris()</div><div class="line"><span class="keyword">print</span> iris</div><div class="line">knn.fit(iris.data, iris.target)</div><div class="line">predictedLabel = knn.predict([[<span class="number">0.1</span>, <span class="number">0.2</span>, <span class="number">0.3</span>, <span class="number">0.4</span>]])</div><div class="line"><span class="keyword">print</span> predictedLabel</div></pre></td></tr></table></figure>
<h4 id="KNN-实现Implementation"><a href="#KNN-实现Implementation" class="headerlink" title="KNN 实现Implementation"></a>KNN 实现Implementation</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> csv</div><div class="line"><span class="keyword">import</span> random</div><div class="line"><span class="keyword">import</span> math</div><div class="line"><span class="keyword">import</span> operator</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">loadDataset</span><span class="params">(filename, split, trainingSet=[] , testSet=[])</span>:</span></div><div class="line">    <span class="keyword">with</span> open(filename, <span class="string">'rb'</span>) <span class="keyword">as</span> csvfile:</div><div class="line">        lines = csv.reader(csvfile)</div><div class="line">        dataset = list(lines)</div><div class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> range(len(dataset)<span class="number">-1</span>):</div><div class="line">            <span class="keyword">for</span> y <span class="keyword">in</span> range(<span class="number">4</span>):</div><div class="line">                dataset[x][y] = float(dataset[x][y])</div><div class="line">            <span class="keyword">if</span> random.random() &lt; split:</div><div class="line">                trainingSet.append(dataset[x])</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                testSet.append(dataset[x])</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">euclideanDistance</span><span class="params">(instance1, instance2, length)</span>:</span></div><div class="line">    distance = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(length):</div><div class="line">        distance += pow((instance1[x] - instance2[x]), <span class="number">2</span>)</div><div class="line">    <span class="keyword">return</span> math.sqrt(distance)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getNeighbors</span><span class="params">(trainingSet, testInstance, k)</span>:</span></div><div class="line">    distances = []</div><div class="line">    length = len(testInstance)<span class="number">-1</span></div><div class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(len(trainingSet)):</div><div class="line">        dist = euclideanDistance(testInstance, trainingSet[x], length)</div><div class="line">        distances.append((trainingSet[x], dist))</div><div class="line">    distances.sort(key=operator.itemgetter(<span class="number">1</span>))</div><div class="line">    neighbors = []</div><div class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(k):</div><div class="line">        neighbors.append(distances[x][<span class="number">0</span>])</div><div class="line">    <span class="keyword">return</span> neighbors</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getResponse</span><span class="params">(neighbors)</span>:</span></div><div class="line">    classVotes = &#123;&#125;</div><div class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(len(neighbors)):</div><div class="line">        response = neighbors[x][<span class="number">-1</span>]</div><div class="line">        <span class="keyword">if</span> response <span class="keyword">in</span> classVotes:</div><div class="line">            classVotes[response] += <span class="number">1</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            classVotes[response] = <span class="number">1</span></div><div class="line">    sortedVotes = sorted(classVotes.iteritems(), key=operator.itemgetter(<span class="number">1</span>), reverse=<span class="keyword">True</span>)</div><div class="line">    <span class="keyword">return</span> sortedVotes[<span class="number">0</span>][<span class="number">0</span>]</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getAccuracy</span><span class="params">(testSet, predictions)</span>:</span></div><div class="line">    correct = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(len(testSet)):</div><div class="line">        <span class="keyword">if</span> testSet[x][<span class="number">-1</span>] == predictions[x]:</div><div class="line">            correct += <span class="number">1</span></div><div class="line">    <span class="keyword">return</span> (correct/float(len(testSet))) * <span class="number">100.0</span></div><div class="line">    </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    <span class="comment"># prepare data</span></div><div class="line">    trainingSet=[]</div><div class="line">    testSet=[]</div><div class="line">    split = <span class="number">0.67</span></div><div class="line">    loadDataset(<span class="string">r'D:\MaiziEdu\DeepLearningBasics_MachineLearning\Datasets\iris.data.txt'</span>, split, trainingSet, testSet)</div><div class="line">    <span class="keyword">print</span> <span class="string">'Train set: '</span> + repr(len(trainingSet))</div><div class="line">    <span class="keyword">print</span> <span class="string">'Test set: '</span> + repr(len(testSet))</div><div class="line">    <span class="comment"># generate predictions</span></div><div class="line">    predictions=[]</div><div class="line">    k = <span class="number">3</span></div><div class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(len(testSet)):</div><div class="line">        neighbors = getNeighbors(trainingSet, testSet[x], k)</div><div class="line">        result = getResponse(neighbors)</div><div class="line">        predictions.append(result)</div><div class="line">        print(<span class="string">'&gt; predicted='</span> + repr(result) + <span class="string">', actual='</span> + repr(testSet[x][<span class="number">-1</span>]))</div><div class="line">    accuracy = getAccuracy(testSet, predictions)</div><div class="line">    print(<span class="string">'Accuracy: '</span> + repr(accuracy) + <span class="string">'%'</span>)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;综述&quot;&gt;&lt;a href=&quot;#综述&quot; class=&quot;headerlink&quot; title=&quot;综述&quot;&gt;&lt;/a&gt;综述&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;- Cover和Hart在1968年提出了最初的邻近算法
- 分类(classification)算法
- 输入基于实例的学
    
    </summary>
    
      <category term="机器学习" scheme="http://yoursite.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="KNN" scheme="http://yoursite.com/tags/KNN/"/>
    
  </entry>
  
  <entry>
    <title>决策树/判定树（decision tree)</title>
    <link href="http://yoursite.com/2017/06/13/MachineLearning/decisionTree/"/>
    <id>http://yoursite.com/2017/06/13/MachineLearning/decisionTree/</id>
    <published>2017-06-13T03:34:15.814Z</published>
    <updated>2017-06-13T04:15:24.812Z</updated>
    
    <content type="html"><![CDATA[<h3 id="机器学习中分类和预测算法的评估："><a href="#机器学习中分类和预测算法的评估：" class="headerlink" title="机器学习中分类和预测算法的评估："></a>机器学习中分类和预测算法的评估：</h3><ul>
<li>准确率</li>
<li>速度</li>
<li>强壮行</li>
<li>可规模性</li>
<li>可解释性</li>
</ul>
<h3 id="什么是决策树-判定树（decision-tree"><a href="#什么是决策树-判定树（decision-tree" class="headerlink" title="什么是决策树/判定树（decision tree)?"></a>什么是决策树/判定树（decision tree)?</h3><p>判定树是一个类似于流程图的树结构：其中，每个内部结点表示在一个属性上的测试，每个分支代表一个属性输出，而每个树叶结点代表类或类分布。树的最顶层是根结点。<br><img src="http://i.imgur.com/ArAO9J5.png" alt=""></p>
<h3 id="机器学习中分类方法中的一个重要算法"><a href="#机器学习中分类方法中的一个重要算法" class="headerlink" title="机器学习中分类方法中的一个重要算法"></a>机器学习中分类方法中的一个重要算法</h3><h3 id="构造决策树的基本算法分支-根结点-结点-树叶"><a href="#构造决策树的基本算法分支-根结点-结点-树叶" class="headerlink" title="构造决策树的基本算法分支   根结点  结点 树叶"></a>构造决策树的基本算法<strong>分支</strong>   <strong>根结点</strong> <strong> 结点</strong> <strong>树叶</strong></h3><p><img src="http://i.imgur.com/WqE7wHW.png" alt=""><br><img src="http://i.imgur.com/xaoydhx.png" alt=""></p>
<h4 id="熵（entropy）概念："><a href="#熵（entropy）概念：" class="headerlink" title="熵（entropy）概念："></a>熵（entropy）概念：</h4><ul>
<li><p>信息和抽象，如何度量？</p>
<ul>
<li>1948年，香农提出了 ”信息熵(entropy)“的概念</li>
<li><p>一条信息的信息量大小和它的不确定性有直接的关系，要搞清楚一件非常非常不确定的事情，或者是我们一无所知的事情，需要了解大量信息==&gt;信息量的度量就等于不确定性的多少</p>
</li>
<li><p>例子：猜世界杯冠军，假如一无所知，猜多少次？</p>
<pre><code>每个队夺冠的几率不是相等的
</code></pre></li>
<li><p>比特(bit)来衡量信息的多少<br><img src="http://i.imgur.com/rZho1MX.png" alt=""><br><img src="http://i.imgur.com/PPwa9Vr.png" alt=""></p>
</li>
<li>变量的不确定性越大，熵也就越大</li>
</ul>
</li>
</ul>
<h4 id="决策树归纳算法-（ID3）"><a href="#决策树归纳算法-（ID3）" class="headerlink" title="决策树归纳算法 （ID3）"></a>决策树归纳算法 （ID3）</h4><ul>
<li>1970-1980， J.Ross. Quinlan, ID3算法</li>
<li>选择属性判断结点</li>
<li>信息获取量(Information Gain)：Gain(A) = Info(D) - Infor_A(D)</li>
<li><p>通过A来作为节点分类获取了多少信息</p>
<p><img src="http://i.imgur.com/HDlxcPT.png" alt=""><br><img src="http://i.imgur.com/muelwVL.png" alt=""><br><img src="http://i.imgur.com/WHRyBII.png" alt=""><br><img src="http://i.imgur.com/rTpbMOx.png" alt=""></p>
</li>
<li>类似，Gain(income) = 0.029, Gain(student) = 0.151, Gain(credit_rating)=0.048 所以，选择age作为第一个根节点<br><img src="http://i.imgur.com/4uTCce2.png" alt=""><br>重复</li>
<li>算法：<ul>
<li>树以代表训练样本的单个结点开始（步骤1）。</li>
<li>如果样本都在同一个类，则该结点成为树叶，并用该类标号（步骤2 和3）。</li>
<li>否则，算法使用称为信息增益的基于熵的度量作为启发信息，选择能够最好地将样本分类的属 性（步骤6）。该属性成为该结点的“测试”或“判定”属性（步骤7）。在算法的该版本中，</li>
<li>所有的属性都是分类的，即离散值。连续属性必须离散化。</li>
<li>对测试属性的每个已知的值，创建一个分枝，并据此划分样本（步骤8-10）。</li>
<li>算法使用同样的过程，递归地形成每个划分上的样本判定树。一旦一个属性出现在一个结点上， 就不必该结点的任何后代上考虑它（步骤13）。</li>
<li><strong>递归划分步骤仅当下列条件之一成立停止：<ul>
<li>(a) 给定结点的所有样本属于同一类（步骤2 和3）。</li>
<li>(b) 没有剩余属性可以用来进一步划分样本（步骤4）。在此情况下，使用多数表决（步骤5）。</li></ul></strong></li>
</ul>
</li>
<li>这涉及将给定的结点转换成树叶，并用样本中的多数所在的类标记它。替换地，可以存放结</li>
<li>点样本的类分布。</li>
<li>(c) 分枝</li>
<li>test_attribute = a i 没有样本（步骤11）。在这种情况下，以 samples 中的多数类</li>
<li>创建一个树叶（步骤12）</li>
</ul>


<h4 id="其他算法："><a href="#其他算法：" class="headerlink" title="其他算法："></a>其他算法：</h4><ul>
<li>C4.5:  Quinlan<ul>
<li>Classification and Regression Trees (CART): (L. Breiman, J. Friedman, R. Olshen, C. Stone)</li>
<li>共同点：都是贪心算法，自上而下(Top-down approach)</li>
<li>区别：属性选择度量方法不同： C4.5 （gain ratio), CART(gini index), ID3 (Information Gain)</li>
</ul>
</li>
</ul>
<h4 id="如何处理连续性变量的属性"><a href="#如何处理连续性变量的属性" class="headerlink" title="如何处理连续性变量的属性"></a>如何处理连续性变量的属性</h4><p>变量离散化</p>
<h3 id="树剪枝叶-（避免overfitting"><a href="#树剪枝叶-（避免overfitting" class="headerlink" title="树剪枝叶 （避免overfitting)"></a>树剪枝叶 （避免overfitting)</h3><ul>
<li>先剪枝</li>
<li>后剪枝</li>
</ul>
<h3 id="决策树的优点："><a href="#决策树的优点：" class="headerlink" title="决策树的优点："></a>决策树的优点：</h3><ul>
<li>直观，便于理解，小规模数据集有效 </li>
</ul>
<h3 id="决策树的缺点："><a href="#决策树的缺点：" class="headerlink" title="决策树的缺点："></a>决策树的缺点：</h3><ul>
<li>处理连续变量不好</li>
<li>类别较多时，错误增加的比较快</li>
<li>可规模性一般</li>
</ul>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="python"><a href="#python" class="headerlink" title="python"></a>python</h4><ul>
<li>Python机器学习的库：scikit-learn<ul>
<li>特性：<ul>
<li>简单高效的数据挖掘和机器学习分析</li>
<li>对所有用户开放，根据不同需求高度可重用性</li>
<li>基于Numpy, SciPy和matplotlib</li>
<li>开源，商用级别：获得 BSD许可</li>
</ul>
</li>
<li>覆盖问题领域：<ul>
<li>分类（classification), 回归（regression), 聚类（clustering), 降维(dimensionality reduction)<br>模型选择(model selection), 预处理(preprocessing)</li>
</ul>
</li>
<li>使用用scikit-learn<ul>
<li>安装scikit-learn: pip, easy_install, windows installer</li>
<li>安装必要package：numpy， SciPy和matplotlib， 可使用- Anaconda (包含numpy, scipy等科学计算常用<br>package）</li>
</ul>
</li>
<li>安装注意问题：Python解释器版本（2.7 or 3.4？）, 32-bit or 64-bit系统</li>
</ul>
</li>
<li><p>例子</p>
<p><img src="http://i.imgur.com/HDlxcPT.png" alt=""></p>
<ul>
<li><p>安装 Graphviz：<a href="http://www.graphviz.org/" target="_blank" rel="external"> http://www.graphviz.org/</a></p>
<ul>
<li>配置环境变量</li>
</ul>
</li>
<li><p>转化dot文件至pdf可视化决策树：dot -Tpdf iris.dot -o outpu.pdf</p>
</li>
</ul>
</li>
<li>代码(python27)<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding:utf-8</span></div><div class="line"><span class="string">'''</span></div><div class="line">Created on 2016 刘铸澎</div><div class="line"> </div><div class="line">@author: liuzhupeng</div><div class="line">'''</div><div class="line"><span class="keyword">from</span> sklearn.feature_extraction <span class="keyword">import</span> DictVectorizer</div><div class="line"><span class="keyword">import</span> csv</div><div class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> preprocessing</div><div class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> tree</div><div class="line"><span class="keyword">from</span> sklearn.externals.six <span class="keyword">import</span> StringIO</div><div class="line"> </div><div class="line"><span class="comment">#Read in the csv file and put features in a list of dict and list of class Label</span></div><div class="line">allElectronicsData = open(<span class="string">r'D:\python\machineLearning\machlearnTest\dataSets\AllElectronics.csv'</span>,<span class="string">'rb'</span>)</div><div class="line">reader = csv.reader(allElectronicsData)</div><div class="line">headers = reader.next()</div><div class="line"> </div><div class="line"><span class="comment">#print(headers)</span></div><div class="line"> </div><div class="line">featureList = []</div><div class="line">labelList = []</div><div class="line"><span class="keyword">for</span> row <span class="keyword">in</span> reader:</div><div class="line">    <span class="comment">#print(len(row)-1) 5</span></div><div class="line">    labelList.append(row[len(row)<span class="number">-1</span>]);<span class="comment">#每行最后一个保存在labelList</span></div><div class="line">    rowDict = &#123;&#125;</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,len(row)<span class="number">-1</span>):   <span class="comment">#print(range(1,len(row)-1))  [1, 2, 3, 4]</span></div><div class="line">        <span class="comment">#print(row[i])</span></div><div class="line">        rowDict[headers[i]] = row[i]</div><div class="line">        <span class="comment">#print ("rowDict",rowDict)</span></div><div class="line">    featureList.append(rowDict)</div><div class="line">print(featureList)</div><div class="line"> </div><div class="line"><span class="comment">#Vetorize features</span></div><div class="line">vec = DictVectorizer() <span class="comment">#属性转换为对应数字：&#123;'credit_rating': 'fair', 'age': 'youth', 'student': 'no', 'income': 'high'&#125; [ 0.  0.  1.  0.  1.  1.  0.  0.  1.  0.]</span></div><div class="line">dummyX = vec.fit_transform(featureList).toarray()</div><div class="line">print(<span class="string">'dummyX:'</span>+str(dummyX)) <span class="comment">#&#123;'credit_rating': 'fair', 'age': 'youth', 'student': 'no', 'income': 'high'&#125; [ 0.  0.  1.  0.  1.  1.  0.  0.  1.  0.]</span></div><div class="line">print(vec.get_feature_names())<span class="comment">#['age=middle_aged', 'age=senior', 'age=youth', 'credit_rating=excellent', 'credit_rating=fair', 'income=high', 'income=low', 'income=medium', 'student=no', 'student=yes']</span></div><div class="line"> </div><div class="line">print(<span class="string">'labelList:'</span>+str(labelList))</div><div class="line"> </div><div class="line"><span class="comment">#Vectorize class labels</span></div><div class="line">lb = preprocessing.LabelBinarizer()</div><div class="line">dummyY = lb.fit_transform(labelList)</div><div class="line">print(<span class="string">'dummyY:'</span>+str(dummyY))</div><div class="line"> </div><div class="line"><span class="comment">#Using decision tree for classification</span></div><div class="line"><span class="comment">#clf = tree.DecisionTreeClassifier()</span></div><div class="line">clf = tree.DecisionTreeClassifier(criterion=<span class="string">'entropy'</span>)</div><div class="line">clf = clf.fit(dummyX,dummyY)</div><div class="line">print(<span class="string">"clf:"</span>+str(clf))</div><div class="line"> </div><div class="line"><span class="comment">#Visulize model</span></div><div class="line"><span class="keyword">with</span> open(<span class="string">"allElectronicInformationGainOri.dot"</span>,<span class="string">'w'</span>) <span class="keyword">as</span> f:</div><div class="line">    f = tree.export_graphviz(clf, feature_names=vec.get_feature_names(), out_file = f)</div><div class="line"><span class="comment">#读取第一个人信息</span></div><div class="line">oneRowX = dummyX[<span class="number">0</span>,:]</div><div class="line">print(<span class="string">"oneRowX:"</span>+str(oneRowX))</div><div class="line"><span class="comment">#修改第一个年龄范围</span></div><div class="line">oneRowX = oneRowX</div><div class="line">oneRowX[<span class="number">0</span>] = <span class="number">1</span></div><div class="line">oneRowX[<span class="number">2</span>] = <span class="number">0</span></div><div class="line"><span class="comment">#预测新人是否买电脑</span></div><div class="line">predictedY = clf.predict(oneRowX)</div><div class="line">print(<span class="string">'predictedY:'</span>+str(predictedY))</div></pre></td></tr></table></figure></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;机器学习中分类和预测算法的评估：&quot;&gt;&lt;a href=&quot;#机器学习中分类和预测算法的评估：&quot; class=&quot;headerlink&quot; title=&quot;机器学习中分类和预测算法的评估：&quot;&gt;&lt;/a&gt;机器学习中分类和预测算法的评估：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;准确率&lt;/li&gt;
    
    </summary>
    
      <category term="机器学习" scheme="http://yoursite.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="决策树" scheme="http://yoursite.com/tags/%E5%86%B3%E7%AD%96%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>TensorFlow 传统神经网络之优化器</title>
    <link href="http://yoursite.com/2017/06/12/TensorFlow/Optimizer/"/>
    <id>http://yoursite.com/2017/06/12/TensorFlow/Optimizer/</id>
    <published>2017-06-12T12:00:20.433Z</published>
    <updated>2017-06-12T12:51:14.692Z</updated>
    
    <content type="html"><![CDATA[<h3 id="优化器在TensorFlow对应的方法"><a href="#优化器在TensorFlow对应的方法" class="headerlink" title="优化器在TensorFlow对应的方法"></a>优化器在TensorFlow对应的方法</h3><ul>
<li>tf.train.GradientDescentOptimizer</li>
<li>tf.train.AdadeltaOptimizer</li>
<li>tf.train.AdagradOptimizer</li>
<li>tf.train.AdagradDAOptimizer</li>
<li>tf.train.MomentumOptimizer</li>
<li>tf.train.AdamOptimizer</li>
<li>tf.train.FtrlOptimizer</li>
<li>tf.train.ProximalGradientDescentOptimizer</li>
<li>tf.train.ProximalAdagradOptimizer</li>
<li>tf.train.RMSPropOptimizer<h3 id="各种优化器对比"><a href="#各种优化器对比" class="headerlink" title="各种优化器对比"></a>各种优化器对比</h3></li>
<li>标准梯度下降法：<ul>
<li>标准梯度下降先计算所有样本汇总误差，然后根据总误差来更新权值</li>
</ul>
</li>
<li>随机梯度下降法<ul>
<li>随机梯度下降随机抽取一个样本来计算误差，然后更新权值</li>
</ul>
</li>
<li>批量梯度下降法<ul>
<li>批量梯度下降算是一种折中的方案，从总样本中选取一个批次（比如一共有10000个样本，随机选取100个样本作为一个batch），然后计算这个batch的总误差，根据总误差来更新权值。<br><img src="http://i.imgur.com/BorKb2P.jpg" alt=""></li>
</ul>
</li>
<li>W：要训练的参数</li>
<li>J(W)：代价函数</li>
<li>\(∇_W\)J(W)：代价函数的梯度</li>
<li>η：学习率</li>
</ul>
<h4 id="SGD"><a href="#SGD" class="headerlink" title="SGD"></a>SGD</h4><ul>
<li>\(W = {W - η⋅∇_wJ(W;x^i;y^j)}\) </li>
</ul>
<h4 id="Momentum"><a href="#Momentum" class="headerlink" title="Momentum"></a>Momentum</h4><ul>
<li>γ：动力，通常设置为0.9</li>
<li>\(v<em>t = γv</em>{t-1} + η∇_WJ(W)\)<br><img src="http://i.imgur.com/q8PRjcZ.jpg" alt=""></li>
<li>\(W = W−v_t\)</li>
<li>当前权值的改变会受到上一次权值改变的影响，类似于小球向下滚动的时候带上了惯性。这样<br>可以加快小球的向下的速度。</li>
</ul>
<h4 id="NAG（Nesterov-accelerated-gradient）"><a href="#NAG（Nesterov-accelerated-gradient）" class="headerlink" title="NAG（Nesterov accelerated gradient）"></a>NAG（Nesterov accelerated gradient）</h4><ul>
<li>\(vt = γv_{t-1} + η∇<em>WJ(W−γv</em>{t-1})\)<br><img src="http://i.imgur.com/bRmWa1X.jpg" alt=""></li>
<li>\(W = W-vt\)</li>
<li>NAG在TF中跟Momentum合并在同一个函数tf.train.MomentumOptimizer中，可以通过参数配置启用。</li>
<li>在Momentun中小球会盲目地跟从下坡的梯度，容易发生错误，所以我们需要一个更聪明的小球，这个小球提前知道它要去哪里，它还要知道走到坡底的时候速度慢下来而不是又冲上另一个坡。\(γv<em>{t−1}\)会用来修改W的值，计算\(W−γv</em>{t−1}\)可以表示小球下一个位置大概在哪里。从而我们可以提前计算下一个位置的梯度，然后使用到当前位置。</li>
</ul>
<h4 id="Adagrad"><a href="#Adagrad" class="headerlink" title="Adagrad"></a>Adagrad</h4><ul>
<li>i：代表第i个分类</li>
<li>t：代表出现次数</li>
<li>ϵ：的作用是避免分母为0，取值一般为\(1e^{-8}\)</li>
<li>η：取值一般为0.01</li>
<li>\(g_{t,i} = ∇_WJ(W_i)\)<br><img src="http://i.imgur.com/VKLw51b.jpg" alt=""></li>
</ul>
<p><img src="http://i.imgur.com/y1fXoN8.jpg" alt=""></p>
<ul>
<li>它是基于SGD的一种算法，它的核心思想是对比较常见的数据给予它比较小的学习率去调整参数，对于比较罕见的数据给予它比较大的学习率去调整参数。它很适合应用于数据稀疏的数据集（比如一个图片数据集，有10000张狗的照片，10000张猫的照片，只有100张大象的照片）。</li>
<li>Adagrad主要的优势在于不需要人为的调节学习率，它可以自动调节。它的缺点在于，随着迭代次数的增多，学习率也会越来越低，最终会趋向于0。</li>
</ul>
<h4 id="RMSprop"><a href="#RMSprop" class="headerlink" title="RMSprop"></a>RMSprop</h4><ul>
<li>RMS（Root Mean Square）是均方根的缩写。</li>
<li>γ：动力，通常设置为0.9</li>
<li>η：取值一般为0.001</li>
<li>\(E[g^2]_t\)：表示前t次的梯度平方的平均值</li>
<li>\(g_t= ∇_WJ(W)\)<br><img src="http://i.imgur.com/S62E4UT.jpg" alt=""></li>
<li>RMSprop借鉴了一些Adagrad的思想，不过这里RMSprop只用到了前t-1次梯度平方的平均值加上当前梯度的平方的和的开平方作为学习率的分母。这样RMSprop不会出现学习率越来越低的问题，而且也能自己调节学习率，并且可以有一个比较好的效果。</li>
</ul>
<h4 id="Adadelta"><a href="#Adadelta" class="headerlink" title="Adadelta"></a>Adadelta</h4><p><img src="http://i.imgur.com/OlMb8If.jpg" alt=""></p>
<ul>
<li>使用Adadelta我们甚至不需要设置一个默认学习率，在Adadelta不需要使用学习率也可以达到一个非常好的效果。</li>
</ul>
<h4 id="Adam"><a href="#Adam" class="headerlink" title="Adam"></a>Adam</h4><ul>
<li>β1：一般取值0.9</li>
<li>β2 ：一般取值0.999</li>
<li><p>ϵ：避免分母为0，一般取值\(10^{-8}\)<br><img src="http://i.imgur.com/Bueczjr.jpg" alt=""></p>
</li>
<li><p>就像Adadelta和RMSprop一样Adam会存储之前衰减的平方梯度，同时它也会保存之前衰减的梯度。经过一些处理之后再使用类似Adadelta和RMSprop的方式更新参数。<br>分区</p>
</li>
</ul>
<p><img src="http://i.imgur.com/YawY2Vm.jpg" alt=""><br><img src="http://i.imgur.com/K5ukQxW.jpg" alt=""></p>
<ul>
<li>Adadelta 趋向最终学习率最快</li>
<li>随机梯度下降法在马鞍图像中陷入局部中,无法求出最终学习率</li>
</ul>
<h3 id="使用Adadelta的代码实现"><a href="#使用Adadelta的代码实现" class="headerlink" title="使用Adadelta的代码实现"></a>使用Adadelta的代码实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment"># coding: utf-8</span></div><div class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</div><div class="line"><span class="keyword">from</span> tensorflow.examples.tutorials.mnist <span class="keyword">import</span> input_data</div><div class="line"></div><div class="line"><span class="comment">#载入数据集</span></div><div class="line">mnist = input_data.read_data_sets(<span class="string">"MNIST_data"</span>,one_hot=<span class="keyword">True</span>)</div><div class="line"></div><div class="line"><span class="comment">#每个批次的大小</span></div><div class="line">batch_size = <span class="number">100</span></div><div class="line"><span class="comment">#计算一共有多少个批次</span></div><div class="line">n_batch = mnist.train.num_examples // batch_size</div><div class="line"></div><div class="line"><span class="comment">#定义两个placeholder</span></div><div class="line">x = tf.placeholder(tf.float32,[<span class="keyword">None</span>,<span class="number">784</span>])</div><div class="line">y = tf.placeholder(tf.float32,[<span class="keyword">None</span>,<span class="number">10</span>])</div><div class="line"></div><div class="line"><span class="comment">#创建一个简单的神经网络</span></div><div class="line">W = tf.Variable(tf.zeros([<span class="number">784</span>,<span class="number">10</span>]))</div><div class="line">b = tf.Variable(tf.zeros([<span class="number">10</span>]))</div><div class="line">prediction = tf.nn.softmax(tf.matmul(x,W)+b)</div><div class="line"></div><div class="line"><span class="comment">#二次代价函数</span></div><div class="line"><span class="comment"># loss = tf.reduce_mean(tf.square(y-prediction))</span></div><div class="line">loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels=y,logits=prediction))</div><div class="line"><span class="comment">#使用梯度下降法</span></div><div class="line"><span class="comment"># train_step = tf.train.GradientDescentOptimizer(0.2).minimize(loss)</span></div><div class="line">train_step = tf.train.AdamOptimizer(<span class="number">1e-2</span>).minimize(loss)</div><div class="line"></div><div class="line"><span class="comment">#初始化变量</span></div><div class="line">init = tf.global_variables_initializer()</div><div class="line"></div><div class="line"><span class="comment">#结果存放在一个布尔型列表中</span></div><div class="line">correct_prediction = tf.equal(tf.argmax(y,<span class="number">1</span>),tf.argmax(prediction,<span class="number">1</span>))<span class="comment">#argmax返回一维张量中最大的值所在的位置</span></div><div class="line"><span class="comment">#求准确率</span></div><div class="line">accuracy = tf.reduce_mean(tf.cast(correct_prediction,tf.float32))<span class="comment">#此函数是类型转换函数 boolean -&gt; int</span></div><div class="line"></div><div class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</div><div class="line">    sess.run(init)</div><div class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> range(<span class="number">21</span>):</div><div class="line">        <span class="keyword">for</span> batch <span class="keyword">in</span> range(n_batch):</div><div class="line">            batch_xs,batch_ys =  mnist.train.next_batch(batch_size)</div><div class="line">            sess.run(train_step,feed_dict=&#123;x:batch_xs,y:batch_ys&#125;)</div><div class="line">        </div><div class="line">        acc = sess.run(accuracy,feed_dict=&#123;x:mnist.test.images,y:mnist.test.labels&#125;)</div><div class="line">        print(<span class="string">"Iter "</span> + str(epoch) + <span class="string">",Testing Accuracy "</span> + str(acc))</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">Extracting MNIST_data\train-images-idx3-ubyte.gz</div><div class="line">Extracting MNIST_data\train-labels-idx1-ubyte.gz</div><div class="line">Extracting MNIST_data\t10k-images-idx3-ubyte.gz</div><div class="line">Extracting MNIST_data\t10k-labels-idx1-ubyte.gz</div><div class="line">Datasets(train=&lt;tensorflow.contrib.learn.python.learn.datasets.mnist.DataSet object at <span class="number">0x0000025A804D1828</span>&gt;, validation=&lt;tensorflow.contrib.learn.python.learn.datasets.mnist.DataSet object at <span class="number">0x0000025AD0463BE0</span>&gt;, test=&lt;tensorflow.contrib.learn.python.learn.datasets.mnist.DataSet object at <span class="number">0x0000025AD0463978</span>&gt;)</div><div class="line">Iter0,Testing Accuracy0<span class="number">.9185</span></div><div class="line">Iter1,Testing Accuracy0<span class="number">.9268</span></div><div class="line">Iter2,Testing Accuracy0<span class="number">.9274</span></div><div class="line">Iter3,Testing Accuracy0<span class="number">.9297</span></div><div class="line">Iter4,Testing Accuracy0<span class="number">.9278</span></div><div class="line">Iter5,Testing Accuracy0<span class="number">.9248</span></div><div class="line">Iter6,Testing Accuracy0<span class="number">.9292</span></div><div class="line">Iter7,Testing Accuracy0<span class="number">.9308</span></div><div class="line">Iter8,Testing Accuracy0<span class="number">.9281</span></div><div class="line">Iter9,Testing Accuracy0<span class="number">.9303</span></div><div class="line">Iter10,Testing Accuracy0<span class="number">.9305</span></div><div class="line">Iter11,Testing Accuracy0<span class="number">.9296</span></div><div class="line">Iter12,Testing Accuracy0<span class="number">.9288</span></div><div class="line">Iter13,Testing Accuracy0<span class="number">.926</span></div><div class="line">Iter14,Testing Accuracy0<span class="number">.9298</span></div><div class="line">Iter15,Testing Accuracy0<span class="number">.9314</span></div><div class="line">Iter16,Testing Accuracy0<span class="number">.9314</span></div><div class="line">Iter17,Testing Accuracy0<span class="number">.9307</span></div><div class="line">Iter18,Testing Accuracy0<span class="number">.9293</span></div><div class="line">Iter19,Testing Accuracy0<span class="number">.9289</span></div><div class="line">Iter20,Testing Accuracy0<span class="number">.9296</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;优化器在TensorFlow对应的方法&quot;&gt;&lt;a href=&quot;#优化器在TensorFlow对应的方法&quot; class=&quot;headerlink&quot; title=&quot;优化器在TensorFlow对应的方法&quot;&gt;&lt;/a&gt;优化器在TensorFlow对应的方法&lt;/h3&gt;&lt;ul&gt;

    
    </summary>
    
      <category term="深度学习" scheme="http://yoursite.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="TensorFlow" scheme="http://yoursite.com/tags/TensorFlow/"/>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="optimizer" scheme="http://yoursite.com/tags/optimizer/"/>
    
  </entry>
  
  <entry>
    <title>聚类(Clustering) K-means算法</title>
    <link href="http://yoursite.com/2017/06/12/MachineLearning/K-mean/"/>
    <id>http://yoursite.com/2017/06/12/MachineLearning/K-mean/</id>
    <published>2017-06-12T07:59:19.799Z</published>
    <updated>2017-06-12T10:32:58.638Z</updated>
    
    <content type="html"><![CDATA[<h3 id="机器学习概念"><a href="#机器学习概念" class="headerlink" title="机器学习概念"></a>机器学习概念</h3><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><p>训练集，测试集，特征值，监督学习，非监督学习，半监督学习，分类，回归 </p>
<ul>
<li>训练集(training set/data)/训练样例（training examples): 用来进行训练，也就是产生模型或者算法的数据集</li>
<li>测试集(testing set/data)/测试样例 (testing examples)：用来专门进行测试已经学习好的模型或者算法的数据集</li>
<li>特征向量(features/feature vector)：属性的集合，通常用一个向量来表示，附属于一个实例</li>
<li>标记(label): c(x), 实例类别的标记</li>
<li>正例(positive example)</li>
<li>反例(negative example)</li>
<li>分类 (classification): 目标标记为类别型数据(category) </li>
<li>回归(regression): 目标标记为连续性数值 (continuous numeric value)</li>
<li>有监督学习(supervised learning)： 训练集有类别标记(class label)</li>
<li>无监督学习(unsupervised learning)： 无类别标记(class label)</li>
<li>半监督学习（semi-supervised learning)：有类别标记的训练集 + 无标记的训练集</li>
</ul>
<h4 id="机器学习步骤框架"><a href="#机器学习步骤框架" class="headerlink" title="机器学习步骤框架"></a>机器学习步骤框架</h4><ul>
<li>把数据拆分为训练集和测试集</li>
<li>用训练集和训练集的特征向量来训练算法</li>
<li>用学习来的算法运用在测试集上来评估算法 （可能要设计到调整参数（parameter tuning), 用验证集（validation set）</li>
</ul>
<h4 id="监督学习"><a href="#监督学习" class="headerlink" title="监督学习"></a>监督学习</h4><ul>
<li>分类<ul>
<li>决策树</li>
<li>临近取样</li>
<li>支持向量机</li>
<li>神经网络算法</li>
</ul>
</li>
<li>回归<ul>
<li>线性回归</li>
<li>非线性回归<h4 id="非监督学习"><a href="#非监督学习" class="headerlink" title="非监督学习"></a>非监督学习</h4></li>
</ul>
</li>
<li>用K-mean算法聚类</li>
<li>用hierarchical clustering算法聚类</li>
</ul>
<h3 id="K-means算法"><a href="#K-means算法" class="headerlink" title="K-means算法"></a>K-means算法</h3><h4 id="归类："><a href="#归类：" class="headerlink" title="归类："></a>归类：</h4><ul>
<li>聚类(clustering) 属于非监督学习 (unsupervised learning) 无类别标记(class label)<h4 id="举例："><a href="#举例：" class="headerlink" title="举例："></a>举例：</h4><img src="http://i.imgur.com/LwD2Qme.jpg" alt=""></li>
</ul>
<h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><ul>
<li>Clustering 中的经典算法，数据挖掘十大经典算法之一</li>
<li>算法接受参数 k ；然后将事先输入的n个数据对象划分为 k个聚类以便使得所获得的聚类满足：同一聚类中的对象相似度较高；而不同聚类中的对象相似度较小。</li>
<li>算法思想：<ul>
<li>以空间中k个点为中心进行聚类，对最靠近他们的对象归类。通过迭代的方法，逐次更新各聚类中心的值，直至得到最好的聚类结果</li>
</ul>
</li>
<li>算法描述：<ul>
<li>适当选择c个类的初始中心；</li>
<li>在第k次迭代中，对任意一个样本，求其到c各中心的距离，将该样本归到距离最短的中心所在的类；</li>
<li>利用均值等方法更新该类的中心值；</li>
<li>对于所有的c个聚类中心，如果利用（2）（3）的迭代法更新后，值保持不变，则迭代结束，否则继续迭代。</li>
</ul>
</li>
<li><p>算法流程：</p>
<p><img src="http://i.imgur.com/LwD2Qme.jpg" alt=""></p>
<ul>
<li>输入：k, data[n];<ul>
<li>选择k个初始中心点，例如c[0]=data[0],…c[k-1]=data[k-1];</li>
<li>对于data[0]….data[n], 分别与c[0]…c[k-1]比较，假定与c[i]差值最少，就标记为i;</li>
<li>对于所有标记为i点，重新计算c[i]={ 所有标记为i的data[j]之和}/标记为i的个数；</li>
<li>重复(2)(3),直到所有c[i]值的变化小于给定阈值。<h4 id="举例：-1"><a href="#举例：-1" class="headerlink" title="举例："></a>举例：</h4><img src="http://i.imgur.com/Zbyc6xz.png" alt=""><br><img src="http://i.imgur.com/U99WRB0.png" alt=""><br><img src="http://i.imgur.com/jW7KcIe.png" alt=""><br><img src="http://i.imgur.com/XxoLja2.png" alt=""><br><img src="http://i.imgur.com/9JiXVGn.png" alt=""><br><img src="http://i.imgur.com/abqDoUF.png" alt=""><br><img src="http://i.imgur.com/fy6liSi.png" alt=""><br><img src="http://i.imgur.com/NqjNoLS.png" alt=""><br><img src="http://i.imgur.com/HPwErlT.png" alt=""><br><img src="http://i.imgur.com/vheO1RU.png" alt=""><br><img src="http://i.imgur.com/KutWEkT.png" alt=""><br><img src="http://i.imgur.com/y5DaTcq.png" alt=""><br><img src="http://i.imgur.com/aFUm9fi.png" alt=""></li>
</ul>
</li>
</ul>
<p>停止<br><img src="http://i.imgur.com/JsjIMBO.png" alt=""></p>
</li>
<li>优点：速度快，简单</li>
<li>缺点：最终结果跟初始点选择相关，容易陷入局部最优，需直到k值</li>
</ul>
<p><a href="http://croce.ggf.br/dados/K%20mean%20Clustering1.pdf" target="_blank" rel="external">Reference</a></p>
<h5 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># coding: utf-8</span></div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"></div><div class="line"><span class="comment"># Function: K Means</span></div><div class="line"><span class="comment"># -------------</span></div><div class="line"><span class="comment"># K-Means is an algorithm that takes in a dataset and a constant</span></div><div class="line"><span class="comment"># k and returns k centroids (which define clusters of data in the</span></div><div class="line"><span class="comment"># dataset which are similar to one another).</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">kmeans</span><span class="params">(X, k, maxIt)</span>:</span></div><div class="line">    numPoints, numDim = X.shape <span class="comment"># 行 列 (4, 2)</span></div><div class="line"></div><div class="line">    dataSet = np.zeros((numPoints, numDim + <span class="number">1</span>))<span class="comment"># 行 列 (4, 3)</span></div><div class="line">    dataSet[:, :<span class="number">-1</span>] = X</div><div class="line"></div><div class="line">    <span class="comment"># Initialize centroids randomly</span></div><div class="line">    centroids = dataSet[np.random.randint(numPoints, size = k), :]<span class="comment">#numPoints行中生成k个</span></div><div class="line">    centroids = dataSet[<span class="number">0</span>:<span class="number">2</span>, :]<span class="comment">#前两个</span></div><div class="line">    <span class="comment">#Randomly assign labels to initial centorid</span></div><div class="line">    centroids[:, <span class="number">-1</span>] = range(<span class="number">1</span>, k +<span class="number">1</span>)</div><div class="line"></div><div class="line">    <span class="comment"># Initialize book keeping vars.</span></div><div class="line">    iterations = <span class="number">0</span></div><div class="line">    oldCentroids = <span class="keyword">None</span></div><div class="line"></div><div class="line">    <span class="comment"># Run the main k-means algorithm</span></div><div class="line">    <span class="keyword">while</span> <span class="keyword">not</span> shouldStop(oldCentroids, centroids, iterations, maxIt):</div><div class="line">        print(<span class="string">"iteration: \n"</span>, iterations)</div><div class="line">        print(<span class="string">"dataSet: \n"</span>, dataSet)</div><div class="line">        print(<span class="string">"centroids: \n"</span>, centroids)</div><div class="line">        <span class="comment"># Save old centroids for convergence test. Book keeping.</span></div><div class="line">        oldCentroids = np.copy(centroids)</div><div class="line">        iterations += <span class="number">1</span></div><div class="line"></div><div class="line">        <span class="comment"># Assign labels to each datapoint based on centroids</span></div><div class="line">        updateLabels(dataSet, centroids)</div><div class="line"></div><div class="line">        <span class="comment"># Assign centroids based on datapoint labels</span></div><div class="line">        centroids = getCentroids(dataSet, k)</div><div class="line"></div><div class="line">        <span class="comment"># We can get the labels too by calling getLabels(dataSet, centroids)</span></div><div class="line">    <span class="keyword">return</span> dataSet</div><div class="line"><span class="comment"># Function: Should Stop</span></div><div class="line"><span class="comment"># -------------</span></div><div class="line"><span class="comment"># Returns True or False if k-means is done. K-means terminates either</span></div><div class="line"><span class="comment"># because it has run a maximum number of iterations OR the centroids</span></div><div class="line"><span class="comment"># stop changing.</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">shouldStop</span><span class="params">(oldCentroids, centroids, iterations, maxIt)</span>:</span></div><div class="line">    <span class="keyword">if</span> iterations &gt; maxIt:</div><div class="line">         <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">    <span class="keyword">return</span> np.array_equal(oldCentroids, centroids)</div><div class="line"><span class="comment"># Function: Get Labels</span></div><div class="line"><span class="comment"># -------------</span></div><div class="line"><span class="comment"># Update a label for each piece of data in the dataset. </span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">updateLabels</span><span class="params">(dataSet, centroids)</span>:</span></div><div class="line">    <span class="comment"># For each element in the dataset, chose the closest centroid. </span></div><div class="line">    <span class="comment"># Make that centroid the element's label.</span></div><div class="line">    numPoints, numDim = dataSet.shape</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, numPoints):</div><div class="line">        dataSet[i, <span class="number">-1</span>] = getLabelFromClosestCentroid(dataSet[i, :<span class="number">-1</span>], centroids)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getLabelFromClosestCentroid</span><span class="params">(dataSetRow, centroids)</span>:</span></div><div class="line">    label = centroids[<span class="number">0</span>, <span class="number">-1</span>];</div><div class="line">    minDist = np.linalg.norm(dataSetRow - centroids[<span class="number">0</span>, :<span class="number">-1</span>])</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span> , centroids.shape[<span class="number">0</span>]):<span class="comment">#centroids.shape[0] 行</span></div><div class="line">        dist = np.linalg.norm(dataSetRow - centroids[i, :<span class="number">-1</span>])</div><div class="line">        <span class="keyword">if</span> dist &lt; minDist:</div><div class="line">            minDist = dist</div><div class="line">            label = centroids[i, <span class="number">-1</span>]</div><div class="line">    print(<span class="string">"minDist:"</span>, minDist)</div><div class="line">    <span class="keyword">return</span> label</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Function: Get Centroids</span></div><div class="line"><span class="comment"># -------------</span></div><div class="line"><span class="comment"># Returns k random centroids, each of dimension n.</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getCentroids</span><span class="params">(dataSet, k)</span>:</span></div><div class="line">    <span class="comment"># Each centroid is the geometric mean of the points that</span></div><div class="line">    <span class="comment"># have that centroid's label. Important: If a centroid is empty (no points have</span></div><div class="line">    <span class="comment"># that centroid's label) you should randomly re-initialize it.</span></div><div class="line">    result = np.zeros((k, dataSet.shape[<span class="number">1</span>]))</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, k + <span class="number">1</span>):</div><div class="line">        oneCluster = dataSet[dataSet[:, <span class="number">-1</span>] == i, :<span class="number">-1</span>]</div><div class="line">        result[i - <span class="number">1</span>, :<span class="number">-1</span>] = np.mean(oneCluster, axis = <span class="number">0</span>)<span class="comment">#axis 沿着行求和</span></div><div class="line">        result[i - <span class="number">1</span>, <span class="number">-1</span>] = i</div><div class="line"></div><div class="line">    <span class="keyword">return</span> result</div><div class="line"></div><div class="line"></div><div class="line">x1 = np.array([<span class="number">1</span>, <span class="number">1</span>])</div><div class="line">x2 = np.array([<span class="number">2</span>, <span class="number">1</span>])</div><div class="line">x3 = np.array([<span class="number">4</span>, <span class="number">3</span>])</div><div class="line">x4 = np.array([<span class="number">5</span>, <span class="number">4</span>])</div><div class="line">testX = np.vstack((x1, x2, x3, x4))</div><div class="line"></div><div class="line">result = kmeans(testX, <span class="number">2</span>, <span class="number">10</span>)</div><div class="line">print(<span class="string">"final result:"</span>)</div><div class="line">print(result)</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">iteration: </div><div class="line"> <span class="number">0</span></div><div class="line">dataSet: </div><div class="line"> [[ <span class="number">1.</span>  <span class="number">1.</span>  <span class="number">1.</span>]</div><div class="line"> [ <span class="number">2.</span>  <span class="number">1.</span>  <span class="number">2.</span>]</div><div class="line"> [ <span class="number">4.</span>  <span class="number">3.</span>  <span class="number">0.</span>]</div><div class="line"> [ <span class="number">5.</span>  <span class="number">4.</span>  <span class="number">0.</span>]]</div><div class="line">centroids: </div><div class="line"> [[ <span class="number">1.</span>  <span class="number">1.</span>  <span class="number">1.</span>]</div><div class="line"> [ <span class="number">2.</span>  <span class="number">1.</span>  <span class="number">2.</span>]]</div><div class="line">minDist: <span class="number">0.0</span></div><div class="line">minDist: <span class="number">0.0</span></div><div class="line">minDist: <span class="number">2.82842712475</span></div><div class="line">minDist: <span class="number">4.24264068712</span></div><div class="line">iteration: </div><div class="line"> <span class="number">1</span></div><div class="line">dataSet: </div><div class="line"> [[ <span class="number">1.</span>  <span class="number">1.</span>  <span class="number">1.</span>]</div><div class="line"> [ <span class="number">2.</span>  <span class="number">1.</span>  <span class="number">2.</span>]</div><div class="line"> [ <span class="number">4.</span>  <span class="number">3.</span>  <span class="number">2.</span>]</div><div class="line"> [ <span class="number">5.</span>  <span class="number">4.</span>  <span class="number">2.</span>]]</div><div class="line">centroids: </div><div class="line"> [[ <span class="number">1.</span>          <span class="number">1.</span>          <span class="number">1.</span>        ]</div><div class="line"> [ <span class="number">3.66666667</span>  <span class="number">2.66666667</span>  <span class="number">2.</span>        ]]</div><div class="line">minDist: <span class="number">0.0</span></div><div class="line">minDist: <span class="number">1.0</span></div><div class="line">minDist: <span class="number">0.471404520791</span></div><div class="line">minDist: <span class="number">1.88561808316</span></div><div class="line">iteration: </div><div class="line"> <span class="number">2</span></div><div class="line">dataSet: </div><div class="line"> [[ <span class="number">1.</span>  <span class="number">1.</span>  <span class="number">1.</span>]</div><div class="line"> [ <span class="number">2.</span>  <span class="number">1.</span>  <span class="number">1.</span>]</div><div class="line"> [ <span class="number">4.</span>  <span class="number">3.</span>  <span class="number">2.</span>]</div><div class="line"> [ <span class="number">5.</span>  <span class="number">4.</span>  <span class="number">2.</span>]]</div><div class="line">centroids: </div><div class="line"> [[ <span class="number">1.5</span>  <span class="number">1.</span>   <span class="number">1.</span> ]</div><div class="line"> [ <span class="number">4.5</span>  <span class="number">3.5</span>  <span class="number">2.</span> ]]</div><div class="line">minDist: <span class="number">0.5</span></div><div class="line">minDist: <span class="number">0.5</span></div><div class="line">minDist: <span class="number">0.707106781187</span></div><div class="line">minDist: <span class="number">0.707106781187</span></div><div class="line">final result:</div><div class="line">[[ <span class="number">1.</span>  <span class="number">1.</span>  <span class="number">1.</span>]</div><div class="line"> [ <span class="number">2.</span>  <span class="number">1.</span>  <span class="number">1.</span>]</div><div class="line"> [ <span class="number">4.</span>  <span class="number">3.</span>  <span class="number">2.</span>]</div><div class="line"> [ <span class="number">5.</span>  <span class="number">4.</span>  <span class="number">2.</span>]]</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;机器学习概念&quot;&gt;&lt;a href=&quot;#机器学习概念&quot; class=&quot;headerlink&quot; title=&quot;机器学习概念&quot;&gt;&lt;/a&gt;机器学习概念&lt;/h3&gt;&lt;h4 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基
    
    </summary>
    
      <category term="机器学习" scheme="http://yoursite.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="K-means" scheme="http://yoursite.com/tags/K-means/"/>
    
  </entry>
  
  <entry>
    <title>常用排序算法总结</title>
    <link href="http://yoursite.com/2017/06/07/%E7%AE%97%E6%B3%95/%E5%B8%B8%E7%94%A8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/2017/06/07/算法/常用排序算法/</id>
    <published>2017-06-07T00:48:33.825Z</published>
    <updated>2017-06-07T04:48:04.584Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p><img src="http://i.imgur.com/6EOIoOb.jpg" alt=""></p>
<ul>
<li>排序有内部排序和外部排序，内部排序是数据记录在内存中进行排序，而外部排序是因排序的数据很大，一次不能容纳全部的排序记录，在排序过程中需要访问外存。</li>
<li>我们通常所说的排序算法往往指的是内部排序算法，即数据记录在内存中进行排序。</li>
<li>排序算法大体可分为两种：<ul>
<li>比较排序，时间复杂度O(nlogn) ~ O(n^2)<ul>
<li>冒泡排序</li>
<li>选择排序</li>
<li>插入排序</li>
<li>归并排序</li>
<li>堆排序</li>
<li>快速排序 </li>
</ul>
</li>
<li>非比较排序<ul>
<li>计数排序</li>
<li>基数排序</li>
<li>桶排序</li>
</ul>
</li>
</ul>
</li>
<li>常见比较排序算法的性能：<br><img src="http://i.imgur.com/QWG9k99.jpg" alt=""></li>
<li><font color="red">注意：排序算法的稳定性</font></li>
<li><font color="red">排序算法稳定性的简单形式化定义为</font>：<strong>如果Ai = Aj，排序前Ai在Aj之前，排序后Ai还在Aj之前，则称这种排序算法是稳定的。</strong><font color="red">通俗地讲就是保证排序前后两个相等的数的相对顺序不变。</font></li>
<li>对于不稳定的排序算法，只要举出一个实例，即可说明它的不稳定性；而对于稳定的排序算法，必须对算法进行分析从而得到稳定的特性。需要注意的是，排序算法是否为稳定的是由具体算法决定的，不稳定的算法在某种条件下可以变为稳定的算法，而稳定的算法在某种条件下也可以变为不稳定的算法。<ul>
<li>例如，对于冒泡排序，原本是稳定的排序算法，如果将记录交换的条件改成A[i] &gt;= A[i + 1]，则两个相等的记录就会交换位置，从而变成不稳定的排序算法。</li>
</ul>
</li>
<li>其次，说一下排序算法稳定性的好处。<strong>排序算法如果是稳定的，那么从一个键上排序，然后再从另一个键上排序，第一个键排序的结果可以为第二个键排序所用。</strong>基数排序就是这样，先按低位排序，逐次按高位排序，低位排序后元素的顺序在高位也相同时是不会改变的。<h3 id="冒泡排序-Bubble-Sort"><a href="#冒泡排序-Bubble-Sort" class="headerlink" title="冒泡排序(Bubble Sort)"></a>冒泡排序(Bubble Sort)</h3></li>
<li>冒泡排序是一种极其简单的排序算法，也是我所学的第一个排序算法。它重复地走访过要排序的元素，一次比较相邻两个元素，如果他们的顺序错误就把他们调换过来，直到没有元素再需要交换，排序完成。这个算法的名字由来是因为越小(或越大)的元素会经由交换慢慢“浮”到数列的顶端。</li>
<li>冒泡排序算法的运作如下：<ul>
<li>1.比较相邻的元素，如果前一个比后一个大，就把它们两个调换位置。</li>
<li>2.对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。</li>
<li>3.针对所有的元素重复以上的步骤，除了最后一个。</li>
<li>4.持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</li>
</ul>
</li>
<li><p>由于它的简洁，冒泡排序通常被用来对于程序设计入门的学生介绍算法的概念。冒泡排序的代码如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="comment">// 分类 -------------- 内部比较排序</span></div><div class="line"><span class="comment">// 数据结构 ---------- 数组</span></div><div class="line"><span class="comment">// 最差时间复杂度 ---- O(n^2)</span></div><div class="line"><span class="comment">// 最优时间复杂度 ---- 如果能在内部循环第一次运行时,使用一个旗标来表示有无需要交换的可能,可以把最优时间复杂度降低到O(n)</span></div><div class="line"><span class="comment">// 平均时间复杂度 ---- O(n^2)</span></div><div class="line"><span class="comment">// 所需辅助空间 ------ O(1)</span></div><div class="line"><span class="comment">// 稳定性 ------------ 稳定</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">exchange</span><span class="params">(<span class="keyword">int</span> A[], <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span>        <span class="comment">// 交换A[i]和A[j]</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> temp = A[i];</div><div class="line">    A[i] = A[j];</div><div class="line">    A[j] = temp;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> A[] = &#123; <span class="number">6</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">4</span> &#125;;    <span class="comment">// 从小到大冒泡排序</span></div><div class="line">    <span class="keyword">int</span> n = <span class="keyword">sizeof</span>(A) / <span class="keyword">sizeof</span>(<span class="keyword">int</span>);                </div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n - <span class="number">1</span>; j++)            <span class="comment">// 每次最大元素就像气泡一样"浮"到数组的最后</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span> - j; i++)    <span class="comment">// 依次比较相邻的两个元素,使较大的那个向后移</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span> (A[i] &gt; A[i + <span class="number">1</span>])            <span class="comment">// 如果条件改成A[i] &gt;= A[i + 1],则变为不稳定的排序算法</span></div><div class="line">            &#123;</div><div class="line">                exchange(A, i, i + <span class="number">1</span>);        </div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"冒泡排序结果："</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, A[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>上述代码对序列{ 6, 5, 3, 1, 8, 7, 2, 4 }进行冒泡排序的实现过程如下<br><img src="http://i.imgur.com/pCijUVw.gif" alt=""></p>
</li>
<li>使用冒泡排序为一列数字进行排序的过程如下图所示：<br><img src="http://i.imgur.com/iyR1Gr7.gif" alt=""></li>
<li>尽管冒泡排序是最容易了解和实现的排序算法之一，但它对于少数元素之外的数列排序是很没有效率的。</li>
</ul>
<h3 id="冒泡排序的改进：鸡尾酒排序"><a href="#冒泡排序的改进：鸡尾酒排序" class="headerlink" title="冒泡排序的改进：鸡尾酒排序"></a>冒泡排序的改进：鸡尾酒排序</h3><ul>
<li>鸡尾酒排序，也叫定向冒泡排序，是冒泡排序的一种改进。此算法与冒泡排序的不同处在于从低到高然后从高到低，而冒泡排序则仅从低到高去比较序列里的每个元素。他可以得到比冒泡排序稍微好一点的效能。</li>
<li><p>鸡尾酒排序的代码如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="comment">// 分类 -------------- 内部比较排序</span></div><div class="line"><span class="comment">// 数据结构 ---------- 数组</span></div><div class="line"><span class="comment">// 最差时间复杂度 ---- O(n^2)</span></div><div class="line"><span class="comment">// 最优时间复杂度 ---- 如果序列在一开始已经大部分排序过的话,会接近O(n)</span></div><div class="line"><span class="comment">// 平均时间复杂度 ---- O(n^2)</span></div><div class="line"><span class="comment">// 所需辅助空间 ------ O(1)</span></div><div class="line"><span class="comment">// 稳定性 ------------ 稳定</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">exchange</span><span class="params">(<span class="keyword">int</span> A[], <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span>        <span class="comment">// 交换A[i]和A[j]</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> temp = A[i];</div><div class="line">    A[i] = A[j];</div><div class="line">    A[j] = temp;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> A[] = &#123; <span class="number">6</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">4</span> &#125;;   <span class="comment">// 从小到大定向冒泡排序</span></div><div class="line">    <span class="keyword">int</span> n = <span class="keyword">sizeof</span>(A) / <span class="keyword">sizeof</span>(<span class="keyword">int</span>);                </div><div class="line">    <span class="keyword">int</span> left = <span class="number">0</span>;                           <span class="comment">// 初始化边界</span></div><div class="line">    <span class="keyword">int</span> right = n - <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span> (left &lt; right)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = left; i &lt; right; i++)  <span class="comment">// 前半轮,将最大元素放到后面</span></div><div class="line">            <span class="keyword">if</span> (A[i] &gt; A[i + <span class="number">1</span>]) </div><div class="line">            &#123;</div><div class="line">                exchange(A, i, i + <span class="number">1</span>);</div><div class="line">            &#125;</div><div class="line">        right--;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = right; i &gt; left; i--)  <span class="comment">// 后半轮,将最小元素放到前面</span></div><div class="line">            <span class="keyword">if</span> (A[i - <span class="number">1</span>] &gt; A[i]) </div><div class="line">            &#123;</div><div class="line">                exchange(A, i - <span class="number">1</span>, i);</div><div class="line">            &#125;</div><div class="line">        left++;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"鸡尾酒排序结果："</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, A[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>使用鸡尾酒排序为一列数字进行排序的过程如下图所示：<br><img src="http://i.imgur.com/VxfMEh4.gif" alt=""></p>
</li>
<li>以序列(2,3,4,5,1)为例，鸡尾酒排序只需要访问一次序列就可以完成排序，但如果使用冒泡排序则需要四次。但是在乱数序列的状态下，鸡尾酒排序与冒泡排序的效率都很差劲。</li>
</ul>
<h3 id="选择排序-Selection-Sort"><a href="#选择排序-Selection-Sort" class="headerlink" title="选择排序(Selection Sort)"></a>选择排序(Selection Sort)</h3><ul>
<li>选择排序也是一种简单直观的排序算法。</li>
<li>工作原理：<ul>
<li>首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置；</li>
<li>然后，再从剩余未排序元素中继续寻找最小（大）元素，放到已排序序列的末尾。</li>
<li>以此类推，直到所有元素均排序完毕。</li>
</ul>
</li>
<li><p>代码如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="comment">// 分类 -------------- 内部比较排序</span></div><div class="line"><span class="comment">// 数据结构 ---------- 数组</span></div><div class="line"><span class="comment">// 最差时间复杂度 ---- O(n^2)</span></div><div class="line"><span class="comment">// 最优时间复杂度 ---- O(n^2)</span></div><div class="line"><span class="comment">// 平均时间复杂度 ---- O(n^2)</span></div><div class="line"><span class="comment">// 所需辅助空间 ------ O(1)</span></div><div class="line"><span class="comment">// 稳定性 ------------ 不稳定</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">exchange</span><span class="params">(<span class="keyword">int</span> A[], <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span>        <span class="comment">// 交换A[i]和A[j]</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> temp = A[i];</div><div class="line">    A[i] = A[j];</div><div class="line">    A[j] = temp;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> A[] = &#123; <span class="number">8</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">7</span> &#125;; <span class="comment">// 从小到大选择排序</span></div><div class="line">    <span class="keyword">int</span> n = <span class="keyword">sizeof</span>(A) / <span class="keyword">sizeof</span>(<span class="keyword">int</span>);</div><div class="line">    <span class="keyword">int</span> i, j, min;</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= n - <span class="number">2</span>; i++)                <span class="comment">// 已排序序列的末尾</span></div><div class="line">    &#123;</div><div class="line">        min = i;    </div><div class="line">        <span class="keyword">for</span> (j = i + <span class="number">1</span>; j &lt;= n - <span class="number">1</span>; j++)        <span class="comment">// 未排序序列</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span> (A[j] &lt; A[min])<span class="comment">// 依次找出未排序序列中的最小值,存放到已排序序列的末尾</span></div><div class="line">            &#123;</div><div class="line">                min = j;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (min != i)</div><div class="line">        &#123;</div><div class="line">            exchange(A, min, i);    <span class="comment">// 该操作很有可能把稳定性打乱,所以选择排序是不稳定的排序算法</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"选择排序结果："</span>);</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>,A[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>上述代码对序列{ 8, 5, 2, 6, 9, 3, 1, 4, 0, 7 }进行选择排序的实现过程如右图<img src="http://i.imgur.com/R8clqnm.gif" alt=""></p>
</li>
<li>使用选择排序为一列数字进行排序的宏观过程：<img src="http://i.imgur.com/hOudnlu.gif" alt=""></li>
<li><strong>选择排序是不稳定的排序算法，不稳定发生在最小元素与A[i]交换的时刻。</strong></li>
<li>比如序列：{ 5, 8, 5, 2, 9 }，一次选择的最小元素是2，然后把2和第一个5进行交换，从而改变了两个元素5的相对次序。</li>
</ul>
<h3 id="插入排序-Insertion-Sort"><a href="#插入排序-Insertion-Sort" class="headerlink" title="插入排序(Insertion Sort)"></a>插入排序(Insertion Sort)</h3><ul>
<li>插入排序是一种简单直观的排序算法。它的工作原理非常类似于我们抓扑克牌<br><img src="http://i.imgur.com/baMa5f3.jpg" alt=""></li>
<li>对于未排序数据(右手抓到的牌)，在已排序序列(左手已经排好序的手牌)中从后向前扫描，找到相应位置并插入。</li>
<li>插入排序在实现上，通常采用in-place排序（即只需用到O(1)的额外空间的排序），因而在从后向前扫描过程中，需要反复把已排序元素逐步向后挪位，为最新元素提供插入空间。</li>
<li>具体算法描述如下：<ul>
<li>1.从第一个元素开始，该元素可以认为已经被排序</li>
<li>2.取出下一个元素，在已经排序的元素序列中从后向前扫描</li>
<li>3.如果该元素（已排序）大于新元素，将该元素移到下一位置</li>
<li>4.重复步骤3，直到找到已排序的元素小于或者等于新元素的位置</li>
<li>5.将新元素插入到该位置后</li>
<li>6.重复步骤2~5</li>
</ul>
</li>
<li><p>插入排序的代码如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="comment">// 分类 ------------- 内部比较排序</span></div><div class="line"><span class="comment">// 数据结构 ---------- 数组</span></div><div class="line"><span class="comment">// 最差时间复杂度 ---- 最坏情况为输入序列是降序排列的,此时时间复杂度O(n^2)</span></div><div class="line"><span class="comment">// 最优时间复杂度 ---- 最好情况为输入序列是升序排列的,此时时间复杂度O(n)</span></div><div class="line"><span class="comment">// 平均时间复杂度 ---- O(n^2)</span></div><div class="line"><span class="comment">// 所需辅助空间 ------ O(1)</span></div><div class="line"><span class="comment">// 稳定性 ------------ 稳定</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> A[] = &#123; <span class="number">6</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">4</span> &#125;;<span class="comment">// 从小到大插入排序</span></div><div class="line">    <span class="keyword">int</span> n = <span class="keyword">sizeof</span>(A) / <span class="keyword">sizeof</span>(<span class="keyword">int</span>);</div><div class="line">    <span class="keyword">int</span> i, j, get;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; n; i++)             <span class="comment">// 类似抓扑克牌排序</span></div><div class="line">    &#123;</div><div class="line">        get = A[i];                     <span class="comment">// 右手抓到一张扑克牌</span></div><div class="line">        j = i - <span class="number">1</span>;                      <span class="comment">// 拿在左手上的牌总是排序好的</span></div><div class="line">        <span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; A[j] &gt; get)    <span class="comment">// 将抓到的牌与手牌从右向左进行比较</span></div><div class="line">        &#123;</div><div class="line">            A[j + <span class="number">1</span>] = A[j];            <span class="comment">// 如果该手牌比抓到的牌大,就将其右移</span></div><div class="line">            j--;</div><div class="line">        &#125;</div><div class="line">        A[j + <span class="number">1</span>] = get;<span class="comment">// 直到该手牌比抓到的牌小(或二者相等),将抓到的牌插入到该手牌右边(相等元素的相对次序未变,所以插入排序是稳定的)</span></div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"插入排序结果："</span>);</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, A[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>上述代码对序列{ 6, 5, 3, 1, 8, 7, 2, 4 }进行插入排序的实现过程如下<br><img src="http://i.imgur.com/iAcOUKJ.gif" alt=""></p>
</li>
<li>使用插入排序为一列数字进行排序的宏观过程：<br><img src="http://i.imgur.com/o0ds0gp.gif" alt=""></li>
<li>插入排序不适合对于数据量比较大的排序应用。但是，如果需要排序的数据量很小，比如量级小于千，那么插入排序还是一个不错的选择。 插入排序在工业级库中也有着广泛的应用，在STL的sort算法和stdlib的qsort算法中，都将插入排序作为快速排序的补充，用于少量元素的排序（通常为8个或以下）。</li>
</ul>
<h3 id="插入排序的改进：二分插入排序"><a href="#插入排序的改进：二分插入排序" class="headerlink" title="插入排序的改进：二分插入排序"></a>插入排序的改进：二分插入排序</h3><ul>
<li>对于插入排序，如果比较操作的代价比交换操作大的话，可以采用二分查找法来减少比较操作的数目，我们称为二分插入排序</li>
<li><p>代码如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="comment">// 分类 -------------- 内部比较排序</span></div><div class="line"><span class="comment">// 数据结构 ---------- 数组</span></div><div class="line"><span class="comment">// 最差时间复杂度 ---- O(n^2)</span></div><div class="line"><span class="comment">// 最优时间复杂度 ---- O(nlogn)</span></div><div class="line"><span class="comment">// 平均时间复杂度 ---- O(n^2)</span></div><div class="line"><span class="comment">// 所需辅助空间 ------ O(1)</span></div><div class="line"><span class="comment">// 稳定性 ------------ 稳定</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> A[] = &#123; <span class="number">5</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">8</span> &#125;;<span class="comment">// 从小到大二分插入排序</span></div><div class="line">    <span class="keyword">int</span> n = <span class="keyword">sizeof</span>(A) / <span class="keyword">sizeof</span>(<span class="keyword">int</span>);</div><div class="line">    <span class="keyword">int</span> i, j, get, left, right, middle;</div><div class="line">    </div><div class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; n; i++)                 <span class="comment">// 类似抓扑克牌排序</span></div><div class="line">    &#123;</div><div class="line">        get = A[i];                         <span class="comment">// 右手抓到一张扑克牌</span></div><div class="line">        left = <span class="number">0</span>;                           <span class="comment">// 拿在左手上的牌总是排序好的,所以可以用二分法</span></div><div class="line">        right = i - <span class="number">1</span>;                      <span class="comment">// 手牌左右边界进行初始化</span></div><div class="line">        <span class="keyword">while</span> (left &lt;= right)               <span class="comment">// 采用二分法定位新牌的位置</span></div><div class="line">        &#123;</div><div class="line">            middle = (left + right) / <span class="number">2</span>;</div><div class="line">            <span class="keyword">if</span> (A[middle] &gt; get)</div><div class="line">                right = middle - <span class="number">1</span>;</div><div class="line">            <span class="keyword">else</span></div><div class="line">                left = middle + <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (j = i - <span class="number">1</span>; j &gt;= left; j--)    <span class="comment">// 将欲插入新牌位置右边的牌整体向右移动一个单位</span></div><div class="line">        &#123;</div><div class="line">            A[j + <span class="number">1</span>] = A[j];            </div><div class="line">        &#125;</div><div class="line">        A[left] = get;                    <span class="comment">// 将抓到的牌插入手牌</span></div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"二分插入排序结果："</span>);</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, A[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>　当n较大时，二分插入排序的比较次数比直接插入排序的最差情况好得多，但比直接插入排序的最好情况要差，所当以元素初始序列已经接近升序时，直接插入排序比二分插入排序比较次数少。二分插入排序元素移动次数与直接插入排序相同，依赖于元素初始序列。</p>
</li>
</ul>
<h3 id="插入排序的更高效改进：希尔排序-Shell-Sort"><a href="#插入排序的更高效改进：希尔排序-Shell-Sort" class="headerlink" title="插入排序的更高效改进：希尔排序(Shell Sort)"></a>插入排序的更高效改进：希尔排序(Shell Sort)</h3><ul>
<li>希尔排序，也叫递减增量排序，是插入排序的一种更高效的改进版本。希尔排序是不稳定的排序算法。</li>
<li>希尔排序是基于插入排序的以下两点性质而提出改进方法的：<ul>
<li>插入排序在对几乎已经排好序的数据操作时，效率高，即可以达到线性排序的效率</li>
<li>但插入排序一般来说是低效的，因为插入排序每次只能将数据移动一位</li>
</ul>
</li>
<li><font color="red">希尔排序通过将比较的全部元素分为几个区域来提升插入排序的性能。</font>这样可以让一个元素可以一次性地朝最终位置前进一大步。然后算法再取越来越小的步长进行排序，算法的最后一步就是普通的插入排序，但是到了这步，需排序的数据几乎是已排好的了（此时插入排序较快）</li>
<li>假设有一个很小的数据在一个已按升序排好序的数组的末端。如果用复杂度为O(n^2)的排序（冒泡排序或直接插入排序），可能会进行n次的比较和交换才能将该数据移至正确位置。而希尔排序会用较大的步长移动数据，所以小数据只需进行少数比较和交换即可到正确位置。</li>
<li>操作方法：<ul>
<li>选择一个增量序列t1，t2，…，tk，其中ti&gt;tj，tk=1；</li>
<li>按增量序列个数k，对序列进行k趟排序；</li>
<li>每趟排序，根据对应的增量ti，将待排序列分割成若干长度为m 的子序列，分别对各子表进行直接插入排序。仅增量因子为1 时，整个序列作为一个表来处理，表长度即为整个序列的长度。<br><img src="http://i.imgur.com/sStETSA.jpg" alt=""></li>
</ul>
</li>
<li><p>希尔排序的代码如下</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;  </span></span></div><div class="line"></div><div class="line"><span class="comment">// 分类 -------------- 内部比较排序</span></div><div class="line"><span class="comment">// 数据结构 ---------- 数组</span></div><div class="line"><span class="comment">// 最差时间复杂度 ---- 根据步长序列的不同而不同。已知最好的为O(n(logn)^2)</span></div><div class="line"><span class="comment">// 最优时间复杂度 ---- O(n)</span></div><div class="line"><span class="comment">// 平均时间复杂度 ---- 根据步长序列的不同而不同。</span></div><div class="line"><span class="comment">// 所需辅助空间 ------ O(1)</span></div><div class="line"><span class="comment">// 稳定性 ------------ 不稳定</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> A[] = &#123; <span class="number">5</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">8</span> &#125;;<span class="comment">// 从小到大希尔排序</span></div><div class="line">    <span class="keyword">int</span> n = <span class="keyword">sizeof</span>(A) / <span class="keyword">sizeof</span>(<span class="keyword">int</span>);</div><div class="line">    <span class="keyword">int</span> i, j, get;</div><div class="line">    <span class="keyword">int</span> h = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (h &lt;= n)                          <span class="comment">// 生成初始增量</span></div><div class="line">    &#123;</div><div class="line">        h = <span class="number">3</span>*h + <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">while</span> (h &gt;= <span class="number">1</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">for</span> (i = h; i &lt; n; i++)</div><div class="line">        &#123;</div><div class="line">            j = i - h;</div><div class="line">            get = A[i];</div><div class="line">            <span class="keyword">while</span> ((j &gt;= <span class="number">0</span>) &amp;&amp; (A[j] &gt; get))</div><div class="line">            &#123;</div><div class="line">                A[j + h] = A[j];</div><div class="line">                j = j - h;</div><div class="line">            &#125;</div><div class="line">            A[j + h] = get;</div><div class="line">        &#125;</div><div class="line">        h = (h - <span class="number">1</span>) / <span class="number">3</span>;                    <span class="comment">// 递减增量</span></div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"希尔排序结果："</span>);</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, A[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>以23, 10, 4, 1的步长序列进行希尔排序：<br><img src="http://i.imgur.com/R91xG9A.gif" alt=""></p>
</li>
<li><strong>希尔排序是不稳定的排序算法，</strong>虽然一次插入排序是稳定的，不会改变相同元素的相对顺序，但在不同的插入排序过程中，相同的元素可能在各自的插入排序中移动，最后其稳定性就会被打乱。</li>
<li>比如序列：{ 3, 5, 10, 8, 7, 2, 8, 1, 20, 6 }，h=2时分成两个子序列 { 3, 10, 7, 8, 20 } 和  { 5, 8, 2, 1, 6 } ，未排序之前第二个子序列中的8在前面，现在对两个子序列进行插入排序，得到 { 3, 7, 8, 10, 20 } 和 { 1, 2, 5, 6, 8 } ，即 { 3, 1, 7, 2, 8, 5, 10, 6, 20, 8 } ，两个8的相对次序发生了改变。</li>
</ul>
<h3 id="归并排序-Merge-Sort"><a href="#归并排序-Merge-Sort" class="headerlink" title="归并排序(Merge Sort)"></a>归并排序(Merge Sort)</h3><ul>
<li>归并排序是创建在归并操作上的一种有效的排序算法，效率为O(nlogn)，1945年由冯·诺伊曼首次提出。</li>
<li>归并排序的实现分为<strong>递归实现与非递归(迭代)实现。</strong><ul>
<li><strong>递归实现</strong>的归并排序是算法设计中分治策略的典型应用，我们将一个大问题分割成小问题分别解决，然后用所有小问题的答案来解决整个大问题。</li>
<li><strong>非递归(迭代)实现</strong>的归并排序首先进行是两两归并，然后四四归并，然后是八八归并，一直下去直到归并了整个数组。</li>
</ul>
</li>
<li>归并排序算法主要依赖归并(Merge)操作。归并操作指的是将两个已经排序的序列合并成一个序列的操作,归并操作步骤如下：<ul>
<li>申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列</li>
<li>设定两个指针，最初位置分别为两个已经排序序列的起始位置</li>
<li>比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置</li>
<li>重复步骤3直到某一指针到达序列尾</li>
<li>将另一序列剩下的所有元素直接复制到合并序列尾</li>
</ul>
</li>
<li>归并排序示例：<br><img src="http://i.imgur.com/A3DiOyY.jpg" alt=""></li>
<li><p>归并排序的代码如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits.h&gt;                // 包含极限值的头文件，这里用到了无穷大INT_MAX</span></span></div><div class="line"></div><div class="line"><span class="comment">// 分类 -------------- 内部比较排序</span></div><div class="line"><span class="comment">// 数据结构 ---------- 数组</span></div><div class="line"><span class="comment">// 最差时间复杂度 ---- O(nlogn)</span></div><div class="line"><span class="comment">// 最优时间复杂度 ---- O(nlogn)</span></div><div class="line"><span class="comment">// 平均时间复杂度 ---- O(nlogn)</span></div><div class="line"><span class="comment">// 所需辅助空间 ------ O(n)</span></div><div class="line"><span class="comment">// 稳定性 ------------ 稳定</span></div><div class="line"></div><div class="line"><span class="keyword">int</span> L[<span class="number">10</span>];    <span class="comment">// 两个子数组定义成全局变量（辅助存储空间,大小正比于元素的个数）</span></div><div class="line"><span class="keyword">int</span> R[<span class="number">10</span>];</div><div class="line"><span class="comment">//下面两个Merge对比</span></div><div class="line"><span class="comment">//将r[i…m]和r[m +1 …n]归并到辅助数组rf[i…n]  </span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Merge</span><span class="params">(ElemType *r,ElemType *rf, <span class="keyword">int</span> i, <span class="keyword">int</span> m, <span class="keyword">int</span> n)</span>  </span></div><div class="line">&#123;  </div><div class="line">    <span class="keyword">int</span> j,k;  </div><div class="line">    <span class="keyword">for</span>(j=m+<span class="number">1</span>,k=i; i&lt;=m &amp;&amp; j &lt;=n ; ++k)&#123;  </div><div class="line">        <span class="keyword">if</span>(r[j] &lt; r[i]) rf[k] = r[j++];  </div><div class="line">        <span class="keyword">else</span> rf[k] = r[i++];  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">while</span>(i &lt;= m)  rf[k++] = r[i++];  </div><div class="line">    <span class="keyword">while</span>(j &lt;= n)  rf[k++] = r[j++];  </div><div class="line">&#125; </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> A[], <span class="keyword">int</span> left, <span class="keyword">int</span> middle, <span class="keyword">int</span> right)</span><span class="comment">// 合并两个已排好序的数组A[left...middle]和A[middle+1...right]</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> n1 = middle - left + <span class="number">1</span>;     <span class="comment">// 两个数组的大小</span></div><div class="line">    <span class="keyword">int</span> n2 = right - middle;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n1; i++)    <span class="comment">// 把两部分分别拷贝到两个数组中</span></div><div class="line">        L[i] = A[left + i];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n2; j++)</div><div class="line">        R[j] = A[middle + j + <span class="number">1</span>];</div><div class="line">    L[n1] = INT_MAX;                <span class="comment">// 使用无穷大作为哨兵值放在子数组的末尾</span></div><div class="line">    R[n2] = INT_MAX;                <span class="comment">// 这样可以免去检查某个子数组是否已读完的步骤</span></div><div class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> j = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = left; k &lt;= right; k++) <span class="comment">// 依次比较两个子数组中的值，每次取出更小的那一个放入原数组</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (L[i] &lt;= R[j]) </div><div class="line">        &#123;</div><div class="line">            A[k] = L[i];</div><div class="line">            i++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            A[k] = R[j];</div><div class="line">            j++;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">mergesort_recursion</span><span class="params">(<span class="keyword">int</span> A[], <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> <span class="comment">// 递归实现的归并排序(自顶向下)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> middle = (left + right) / <span class="number">2</span>;</div><div class="line">    <span class="keyword">if</span> (left &lt; right)          <span class="comment">// 当待排序的序列长度为1时(left == right)，递归“开始回升”</span></div><div class="line">    &#123;</div><div class="line">        mergesort_recursion(A, left, middle);</div><div class="line">        mergesort_recursion(A, middle + <span class="number">1</span>, right);</div><div class="line">        merge(A, left, middle, right);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">mergesort_iteration</span><span class="params">(<span class="keyword">int</span> A[], <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span>  <span class="comment">// 非递归(迭代)实现的归并排序(自底向上)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> low, middle, high;    <span class="comment">// 子数组索引,前一个为A[low...middle],后一个子数组为A[middle+1...high]</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> size = <span class="number">1</span>; size &lt;= right - left; size *= <span class="number">2</span>) <span class="comment">// 子数组的大小初始为1,每轮翻倍</span></div><div class="line">    &#123;</div><div class="line">        low = left;</div><div class="line">        <span class="keyword">while</span> (low + size - <span class="number">1</span> &lt;= right - <span class="number">1</span> )<span class="comment">// 后一个子数组存在(需要归并)</span></div><div class="line">        &#123;</div><div class="line">            middle = low + size - <span class="number">1</span>;    </div><div class="line">            high = middle + size;        </div><div class="line">            <span class="keyword">if</span> (high &gt; right)            　　<span class="comment">// 后一个子数组大小不足size</span></div><div class="line">                high = right;</div><div class="line">            merge(A, low, middle, high);</div><div class="line">            low = high + <span class="number">1</span>;                　<span class="comment">// 前一个子数组索引向后移动</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> A1[] = &#123; <span class="number">6</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">4</span> &#125;;    <span class="comment">// 从小到大归并排序</span></div><div class="line">    <span class="keyword">int</span> A2[] = &#123; <span class="number">6</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">4</span> &#125;;    </div><div class="line">    <span class="keyword">int</span> n1 = <span class="keyword">sizeof</span>(A1) / <span class="keyword">sizeof</span>(<span class="keyword">int</span>);</div><div class="line">    <span class="keyword">int</span> n2 = <span class="keyword">sizeof</span>(A2) / <span class="keyword">sizeof</span>(<span class="keyword">int</span>);</div><div class="line">    mergesort_recursion(A1, <span class="number">0</span>, n1 - <span class="number">1</span>);       <span class="comment">// 递归实现</span></div><div class="line">    mergesort_iteration(A2, <span class="number">0</span>, n2 - <span class="number">1</span>);       <span class="comment">// 非递归实现</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"递归实现的归并排序结果："</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n1; i++)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>,A1[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"非递归实现的归并排序结果："</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n2; i++)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, A2[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>上述代码对序列{ 6, 5, 3, 1, 8, 7, 2, 4 }进行归并排序的实例如下　<br><img src="http://i.imgur.com/C0RNyjs.gif" alt=""></p>
</li>
<li>使用归并排序为一列数字进行排序的宏观过程：<br><img src="http://i.imgur.com/z5ptfkE.gif" alt=""></li>
</ul>
<h3 id="堆排序-Heapsort"><a href="#堆排序-Heapsort" class="headerlink" title="堆排序(Heapsort)"></a>堆排序(Heapsort)</h3><ul>
<li>堆排序是指利用堆这种数据结构所设计的一种排序算法。堆是一个近似完全二叉树的结构（通常堆是通过一维数组来实现的），并同时满足堆的性质：即子结点的键值总是小于（或者大于）它的父节点。</li>
<li><p>定义堆排序的过程：</p>
<ul>
<li>创建一个堆</li>
<li>把堆顶元素(最大值)和堆尾元素互换</li>
<li>把堆的尺寸缩小1，并调用heapify(A, 0)从新的堆顶元素开始进行堆调整</li>
<li>重复步骤2，直到堆的尺寸为1<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="comment">// 分类 -------------- 内部比较排序</span></div><div class="line"><span class="comment">// 数据结构 ---------- 数组</span></div><div class="line"><span class="comment">// 最差时间复杂度 ---- O(nlogn)</span></div><div class="line"><span class="comment">// 最优时间复杂度 ---- O(nlogn)</span></div><div class="line"><span class="comment">// 平均时间复杂度 ---- O(nlogn)</span></div><div class="line"><span class="comment">// 所需辅助空间 ------ O(1)</span></div><div class="line"><span class="comment">// 稳定性 ------------ 不稳定</span></div><div class="line"></div><div class="line"><span class="keyword">int</span> heapsize;    <span class="comment">// 堆大小</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">exchange</span><span class="params">(<span class="keyword">int</span> A[], <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span>    <span class="comment">// 交换A[i]和A[j]</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> temp = A[i];</div><div class="line">    A[i] = A[j];</div><div class="line">    A[j] = temp;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">heapify</span><span class="params">(<span class="keyword">int</span> A[], <span class="keyword">int</span> i)</span>            <span class="comment">// 堆调整函数(这里使用的是最大堆)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> leftchild = <span class="number">2</span> * i + <span class="number">1</span>;          <span class="comment">// 左孩子索引</span></div><div class="line">    <span class="keyword">int</span> rightchild = <span class="number">2</span> * i + <span class="number">2</span>;         <span class="comment">// 右孩子索引</span></div><div class="line">    <span class="keyword">int</span> largest;                        <span class="comment">// 选出当前结点与左右孩子之中的最大值</span></div><div class="line">    <span class="keyword">if</span> (leftchild &lt; heapsize &amp;&amp; A[leftchild] &gt; A[i])</div><div class="line">        largest = leftchild;</div><div class="line">    <span class="keyword">else</span></div><div class="line">        largest = i;</div><div class="line">    <span class="keyword">if</span> (rightchild &lt; heapsize &amp;&amp; A[rightchild] &gt; A[largest])</div><div class="line">        largest = rightchild;</div><div class="line">    <span class="keyword">if</span> (largest != i)                    </div><div class="line">    &#123;</div><div class="line">        exchange(A, i, largest);        <span class="comment">// 把当前结点和它的最大(直接)子节点进行交换</span></div><div class="line">        heapify(A, largest);            <span class="comment">// 递归调用，继续从当前结点向下进行堆调整</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">buildheap</span><span class="params">(<span class="keyword">int</span> A[], <span class="keyword">int</span> n)</span>          <span class="comment">// 建堆函数</span></span></div><div class="line">&#123;</div><div class="line">    heapsize = n;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = heapsize / <span class="number">2</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) <span class="comment">// 对每一个非叶结点</span></div><div class="line">        heapify(A, i);                  <span class="comment">// 不断的堆调整</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">heapsort</span><span class="params">(<span class="keyword">int</span> A[], <span class="keyword">int</span> n)</span></span></div><div class="line">&#123;</div><div class="line">    buildheap(A, n);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">1</span>; i--)</div><div class="line">    &#123;</div><div class="line">        exchange(A, <span class="number">0</span>, i); <span class="comment">// 将堆顶元素(当前最大值)与堆的最后一个元素互换(该操作很有可能把后面元素的稳定性打乱,所以堆排序是不稳定的排序算法)</span></div><div class="line">        heapsize--;                     <span class="comment">// 从堆中去掉最后一个元素</span></div><div class="line">        heapify(A, <span class="number">0</span>);                  <span class="comment">// 从新的堆顶元素开始进行堆调整</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> A[] = &#123; <span class="number">5</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">8</span> &#125;;<span class="comment">// 从小到大堆排序</span></div><div class="line">    <span class="keyword">int</span> n = <span class="keyword">sizeof</span>(A) / <span class="keyword">sizeof</span>(<span class="keyword">int</span>);</div><div class="line">    heapsort(A, n);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"堆排序结果："</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, A[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>堆排序算法的演示：<br><img src="http://i.imgur.com/BC758BV.gif" alt=""></p>
</li>
<li>动画中在排序过程之前简单的表现了创建堆的过程以及堆的逻辑结构。</li>
<li><strong>堆排序是不稳定的排序算法，不稳定发生在堆顶元素与A[i]交换的时刻。</strong></li>
<li>比如序列：{ 9, 5, 7, 5 }，堆顶元素是9，堆排序下一步将9和第二个5进行交换，得到序列 { 5, 5, 7, 9 }，再进行堆调整得到{ 7, 5, 5, 9 }，重复之前的操作最后得到{ 5, 5, 7, 9 }从而改变了两个5的相对次序。</li>
</ul>
<h3 id="快速排序-Quicksort"><a href="#快速排序-Quicksort" class="headerlink" title="快速排序(Quicksort)"></a>快速排序(Quicksort)</h3><ul>
<li>快速排序是由东尼·霍尔所发展的一种排序算法。在平均状况下，排序n个元素要O(nlogn)次比较。在最坏状况下则需要O(n^2)次比较，但这种状况并不常见。事实上，快速排序通常明显比其他O(nlogn)算法更快，因为它的内部循环可以在大部分的架构上很有效率地被实现出来。</li>
<li>快速排序使用分治策略(Divide and Conquer)来把一个序列分为两个子序列。</li>
<li>步骤为：<ul>
<li>1.在待排序的元素任取一个元素作为基准(通常选第一个元素，但最的选择方法是从待排序元素中随机选取一个作为基准)，称为基准元素；</li>
<li>2.将待排序的元素进行分区，比基准元素大的元素放在它的右边，比其小的放在它的左边；</li>
<li>3.对左右两个分区重复以上步骤直到所有元素都是有序的。</li>
</ul>
</li>
<li>算法的演示：<br><img src="http://i.imgur.com/pu68HcI.png" alt=""></li>
<li><p>算法实现：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickSort</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span> arr[],<span class="keyword">int</span> _left,<span class="keyword">int</span> _right)</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> left = _left;</div><div class="line">        <span class="keyword">int</span> right = _right;</div><div class="line">        <span class="keyword">int</span> temp = <span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span>(left &lt;= right)&#123;   <span class="comment">//待排序的元素至少有两个的情况</span></div><div class="line">            temp = arr[left];  <span class="comment">//待排序的第一个元素作为基准元素</span></div><div class="line">            <span class="keyword">while</span>(left != right)&#123;   <span class="comment">//从左右两边交替扫描，直到left = right</span></div><div class="line"></div><div class="line">                <span class="keyword">while</span>(right &gt; left &amp;&amp; arr[right] &gt;= temp)  </div><div class="line">                     right --;        <span class="comment">//从右往左扫描，找到第一个比基准元素小的元素</span></div><div class="line">                  arr[left] = arr[right];  <span class="comment">//找到这种元素arr[right]后与arr[left]交换</span></div><div class="line"></div><div class="line">                <span class="keyword">while</span>(left &lt; right &amp;&amp; arr[left] &lt;= temp)</div><div class="line">                     left ++;         <span class="comment">//从左往右扫描，找到第一个比基准元素大的元素</span></div><div class="line">                  arr[right] = arr[left];  <span class="comment">//找到这种元素arr[left]后，与arr[right]交换</span></div><div class="line"></div><div class="line">            &#125;</div><div class="line">            arr[right] = temp;    <span class="comment">//基准元素归位</span></div><div class="line">            quickSort(arr,_left,left-<span class="number">1</span>);  <span class="comment">//对基准元素左边的元素进行递归排序</span></div><div class="line">            quickSort(arr, right+<span class="number">1</span>,_right);  <span class="comment">//对基准元素右边的进行递归排序</span></div><div class="line">        &#125;        </div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> array[] = &#123;<span class="number">10</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">8</span>&#125;;</div><div class="line">        System.out.println(<span class="string">"排序之前："</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> element : array)&#123;</div><div class="line">            System.out.print(element+<span class="string">" "</span>);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        quickSort(array,<span class="number">0</span>,array.length-<span class="number">1</span>);</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"\n排序之后："</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> element : array)&#123;</div><div class="line">            System.out.print(element+<span class="string">" "</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>排序结果：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">排序之前：</div><div class="line"><span class="number">10</span> <span class="number">5</span> <span class="number">3</span> <span class="number">1</span> <span class="number">7</span> <span class="number">2</span> <span class="number">8</span> </div><div class="line">排序之后：</div><div class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">5</span> <span class="number">7</span> <span class="number">8</span> <span class="number">10</span></div></pre></td></tr></table></figure>
</li>
<li><p>算法分析：</p>
</li>
<li><p>1.当分区选取的基准元素为待排序元素中的最大或最小值时，为最坏的情况，时间复杂度和直接插入排序的一样，移动次数达到最大值</p>
<pre><code>Cmax = 1+2+...+(n-1) = n*(n-1)/2 = O(n2) 此时最好时间复杂为O(n2) 
</code></pre></li>
<li>2.当分区选取的基准元素为待排序元素中的”中值”，为最好的情况，时间复杂度为O(nlog2n)。</li>
<li>3.快速排序的空间复杂度为O(log2n).</li>
<li>4.当待排序元素类似[6,1,3,7,3]且基准元素为6时，经过分区，形成[1,3,3,6,7],两个3的相对位置发生了改变，所是快速排序是一种不稳定排序。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/6EOIoOb.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;排序有内部排序
    
    </summary>
    
      <category term="算法与数据结构" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="算法与数据结构" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="排序" scheme="http://yoursite.com/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>二叉树 前序、中序、后序、层次遍历及非递归实现 查找、统计个数、比较、求深度的递归实现</title>
    <link href="http://yoursite.com/2017/06/06/%E7%AE%97%E6%B3%95/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>http://yoursite.com/2017/06/06/算法/二叉树/</id>
    <published>2017-06-06T14:05:15.050Z</published>
    <updated>2017-06-06T14:44:43.698Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、基本概念"><a href="#一、基本概念" class="headerlink" title="一、基本概念"></a>一、基本概念</h3><ul>
<li>每个结点最多有两棵子树，左子树和右子树，次序不可以颠倒。<br>性质：<ul>
<li>1、非空二叉树的第n层上至多有2^(n-1)个元素。</li>
<li>2、深度为h的二叉树至多有2^h-1个结点。</li>
</ul>
</li>
<li>满二叉树：所有终端都在同一层次，且非终端结点的度数为2<ul>
<li>在满二叉树中若其深度为h，则其所包含的结点数必为2^h-1。</li>
</ul>
</li>
<li>完全二叉树：除了最大的层次即成为一颗满二叉树且层次最大那层所有的结点均向左靠齐，即集中在左面的位置上，不能有空位置。<ul>
<li>对于完全二叉树，设一个结点为i则其父节点为i/2，2i为左子节点，2i+1为右子节点。</li>
</ul>
</li>
</ul>
<h3 id="二、存储结构"><a href="#二、存储结构" class="headerlink" title="二、存储结构"></a>二、存储结构</h3><h4 id="顺序存储："><a href="#顺序存储：" class="headerlink" title="顺序存储："></a>顺序存储：</h4><pre><code>- 将数据结构存在一块固定的数组中
</code></pre><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LENGTH 100  </span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> datatype;  </div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span>  </div><div class="line">    datatype data;  </div><div class="line">    <span class="keyword">int</span> lchild,rchild;  </div><div class="line">    <span class="keyword">int</span> parent;  </div><div class="line">&#125;Node;  </div><div class="line">  </div><div class="line">Node tree[LENGTH];  </div><div class="line"><span class="keyword">int</span> length;  </div><div class="line"><span class="keyword">int</span> root;  </div><div class="line">```  </div><div class="line">虽然在遍历速度上有一定的优势，但因所占空间比较大，是非主流二叉树。二叉树通常以链式存储。</div><div class="line">#### 链式存储：</div><div class="line">```cpp</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> datatype;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BinNode</span>&#123;</span></div><div class="line">    datatype data;</div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BinNode</span>* <span class="title">lchild</span>;</span></div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BinNode</span>* <span class="title">rchild</span>;</span></div><div class="line">&#125;BinNode;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> BinNode* bintree;          <span class="comment">//bintree本身是个指向结点的指针</span></div></pre></td></tr></table></figure>
<h3 id="三、二叉树的遍历"><a href="#三、二叉树的遍历" class="headerlink" title="三、二叉树的遍历"></a>三、二叉树的遍历</h3><ul>
<li>遍历即将树的所有结点访问且仅访问一次。按照根节点位置的不同分为前序遍历，中序遍历，后序遍历。<ul>
<li>前序遍历：根节点-&gt;左子树-&gt;右子树</li>
<li>中序遍历：左子树-&gt;根节点-&gt;右子树</li>
<li>后序遍历：左子树-&gt;右子树-&gt;根节点</li>
</ul>
</li>
<li><p>例如：求下面树的三种遍历</p>
<p><img src="http://i.imgur.com/oxgE506.png" alt=""></p>
<ul>
<li>前序遍历：abdefgc</li>
<li>中序遍历：debgfac</li>
<li>后序遍历：edgfbca</li>
</ul>
</li>
</ul>
<h3 id="遍历的实现"><a href="#遍历的实现" class="headerlink" title="遍历的实现"></a>遍历的实现</h3><h4 id="递归实现"><a href="#递归实现" class="headerlink" title="递归实现"></a>递归实现</h4><ul>
<li>以前序遍历为例，其他的只是输出的位置稍有不同<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">preorder</span><span class="params">(bintree t)</span></span>&#123;  </div><div class="line">    <span class="keyword">if</span>(t)&#123;  </div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%c "</span>,t-&gt;data);  </div><div class="line">        preorder(t-&gt;lchild);  </div><div class="line">        preorder(t-&gt;rchild);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="非递归的实现"><a href="#非递归的实现" class="headerlink" title="非递归的实现"></a>非递归的实现</h4><p>因为当遍历过根节点之后还要回来，所以必须将其存起来。考虑到后进先出的特点，选用栈存储。数量确定，以顺序栈存储。</p>
<h5 id="定义栈"><a href="#定义栈" class="headerlink" title="定义栈"></a>定义栈</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> SIZE 100</span></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">seqstack</span>&#123;</span>  </div><div class="line">    bintree data[SIZE];  </div><div class="line">    <span class="keyword">int</span> tag[SIZE];   <span class="comment">//为后续遍历准备的  </span></div><div class="line">    <span class="keyword">int</span> top;     <span class="comment">//top为数组的下标  </span></div><div class="line">&#125;seqstack;  </div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(seqstack *s,bintree t)</span></span>&#123;  </div><div class="line">  </div><div class="line">    <span class="keyword">if</span>(s-&gt;top == SIZE)&#123;  </div><div class="line">        <span class="built_in">printf</span>(<span class="string">"the stack is full\n"</span>);  </div><div class="line">    &#125;<span class="keyword">else</span>&#123;  </div><div class="line">        s-&gt;top++;  </div><div class="line">        s-&gt;data[s-&gt;top]=t;  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="function">bintree <span class="title">pop</span><span class="params">(seqstack *s)</span></span>&#123;  </div><div class="line">    <span class="keyword">if</span>(s-&gt;top == <span class="number">-1</span>)&#123;  </div><div class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;  </div><div class="line">    &#125;<span class="keyword">else</span>&#123;  </div><div class="line">        s-&gt;top--;  </div><div class="line">        <span class="keyword">return</span> s-&gt;data[s-&gt;top+<span class="number">1</span>];  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line">``` </div><div class="line">##### 前序遍历</div><div class="line">```<span class="function">cpp</span></div><div class="line"><span class="keyword">void</span> <span class="title">preorder_dev</span><span class="params">(bintree t)</span>&#123;  </div><div class="line">    seqstack s;  </div><div class="line">    s.top = <span class="number">-1</span>;     <span class="comment">//因为top在这里表示了数组中的位置，所以空为-1  </span></div><div class="line">    <span class="keyword">if</span>(!t)&#123;  </div><div class="line">        <span class="built_in">printf</span>(<span class="string">"the tree is empty\n"</span>);  </div><div class="line">    &#125;<span class="keyword">else</span>&#123;  </div><div class="line">        <span class="keyword">while</span>(t || s.stop != <span class="number">-1</span>)&#123;  </div><div class="line">            <span class="keyword">while</span>(t)&#123;    <span class="comment">//只要结点不为空就应该入栈保存，与其左右结点无关      </span></div><div class="line">                <span class="built_in">printf</span>(<span class="string">"%c "</span>,t-&gt;data);  </div><div class="line">                push(&amp;s,t);  </div><div class="line">                t= t-&gt;lchild;  </div><div class="line">            &#125;  </div><div class="line">            t=pop(&amp;s);  </div><div class="line">            t=t-&gt;rchild;  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">midorder</span><span class="params">(bintree t)</span></span>&#123;  </div><div class="line">    seqstack s;  </div><div class="line">    s.top = <span class="number">-1</span>;  </div><div class="line">    <span class="keyword">if</span>(!t)&#123;  </div><div class="line">        <span class="built_in">printf</span>(<span class="string">"the tree is empty!\n"</span>);  </div><div class="line">    &#125;<span class="keyword">else</span>&#123;  </div><div class="line">        <span class="keyword">while</span>(t ||s.top != <span class="number">-1</span>)&#123;  </div><div class="line">            <span class="keyword">while</span>(t)&#123;  </div><div class="line">                push(&amp;s,t);  </div><div class="line">                t= t-&gt;lchild;  </div><div class="line">            &#125;  </div><div class="line">            t=pop(&amp;s);  </div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%c "</span>,t-&gt;data);  </div><div class="line">            t=t-&gt;rchild;  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>转自：<a herf="http://blog.csdn.net/fansongy/article/details/6798278">数据结构（六）——二叉树 前序、中序、后序、层次遍历及非递归实现 查找、统计个数、比较、求深度的递归</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、基本概念&quot;&gt;&lt;a href=&quot;#一、基本概念&quot; class=&quot;headerlink&quot; title=&quot;一、基本概念&quot;&gt;&lt;/a&gt;一、基本概念&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;每个结点最多有两棵子树，左子树和右子树，次序不可以颠倒。&lt;br&gt;性质：&lt;ul&gt;
&lt;li&gt;1、非空
    
    </summary>
    
      <category term="算法与数据结构" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="算法与数据结构" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="二叉树" scheme="http://yoursite.com/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>数组相关算法（局部极小值、第一个缺失的正整数、元素最大间距离(分桶)、只出现1次的数、众数问题、前缀和的应用）</title>
    <link href="http://yoursite.com/2017/06/06/%E7%AE%97%E6%B3%95/%E6%95%B0%E7%BB%84%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/2017/06/06/算法/数组相关算法/</id>
    <published>2017-06-06T12:23:17.786Z</published>
    <updated>2017-06-06T13:49:13.135Z</updated>
    
    <content type="html"><![CDATA[<h3 id="数组简介"><a href="#数组简介" class="headerlink" title="数组简介"></a>数组简介</h3><ul>
<li>数组(array)<ul>
<li>java : [], ArrayList </li>
<li>C++ : STL vector, []</li>
<li>C：  只有[]</li>
<li>理解：输入的数组通常理解为集合，我们自己可以排序，查找</li>
<li>注意<ul>
<li>C++ STL中vector的一种实现</li>
<li>数组下标是一种特殊的hash…做计数</li>
<li>理解数组与map</li>
<li>给数组“顺序”<h3 id="局部极小值"><a href="#局部极小值" class="headerlink" title="局部极小值"></a>局部极小值</h3></li>
</ul>
</li>
</ul>
</li>
<li>一个给定的不包含相同元素的整数数组，每个，局部极小值的定义是一个值比左右相邻的（如果存在）都小的值，求它的一个局部最小值 <h4 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h4></li>
<li>局部最小值的存在性，全部数组的最小值显然是一个解。 O(n)?</li>
<li>我们规定数组下标a[1..n]，并定义a[0] = a[n + 1] = ∞, 我们有a[1] &lt; a[0], a[n] &lt; a[n + 1]</li>
<li>结论： 子数组a[x..y] 若 a[x] &lt; a[x – 1] , a[y] &lt; a[y + 1]，则它包含一个局部极小值<h4 id="二分法"><a href="#二分法" class="headerlink" title="二分法"></a>二分法</h4></li>
<li>mid = (x + y) / 2,二分，两个子数组a[x..mid], a[mid + 1..y]<ul>
<li>若a[mid] &lt; a[mid + 1], 则子数组a[x..mid]满足a[x] &lt; a[x - 1], a[mid] &lt; a[mid + 1]</li>
<li>反之a[mid] &gt; a[mid + 1], 则子数组a[mid + 1..y]满足a[mid + 1] &lt; a[mid], a[y] &lt; a[y + 1]</li>
</ul>
</li>
<li>复杂度 O(logn)</li>
</ul>
<h3 id="第一个缺失的正整数"><a href="#第一个缺失的正整数" class="headerlink" title="第一个缺失的正整数"></a>第一个缺失的正整数</h3><ul>
<li>给一个数组，找到从1开始第一个不在里面的正整数。</li>
<li>例如［3,4,-1,1]输出2。<ul>
<li>分析: 数组下标从0开始</li>
<li>让a[i] == i + 1<ul>
<li>每次循环</li>
<li>要么i ＋ 1</li>
<li>要么n – 1</li>
<li>要么有一个数</li>
<li>被放到正确的位置</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><ul>
<li>排序复杂度 O(logn)<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>&#123;</span></div><div class="line">    <span class="keyword">public</span>:</div><div class="line">        <span class="function"><span class="keyword">int</span> <span class="title">firstMissingPositive</span><span class="params">(<span class="keyword">int</span> A[],<span class="keyword">int</span> n)</span></span>&#123;</div><div class="line">            <span class="comment">//(0...i) is (1...i)</span></div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;)&#123;</div><div class="line">                <span class="keyword">if</span>(A[i]==i+<span class="number">1</span>)&#123;</div><div class="line">                    ++i;</div><div class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>((A[i]&lt;=i)||(A[i]&gt;n)||A(A[A[i]<span class="number">-1</span>]==A[i]))&#123;</div><div class="line">                    <span class="comment">//小于等于i   大于n(最大值)    重复A[2]=5 A[5-1]=A[4]=A[2]</span></div><div class="line">                    A[i]=A[--n];<span class="comment">//删除A[i],并把结尾的数交换到i的位置</span></div><div class="line">                &#125;<span class="keyword">else</span>&#123;</div><div class="line">                    <span class="comment">// A[2] A[5-1]=A[4]=A[2]</span></div><div class="line">                    swap(A[i],A[A[i]<span class="number">-1</span>]);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="元素最大间距离"><a href="#元素最大间距离" class="headerlink" title="元素最大间距离"></a>元素最大间距离</h3><ul>
<li>给定一个整数数组(n &gt; 1)，求把这些整数表示在数轴上，相邻两个数差的最大值。<h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4></li>
<li>显然排序是一个思想。有更好的方法么</li>
<li>最大值x, 最小值y, 如果x == y显然答案是0</li>
<li>把数放进(n + 1)个桶<ul>
<li>每个桶大小是d = (x – y) / (n + 1) （浮点数）</li>
<li>每个桶区间是[y + i <em> d, y + (i + 1) </em> d) (i=0,1,..n)<ul>
<li>注意是左闭右开的区间，最后一个桶是双闭区间</li>
<li>最小的数在0号桶里，最大的数在n号桶里</li>
<li>第一个桶非空，最后一个桶非空</li>
</ul>
</li>
</ul>
</li>
<li>中间有空桶，空桶左右两侧肯定有元素</li>
<li>最大间隙出现在一个非空桶的最大值和下一个非空桶的最小值之间</li>
<li>如何判断数r在哪个桶里？<ul>
<li>(r – y) * (n + 1) / (x – y) （整数运算），注意r == x的时候，答案取n</li>
<li>记录每个桶的最大值和最小值即可，时间空间都是O(n)<h4 id="代码实现（Java）"><a href="#代码实现（Java）" class="headerlink" title="代码实现（Java）"></a>代码实现（Java）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxGap</span><span class="params">(<span class="keyword">int</span>[] nums)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(nums==<span class="keyword">null</span> || nums.length&lt;<span class="number">2</span>)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> len = nums.length;</div><div class="line">    <span class="keyword">int</span> min = Integer.MAX_VALUE;</div><div class="line">    <span class="keyword">int</span> max = Integer.MIN_VALUE;</div><div class="line">    <span class="comment">//扫描一遍数组，得到最大值max，最小值min   复杂度O(n)</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</div><div class="line">        min = Math.min(min,nums[i]);</div><div class="line">        max = Math.max(max,nums[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(min==max)&#123;<span class="comment">//说明数组中所有值相等</span></div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//开辟len+1段分区</span></div><div class="line">    <span class="keyword">boolean</span>[] hasNum = <span class="keyword">new</span> <span class="keyword">boolean</span>[len + <span class="number">1</span>];</div><div class="line">    <span class="keyword">int</span> maxs = <span class="keyword">new</span> <span class="keyword">int</span>[len+<span class="number">1</span>];</div><div class="line">    <span class="keyword">int</span> mins = <span class="keyword">new</span> <span class="keyword">int</span>[len+<span class="number">1</span>];</div><div class="line">    <span class="keyword">int</span> bid = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</div><div class="line">        bid = bucket(nums[i],len,min,max);<span class="comment">//算出桶号</span></div><div class="line">        mins[bid] = hasNum[bid] ? Math.min(mins[bid],nums[i]):nums[i];</div><div class="line">        maxs[bid] = hasNum[bid] ? Math.max(mins[bid],nums[i]):nums[i];</div><div class="line">        hasNum[bid] = <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> lastMax = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(i&lt;=len)&#123;</div><div class="line">        <span class="keyword">if</span>(hasNum[i++])&#123;<span class="comment">//找到第一个不为空的通</span></div><div class="line">            lastMax = maxs[i-<span class="number">1</span>];</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(;i&lt;=len;i++)&#123;</div><div class="line">        <span class="keyword">if</span>(hasNum[i])&#123;</div><div class="line">            res = Math.max(res,mins[i]-lastMax);</div><div class="line">            lastMax = maxs[i];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">&#125;</div><div class="line"><span class="comment">//使用long类型是为了防止相乘时溢出</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">bucket</span><span class="params">(<span class="keyword">long</span> num,<span class="keyword">long</span> len,<span class="keyword">long</span> min,<span class="keyword">long</span> max)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> (<span class="keyword">int</span>)((num - min)*len/(max-min));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h3 id="只出现1次的数"><a href="#只出现1次的数" class="headerlink" title="只出现1次的数"></a>只出现1次的数</h3><ul>
<li>一个数组，所有元素都出现了两次，只有两个数只出现了一次，求这两个数。<h4 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h4></li>
<li>异或：相同为0，不同为1</li>
<li>所有数做异或，则出现两个次的数相抵消，那么最终的结果就是那两个出现一次的数x和y的异或结果，即x xor y ，且这个值非0</li>
<li>既然x xor y非0，我们可以找到二进制表示中某一个为1的位（bit）（例如最低位），把所有的数按这位为1和为0分开。</li>
<li>在该位为0和为1的数中，各有一个数只出现一次。 （一个是x，另一个是y)<h4 id="代码-分析"><a href="#代码-分析" class="headerlink" title="代码+分析"></a>代码+分析</h4></li>
<li><p>第一步：我们需要找到一个条件，给这两个出现过一次的数找出可以区分的条件。相同的数异或等到的结果0，那么整个序列异或的结果就是这两个出现过一次的数的异或。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">findOnlyNum1</span><span class="params">(<span class="keyword">int</span>[] array)</span></span>&#123;  </div><div class="line">    <span class="keyword">int</span> result = <span class="number">0</span>;  </div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ;i&lt;array.length;i++)&#123;  </div><div class="line">        result^=array[i];  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">return</span> result;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>第二步：找出他们的不同之处，前面我们讲过，异或按位操作是相同的为0 ，不同的为1，那么这两个数异或的结果转换成2进制时，低位出现第一个1是就可以区分他们了。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">String binaryResult = Integer.toBinaryString(result); </div><div class="line"><span class="keyword">int</span> index = binaryResult.length() - (binaryResult.lastIndexOf(<span class="string">"1"</span>)+<span class="number">1</span>);</div></pre></td></tr></table></figure>
</li>
</ul>
<p><img src="http://i.imgur.com/9RyJ7gk.png" alt=""></p>
<ul>
<li>第三步：在index位为1的分为一组，为0的分为一组，将序列划分为两个序列:</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> result1 = <span class="number">0</span>;  </div><div class="line"><span class="keyword">int</span> result2 = <span class="number">0</span>;  </div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;array.length;i++)&#123;  </div><div class="line">    <span class="keyword">if</span>(((array[i]&gt;&gt;index)&amp;<span class="number">1</span>)==<span class="number">1</span>)&#123;  </div><div class="line">        result1^= array[i];  </div><div class="line">    &#125;<span class="keyword">else</span>&#123;  </div><div class="line">        result2^=array[i];  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="代码（C-）"><a href="#代码（C-）" class="headerlink" title="代码（C++）"></a>代码（C++）</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_first_1_bit</span><span class="params">( <span class="keyword">int</span> res )</span> <span class="comment">// 每次移位(&gt;&gt;1)后若不能%2 ！= 0 ，则找到 </span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> n = <span class="number">0</span>;        <span class="comment">// 从第0位开始</span></div><div class="line">    </div><div class="line">    <span class="keyword">while</span>( res )</div><div class="line">    &#123;</div><div class="line">           <span class="keyword">if</span>( res % <span class="number">2</span> == <span class="number">1</span> )</div><div class="line">           &#123;</div><div class="line">               <span class="keyword">break</span>;</div><div class="line">           &#125;</div><div class="line">           <span class="keyword">else</span></div><div class="line">           &#123;</div><div class="line">               res  = res &gt;&gt; <span class="number">1</span>;</div><div class="line">			   n++;</div><div class="line">           &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> n;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">judge_N_bit</span><span class="params">( <span class="keyword">int</span> num, <span class="keyword">int</span> N )</span>  <span class="comment">// N 从0开始 </span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">return</span> ( num &amp; ( <span class="number">1</span> &lt;&lt; N ) );	<span class="comment">// 取第N位</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">long</span> <span class="keyword">int</span> n, i;</div><div class="line">    <span class="keyword">int</span> *num, res, N, t1, t2;</div><div class="line">    </div><div class="line">    <span class="keyword">while</span>( <span class="built_in">scanf</span>(<span class="string">"%ld"</span>, &amp;n) != EOF )</div><div class="line">    &#123;</div><div class="line">           num  = ( <span class="keyword">int</span>* )<span class="built_in">malloc</span>( <span class="keyword">sizeof</span>( <span class="keyword">int</span> ) * n );</div><div class="line">           </div><div class="line">           <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;res);</div><div class="line">           num[<span class="number">0</span>] = res;</div><div class="line">           </div><div class="line">           <span class="keyword">for</span>( i = <span class="number">1</span>; i &lt; n; i++ )</div><div class="line">           &#123;</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;num[i]);</div><div class="line">                res ^= num[i];</div><div class="line">           &#125;</div><div class="line">           <span class="comment">//</span></div><div class="line">           <span class="comment">// 第一次出现1的位置！</span></div><div class="line">           N = find_first_1_bit( res ); </div><div class="line"></div><div class="line">           t1 = <span class="number">0</span>;</div><div class="line">		   t2 = <span class="number">0</span>;</div><div class="line"></div><div class="line">           <span class="keyword">for</span>( i = <span class="number">0</span>; i &lt; n; i++ )</div><div class="line">           &#123;</div><div class="line">                <span class="keyword">if</span>( judge_N_bit( num[i], N ) ) <span class="comment">// 若第N位为1 </span></div><div class="line">                &#123;</div><div class="line">                   t2 ^= num[i];</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span>   <span class="comment">// 为0 </span></div><div class="line">                &#123;</div><div class="line">					t1 ^= num[i];</div><div class="line">                &#125;</div><div class="line">           &#125;</div><div class="line"></div><div class="line">           <span class="keyword">if</span>( t1 &lt; t2 )</div><div class="line">           &#123;</div><div class="line">               <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, t1, t2);</div><div class="line">           &#125;</div><div class="line">           <span class="keyword">else</span></div><div class="line">           &#123;</div><div class="line">               <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, t2, t1);</div><div class="line">           &#125;</div><div class="line">           </div><div class="line">           <span class="built_in">free</span>( num );</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="众数问题"><a href="#众数问题" class="headerlink" title="众数问题"></a>众数问题</h3><ul>
<li>找出超过一半的数<h4 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h4></li>
<li>众数出现的次数大于其他所有数出现次数之和</li>
<li>每次扔掉两个不同的数，众数不变<ul>
<li>如果扔掉一个众数，和一个非众数</li>
<li>如果扔掉两个非众数</li>
</ul>
</li>
<li>如何实现？和x不同就扔掉，表示扔掉了一个x和一个y?<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> count = <span class="number">0</span>, x;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) </div><div class="line">		<span class="keyword">if</span> (count == <span class="number">0</span>) &#123;x = a[i]; count = <span class="number">1</span>;&#125;</div><div class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (x == a[i]) ++count;</div><div class="line">        <span class="keyword">else</span> --count;</div><div class="line"><span class="comment">//注意有的题目要数一下x出现次数是否确实超过一半。（众数可能不存在）</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h4><ul>
<li>方法1：hashmap<ul>
<li>通过遍历数组，将数组每个数都通过hashmap来统计其出现的个数，如果某个数个数超过一半，则为众数。时间空间复杂度均为O(n)</li>
</ul>
</li>
<li>方法2：Moore Voting Algorithm<ul>
<li>众数存在的情况下，每次扔掉两个不同的数，众数不变，最终剩下的数一定是众数。<ul>
<li>扔掉一个众数和一个非众数，众数不变</li>
<li>扔掉两个非众数，众数不变</li>
</ul>
</li>
<li>时间复杂度O(n)，空间复杂度O(1)</li>
</ul>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="comment">// hash_map method</span></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">majorityElement1</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;num)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> n =num.size();</div><div class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>) <span class="keyword">return</span> num[<span class="number">0</span>];</div><div class="line">        <span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; m;</div><div class="line">        <span class="keyword">for</span>(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it=num.begin();it!=num.end();it++)&#123;</div><div class="line">            m[*it]+=<span class="number">1</span>;</div><div class="line">            <span class="keyword">if</span>(m[*it] &gt; <span class="built_in">floor</span>(n/<span class="number">2</span>))</div><div class="line">                <span class="keyword">return</span> *it;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// moore voting algorithm</span></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">majorityElement2</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;num)</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> n=num.size();</div><div class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>) <span class="keyword">return</span> num[<span class="number">0</span>];</div><div class="line">        <span class="keyword">int</span> count=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> x;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</div><div class="line">            <span class="keyword">if</span>(count==<span class="number">0</span>)&#123;</div><div class="line">                x=num[i];</div><div class="line">                count=<span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(x==num[i])</div><div class="line">                ++count;</div><div class="line">            <span class="keyword">else</span></div><div class="line">                --count;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        count=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</div><div class="line">            <span class="keyword">if</span>(num[i]==x)</div><div class="line">                count++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(count&gt;<span class="built_in">floor</span>(n/<span class="number">2</span>))</div><div class="line">            <span class="keyword">return</span> x;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> A[]=&#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">2</span>&#125;;</div><div class="line">    <span class="keyword">int</span> n=<span class="keyword">sizeof</span>(A)/<span class="keyword">sizeof</span>(A[<span class="number">0</span>]);</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; nums(A,A+n);</div><div class="line">    Solution s;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;s.majorityElement1(nums)&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;s.majorityElement2(nums)&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="前缀和的应用"><a href="#前缀和的应用" class="headerlink" title="前缀和的应用"></a>前缀和的应用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">    <span class="comment">/*</span></div><div class="line">     * 题目描述：给定一个数组a[N],我们希望构造数组b[N]，</div><div class="line">     * 其中b[i]=a[0]*a[1]*...*a[N-1]/a[i]。</div><div class="line">     * 在构造过程：不允许使用除法；要求：O(1)空间复杂度和O(n)时间复杂度；</div><div class="line">     * 除遍历计数器与a[N] b[N]外，不可使用新的变量(包括栈临时变量、对空间和全局静态变量等)；</div><div class="line">     */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConstructeAarry</span></span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConstructeAarrySolution</span><span class="params">(<span class="keyword">double</span>[] nums)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> length = nums.Length;</div><div class="line">        <span class="keyword">double</span>[] result = <span class="keyword">new</span> <span class="keyword">double</span>[length];<span class="comment">//存放结果</span></div><div class="line">        <span class="comment">//先计算后缀积</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</div><div class="line">        &#123;</div><div class="line">            result[i] = nums[i] * (i == length - <span class="number">1</span> ? <span class="number">1</span> : result[i + <span class="number">1</span>]);</div><div class="line">         &#125;</div><div class="line">        <span class="comment">//再计算前缀积，就会得出结果</span></div><div class="line">         <span class="keyword">double</span> j=<span class="number">1.0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; j *= nums[i++])</div><div class="line">        &#123;</div><div class="line">            result[i] = j * (i == length - <span class="number">1</span> ? <span class="number">1</span> : result[i + <span class="number">1</span>]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;数组简介&quot;&gt;&lt;a href=&quot;#数组简介&quot; class=&quot;headerlink&quot; title=&quot;数组简介&quot;&gt;&lt;/a&gt;数组简介&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;数组(array)&lt;ul&gt;
&lt;li&gt;java : [], ArrayList &lt;/li&gt;
&lt;li&gt;C++ : S
    
    </summary>
    
      <category term="算法与数据结构" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="算法与数据结构" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>字符串相关算法（0-1交换、字符替换和复制、交换星号、子串变位词、单词翻转 ）</title>
    <link href="http://yoursite.com/2017/06/06/%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>http://yoursite.com/2017/06/06/算法/字符串/</id>
    <published>2017-06-06T08:04:58.762Z</published>
    <updated>2017-06-06T08:06:18.428Z</updated>
    
    <content type="html"><![CDATA[<h4 id="0-1交换"><a href="#0-1交换" class="headerlink" title="0-1交换"></a>0-1交换</h4><ul>
<li>把一个0-1串（只包含0和1的串）进行排序，你<br>可以交换任意两个位置，问最少交换的次数<br>？<h5 id="分析：-快排partition-最左边的那些0和最右边的"><a href="#分析：-快排partition-最左边的那些0和最右边的" class="headerlink" title="分析： 快排partition?最左边的那些0和最右边的"></a>分析： 快排partition?最左边的那些0和最右边的</h5>那些1都可以不管<ul>
<li>o 00…0001…….0111….1<h5 id="伪代码实现"><a href="#伪代码实现" class="headerlink" title="伪代码实现"></a>伪代码实现</h5><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">void exchangeo1&#123;</div><div class="line">    int answer = 0;</div><div class="line">    for(int i=-,j=len-1;i&lt;j;++i,--j)&#123;</div><div class="line">        for(;(i&lt;j)&amp;&amp;(a[i]=='0');++i);</div><div class="line">        for(;(j&gt;i)&amp;&amp;(a[j]=='');--j);</div><div class="line">        if(i&lt;j) ++answer;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h4 id="字符替换和复制"><a href="#字符替换和复制" class="headerlink" title="字符替换和复制"></a>字符替换和复制</h4><ul>
<li><p>删除一个字符串所有的a,并且复制所有的b。注：字符数<br>组足够大</p>
<h5 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h5><ul>
<li>先删除a,可以利用原来字符串的空间<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">int</span> n = <span class="number">0</span>, numb = <span class="number">0</span>;</div><div class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;s[i];++i)&#123;</div><div class="line">     <span class="keyword">if</span>(s[i]!=<span class="string">'a'</span>)&#123;s[n++]=s[i];&#125;</div><div class="line">     <span class="keyword">if</span>(s[i]==<span class="string">'b'</span>)&#123;++numb;&#125;</div><div class="line"> &#125;</div><div class="line">s[n]=<span class="number">0</span>;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>再复制b，注意字符串要加长</p>
<ul>
<li>先计算字符串里有几个b，得到复制后的长度</li>
<li><font color="red">然后“倒着”复制——惯用技巧</font><h5 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> newLength = n+numb;</div><div class="line">s[newLength] = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=newLength,j=n<span class="number">-1</span>;j&gt;=<span class="number">0</span>;--j)&#123;</div><div class="line">    s[i--] = s[j];</div><div class="line">    <span class="keyword">if</span>(s[j]==<span class="string">'b'</span>)s[i--]=<span class="string">'b'</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h4 id="交换星号"><a href="#交换星号" class="headerlink" title="交换星号"></a>交换星号</h4><ul>
<li>一个字符串只包含<em>和数字，请把它的</em><br>号都放开头。<h5 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h5><h6 id="方法1-快排partition——数字相对顺序会变化"><a href="#方法1-快排partition——数字相对顺序会变化" class="headerlink" title="方法1 快排partition——数字相对顺序会变化"></a>方法1 快排partition——<font color="red">数字相对顺序会变化</font></h6><ul>
<li>循环不变式： [0..i – 1]都是*, [i..j – 1]是数字，[j..n –<br>1]未探测</li>
</ul>
</li>
<li><p>代码实现</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;j&lt;n;++j)&#123;</div><div class="line">    <span class="keyword">if</span>(s[j]==<span class="string">'*'</span>)swap(s[i++],s[j])</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>实现样例（样例 <em>01</em>2*4）</p>
<ul>
<li>i＝0, j = 0, <em>01</em>2*4 交换s[0]，不变，i = 1</li>
<li>i＝1, j = 1, <em>01</em>2*4 不变</li>
<li>i = 1, j = 2, <em>01</em>2*4 不变</li>
<li>i＝1, j = 3, 交换s[1],s[3]变为 <em>*102</em>4 并且i ＝ 2</li>
<li>i＝2, j = 4，<em>*102</em>4不变</li>
<li>i = 2, j = 5, 交换s[2],s[5]变为<em>*</em>0214 且i = 3</li>
<li>再往后没变化了</li>
</ul>
</li>
</ul>
<h6 id="方法2-数字相对顺序不变"><a href="#方法2-数字相对顺序不变" class="headerlink" title="方法2 数字相对顺序不变"></a>方法2 数字相对顺序不变</h6><ul>
<li><font color="red">“倒着”</font></li>
<li>代码实现<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> j = n<span class="number">-1</span></div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>;i&gt;+<span class="number">0</span>;--i)</div><div class="line">    <span class="keyword">if</span>(isdigist(s[i]))s[j--]=s[i];</div><div class="line"><span class="keyword">for</span>(;j&gt;=<span class="number">0</span>;--j)s[j]=<span class="string">'*'</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="子串变位词"><a href="#子串变位词" class="headerlink" title="子串变位词"></a>子串变位词</h4><ul>
<li>给定两个串a和b，问b是否是a的子串的变位词。例如输入a = hello, b = lel, lle, ello都是<br>true,但是b = elo是false。<ul>
<li>滑动窗口的思想<ul>
<li>动态维护一个“窗口”。</li>
<li>比如b的长度是3，我们考察a[0..2], [1..3],[2..4]是否和b是变位词</li>
<li>如何与b比较？</li>
</ul>
</li>
</ul>
</li>
<li>我们用一个hash,基于字符串的特殊性，我们可以用[0..255]或者[0..65535]的数组，我们暂且认为它们都是小写英文字母，用[0..25]来表示b中每个单词出现多少次。</li>
<li><p>我们可以存一下有多少个非0次出现的，以后有用</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">int nonzero</div><div class="line">for(int i=0;i&lt;lenb;++i)</div><div class="line">    if(++num[b[i]-'a'==1])++nonZero;</div></pre></td></tr></table></figure>
</li>
<li><p>我们用b中的次数减去a中一个“窗口”内的字符种类，如果结果全是0，则找到这样的子串了。 <font color="red">注意num[]的含义变为了字符种类差</font></p>
</li>
<li><p>第一个窗口 [0..lenb – 1] (注意lena &lt; lenb无解)</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;lenb;++i)&#123;</div><div class="line">    <span class="keyword">int</span> c = a[i] - <span class="string">'a'</span>;</div><div class="line">    --num[c];</div><div class="line">    <span class="keyword">if</span>(num[c]==<span class="number">0</span>)--nonZero;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(num[c]==<span class="number">-1</span>)++nonZero;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(nonZero == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>;</div></pre></td></tr></table></figure>
</li>
<li><p>窗口如何滑动？ 向右移动一位</p>
<ul>
<li>新窗口a[(i － lenb + 1)..i]</li>
<li>旧窗口a[(i – lenb).. (i – 1)]<ul>
<li>扔掉a[i – lenb]</li>
<li>加入a[i]<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=lenb;i&lt;lana;++i)&#123;</div><div class="line">    <span class="keyword">int</span> c = a[i-lenb] - <span class="string">'a'</span>;</div><div class="line">    ++num[c];</div><div class="line">    <span class="keyword">if</span>(num[c]==<span class="number">1</span>)++nonZero;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(num[c]==<span class="number">0</span>) --nonZero;</div><div class="line">    c = a[i] - <span class="string">'a'</span>;</div><div class="line">    --num[c];</div><div class="line">    <span class="keyword">if</span>(num[c]==<span class="number">0</span>)--nonZero;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(num[c]==<span class="number">-1</span>)++nonZero;</div><div class="line">    <span class="keyword">if</span>(nonZero == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>;    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="单词翻转"><a href="#单词翻转" class="headerlink" title="单词翻转"></a>单词翻转</h4><ul>
<li>翻转句子中全部的单词，单词内容不变<ul>
<li>例如I’m a student. 变为student. a I’m</li>
<li>in-place翻转 字符串第i位到第j位<ul>
<li>while (i &lt; j) swap(s[i++], s[j–]);</li>
</ul>
</li>
<li>有什么用？<ul>
<li>翻转整个句子 ： .tneduts a m’I</li>
<li>每个单词单独翻转： student. a I’m</li>
</ul>
</li>
<li>难点？ 如何区分单词？找空格，split</li>
<li>思考题： 字符串循环移位abcd<ul>
<li>移动1次变为bcda</li>
<li>移动2次变为cdab</li>
<li>移动3次变为dabc</li>
</ul>
</li>
<li>结论： 长度为n， 移动m次，相当于移动m % n次<ul>
<li>前m % n位翻转， 后n – m % n位翻转</li>
<li>总体再翻转一次 试验一下？</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;0-1交换&quot;&gt;&lt;a href=&quot;#0-1交换&quot; class=&quot;headerlink&quot; title=&quot;0-1交换&quot;&gt;&lt;/a&gt;0-1交换&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;把一个0-1串（只包含0和1的串）进行排序，你&lt;br&gt;可以交换任意两个位置，问最少交换的次数&lt;br&gt;？&lt;
    
    </summary>
    
      <category term="算法与数据结构" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="算法与数据结构" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>go 博客系统</title>
    <link href="http://yoursite.com/2017/06/03/go/goBlog/"/>
    <id>http://yoursite.com/2017/06/03/go/goBlog/</id>
    <published>2017-06-03T06:27:19.569Z</published>
    <updated>2017-06-04T11:32:07.715Z</updated>
    
    <content type="html"><![CDATA[<h4 id="一、Beego-Web框架"><a href="#一、Beego-Web框架" class="headerlink" title="一、Beego Web框架"></a>一、Beego Web框架</h4><h5 id="使用go-get下载安装bee工具与Beego"><a href="#使用go-get下载安装bee工具与Beego" class="headerlink" title="使用go get下载安装bee工具与Beego"></a>使用go get下载安装bee工具与Beego</h5><ul>
<li>Bee:<a href="https://github.com/astaxie/bee" target="_blank" rel="external">https://github.com/astaxie/bee</a></li>
<li><p>Beego:<a href="https://github.com/astaxie/beego" target="_blank" rel="external">https://github.com/astaxie/beego</a> </p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">安装</div><div class="line"><span class="keyword">go</span> get github.com/astaxie/beego</div><div class="line">更新</div><div class="line"><span class="keyword">go</span> get -u github.com/astaxie/beego</div><div class="line">安装</div><div class="line"><span class="keyword">go</span> get github.com/beego/bee</div><div class="line">更新</div><div class="line"><span class="keyword">go</span> get -u github.com/beego/bee</div></pre></td></tr></table></figure>
</li>
<li><p>新建项目</p>
<pre><code>bee new goblog
</code></pre><p><img src="http://i.imgur.com/BdJ3N6b.png" alt=""></p>
</li>
<li><p>运行程序</p>
<pre><code>bee run beeblog
</code></pre><h4 id="二、模板用法讲解"><a href="#二、模板用法讲解" class="headerlink" title="二、模板用法讲解"></a>二、模板用法讲解</h4><h5 id="模板基础应用"><a href="#模板基础应用" class="headerlink" title="模板基础应用"></a>模板基础应用</h5></li>
<li><p>if</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">this.Data[<span class="string">"TrueCond"</span>] = <span class="literal">true</span></div><div class="line">this.Data[<span class="string">"FalseCond"</span>] = <span class="literal">false</span></div><div class="line">&#123;&#123;<span class="keyword">if</span> .FalseCond&#125;&#125; &#123;&#123;<span class="keyword">else</span>&#125;&#125; <span class="literal">false</span> condition &#123;&#123;end&#125;&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>with</p>
</li>
</ul>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> u <span class="keyword">struct</span> &#123;</div><div class="line">		Name <span class="keyword">string</span></div><div class="line">		Age  <span class="keyword">int</span></div><div class="line">		Sex  <span class="keyword">string</span></div><div class="line">	&#125;</div><div class="line">	User := &amp;u&#123;</div><div class="line">		Name: <span class="string">"Joe"</span>,</div><div class="line">		Age:  <span class="number">20</span>,</div><div class="line">		Sex:  <span class="string">"Male"</span>,</div><div class="line">	&#125;</div><div class="line">this.Data[<span class="string">"User"</span>] = User</div><div class="line">&#123;&#123;.User.Name&#125;&#125;;&#123;&#123;.User.Age&#125;&#125;;&#123;&#123;.User.Sex&#125;&#125; </div><div class="line">&#123;&#123;with .User&#125;&#125; </div><div class="line">    &#123;&#123;.Name&#125;&#125;;&#123;&#123;.Age&#125;&#125;;&#123;&#123;.Sex&#125;&#125; </div><div class="line">&#123;&#123;end&#125;&#125;</div></pre></td></tr></table></figure>
<ul>
<li>range<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">num := []int&#123;1,2,3,4,5,6,7,8,9,0&#125;</div><div class="line">this.Data[&quot;Nums&quot;]=nums;</div><div class="line">&#123;&#123;range .Nums&#125;&#125;</div><div class="line">&#123;&#123;.&#125;&#125;</div><div class="line">&#123;&#123;end&#125;&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="模板高级应用"><a href="#模板高级应用" class="headerlink" title="模板高级应用"></a>模板高级应用</h5><ul>
<li><p>模板变量</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">this.Data[<span class="string">"TpVar"</span>] = <span class="string">"hey gus"</span></div><div class="line">&#123;&#123;StpVal ：= .TpVar&#125;&#125;</div><div class="line">&#123;&#123;StpVar&#125;&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>模板函数(beeGo自制)</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">this.Data[<span class="string">"Html"</span>] = <span class="string">"&lt;dic&gt;hello beego&lt;/div&gt;"</span></div><div class="line">&#123;&#123;str2html .Html&#125;&#125;</div><div class="line">------</div><div class="line">this.Data[<span class="string">"Pipe"</span>] = <span class="string">"&lt;dic&gt;hello beego&lt;/div&gt;"</span></div><div class="line">&#123;&#123;.Pipe | htmlquoto&#125;&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>模板嵌套</p>
<ul>
<li><p>定义一个模板</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;&#123;define "test"&#125;&#125;</div><div class="line">&lt;div&gt;</div><div class="line">this is test template</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>使用模板</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    &#123;&#123;template "test"&#125;&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><a href="https://github.com/astaxie/build-web-application-with-golang/blob/master/zh/07.4.md" target="_blank" rel="external">参考文献</a></p>
</li>
</ul>
<h4 id="三、数据库ORM操作"><a href="#三、数据库ORM操作" class="headerlink" title="三、数据库ORM操作"></a>三、数据库ORM操作</h4><h5 id="创建model"><a href="#创建model" class="headerlink" title="创建model"></a>创建model</h5><ul>
<li>在models文件下新建一个models.go文件</li>
<li><p>安装所需包</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">go</span> get github.com/Unknwon/com</div><div class="line"><span class="comment">//安装go-sqlite3 需要先配置gcc编译环境（TDM-GCC）</span></div><div class="line"><span class="keyword">go</span> get github.com/mattn/<span class="keyword">go</span>-sqlite3</div></pre></td></tr></table></figure>
</li>
<li><p>写入数据 model包含分类和文章两个表</p>
<ul>
<li>beeBlog/models.go <figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> models</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"os"</span></div><div class="line">	<span class="string">"path"</span></div><div class="line">	<span class="string">"time"</span></div><div class="line">	<span class="string">"github.com/Unknwon/com"</span></div><div class="line">	<span class="string">"github.com/astaxie/beego/orm"</span></div><div class="line">	_ <span class="string">"github.com/mattn/go-sqlite3"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">const</span> (</div><div class="line">	_DB_NAME        = <span class="string">"data/beeblog.db"</span></div><div class="line">	_SQLITE3_DRIVER = <span class="string">"sqlite3"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="comment">//_只执行其初始换函数，不进行函数调用</span></div><div class="line"><span class="keyword">type</span> Category <span class="keyword">struct</span> &#123;</div><div class="line">	Id              <span class="keyword">int64</span></div><div class="line">	Title           <span class="keyword">string</span></div><div class="line">	Create          time.Time <span class="string">`orm:"index"`</span> <span class="comment">//创建日期 tags建立索引</span></div><div class="line">	View            <span class="keyword">int64</span>     <span class="string">`orm:"index"`</span> <span class="comment">//浏览量</span></div><div class="line">	TopicTime       time.Time <span class="string">`orm:"index"`</span> <span class="comment">//最后一篇文章发表时间</span></div><div class="line">	TopicCount      <span class="keyword">int64</span></div><div class="line">	TopicLastUserId <span class="keyword">int64</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">type</span> Topic <span class="keyword">struct</span> &#123;</div><div class="line">	Id               <span class="keyword">int64</span></div><div class="line">	Uid              <span class="keyword">int64</span></div><div class="line">	Title            <span class="keyword">string</span></div><div class="line">	Content          <span class="keyword">string</span>    <span class="string">`orm:"size(5000)"`</span></div><div class="line">	Attachment       <span class="keyword">string</span>    <span class="comment">//附件</span></div><div class="line">	Created          time.Time <span class="string">`orm:"index"`</span></div><div class="line">	Updated          time.Time <span class="string">`orm:"index"`</span></div><div class="line">	View             <span class="keyword">int64</span>     <span class="string">`orm:"index"`</span> <span class="comment">//浏览量</span></div><div class="line">	Author           <span class="keyword">string</span></div><div class="line">	ReplyTime        time.Time <span class="string">`orm:"index"`</span> <span class="comment">//回复时间</span></div><div class="line">	ReplyCount       <span class="keyword">int64</span></div><div class="line">	RepleyLastUserId <span class="keyword">int64</span> <span class="comment">//回复者的ID</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">RegisterDB</span><span class="params">()</span></span> &#123;</div><div class="line">	<span class="keyword">if</span> !com.IsExist(_DB_NAME) &#123;</div><div class="line">		os.MkdirAll(path.Dir(_DB_NAME), os.ModePerm)<span class="comment">//data文件夹  默认权限</span></div><div class="line">		os.Create(_DB_NAME)</div><div class="line">	&#125;</div><div class="line">	orm.RegisterModel(<span class="built_in">new</span>(Category),<span class="built_in">new</span>(Topic))</div><div class="line">	<span class="comment">//orm.RegisterDriver(_SQLITE3_DRIVER,orm.DR_Sqlite)</span></div><div class="line">	orm.RegisterDataBase(<span class="string">"default"</span>,_SQLITE3_DRIVER,_DB_NAME,<span class="number">10</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h5 id="main-下加载model-模型-然后自动建表"><a href="#main-下加载model-模型-然后自动建表" class="headerlink" title="main 下加载model 模型 然后自动建表"></a>main 下加载model 模型 然后自动建表</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"beeblog/controllers"</span></div><div class="line">	<span class="string">"beeblog/models"</span></div><div class="line">	<span class="string">"github.com/astaxie/beego"</span></div><div class="line">	<span class="string">"github.com/astaxie/beego/orm"</span></div><div class="line">)</div><div class="line"><span class="comment">//_ "beeblog/routers"</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">		models.RegisterDB()</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	orm.Debug = <span class="literal">true</span></div><div class="line">	orm.RunSyncdb(<span class="string">"default"</span>,<span class="literal">false</span>,<span class="literal">true</span>)<span class="comment">//false=每次运行不重新建表 true=是否打印相关信息</span></div><div class="line">	beego.Router(<span class="string">"/"</span>,&amp;controllers.MainController&#123;&#125;)</div><div class="line">	beego.Run()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="四、登录操作"><a href="#四、登录操作" class="headerlink" title="四、登录操作"></a>四、登录操作</h4><h5 id="html代码"><a href="#html代码" class="headerlink" title="html代码"></a>html代码</h5><ul>
<li><p>head模板</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&#123;&#123;define "header"&#125;&#125;</div><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"shortcut icon"</span> <span class="attr">href</span>=<span class="string">"/static/img/favicon.png"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-type"</span> <span class="attr">content</span>=<span class="string">"text/html;charset=utf-8"</span>&gt;</span></div><div class="line">    </div><div class="line">    <span class="comment">&lt;!--stylesheet--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"/static/css/bootstrap.min.css"</span>&gt;</span></div><div class="line">   </div><div class="line">&#123;&#123;end&#125;&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>导航栏模板</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&#123;&#123;define "navbar"&#125;&#125;</div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"navbar-brand"</span> <span class="attr">href</span>=<span class="string">"/"</span>&gt;</span>我的博客<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav navbar-nav"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span> &#123;&#123;<span class="attr">if</span> <span class="attr">.IsHome</span>&#125;&#125;<span class="attr">class</span>=<span class="string">"active"</span> &#123;&#123;<span class="attr">end</span>&#125;&#125;&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/"</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span> &#123;&#123;<span class="attr">if</span> <span class="attr">.IsCategory</span>&#125;&#125;<span class="attr">class</span>=<span class="string">"active"</span> &#123;&#123;<span class="attr">end</span>&#125;&#125;&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/category"</span>&gt;</span>分类<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span> &#123;&#123;<span class="attr">if</span> <span class="attr">.IsTopic</span>&#125;&#125;<span class="attr">class</span>=<span class="string">"active"</span> &#123;&#123;<span class="attr">end</span>&#125;&#125;&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/topic"</span>&gt;</span>文章<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pull-right"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav navbar-nav"</span>&gt;</span></div><div class="line">        &#123;&#123;if .IsLogin&#125;&#125;</div><div class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/login?exit=true"</span>&gt;</span>退出<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		&#123;&#123;else&#125;&#125;</div><div class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/login"</span>&gt;</span>管理员登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		&#123;&#123;end&#125;&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">&#123;&#123;end&#125;&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>主页</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">&#123;&#123;template "header"&#125;&#125;</div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>首页-我的beego博客<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">"navbar navbar-static-top bs-docs-nav"</span> <span class="attr">id</span>=<span class="string">"top"</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--&#123;&#123;template "navbar" .&#125;&#125;  .为了对模板进行逻辑操作 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"navbar navbar-default navbar-fixed-top"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">                &#123;&#123;template "navbar" .&#125;&#125;</div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">header</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- &lt;div class="jumbotron masthead"&gt; &lt;/div&gt;--&gt;</span></div><div class="line">    <span class="comment">&lt;!-- Page content of course! --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">main</span> <span class="attr">class</span>=<span class="string">"bs-docs-masthead"</span> <span class="attr">id</span>=<span class="string">"content"</span> <span class="attr">tabindex</span>=<span class="string">"-1"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"page-header"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我的第一篇文章<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">h6</span> <span class="attr">class</span>=<span class="string">"text-muted"</span>&gt;</span>文章发表与2017年x月x日，共有100次浏览，200个评论<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>大家好，这是我的第一篇文章，多谢浏览<span class="tag">&lt;/<span class="name">p</span>&gt;</span>，</div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">main</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">footer</span> <span class="attr">class</span>=<span class="string">"bs-docs-footer"</span>&gt;</span></div><div class="line">     <span class="tag">&lt;/<span class="name">footer</span>&gt;</span>   </div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"https://cdn.staticfile.org/jquery/3.2.1/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/static/js/bootstrap.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>登录页面</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">&#123;&#123;template "header"&#125;&#125;</div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>登录-我的beego博客<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span> <span class="attr">style</span>=<span class="string">"width: 600px"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"POST"</span> <span class="attr">action</span>=<span class="string">"/login"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>Account<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"uname"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span>  <span class="attr">placeholder</span>=<span class="string">"Enter Account"</span> <span class="attr">name</span>=<span class="string">"uname"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>Password<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"pwd"</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"Password"</span> <span class="attr">name</span>=<span class="string">"pwd"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"checkbox"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"autoLogin"</span>&gt;</span> 自动登录</div><div class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span> <span class="attr">onclick</span>=<span class="string">"return checkInput()"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span> <span class="attr">onclick</span>=<span class="string">"return backToHome()"</span>&gt;</span>返回<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">checkInput</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">var</span> uname=<span class="built_in">document</span>.getElementById(<span class="string">"uname"</span>);</div><div class="line">		<span class="keyword">if</span>(uname.value.length==<span class="number">0</span>)&#123;</div><div class="line">			alert(<span class="string">"请输入账号"</span>);</div><div class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="keyword">var</span> pwd=<span class="built_in">document</span>.getElementById(<span class="string">"pwd"</span>);</div><div class="line">		<span class="keyword">if</span>(pwd.value.length==<span class="number">0</span>)&#123;</div><div class="line">			alert(<span class="string">"请输入密码"</span>);</div><div class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">	&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">backToHome</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="built_in">window</span>.location.href=<span class="string">"/"</span></div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="后端代码"><a href="#后端代码" class="headerlink" title="后端代码"></a>后端代码</h5><ul>
<li><p>配置文件存储账号密码（一个） app.conf</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">appname = beeblog</div><div class="line">httpport = <span class="number">8080</span></div><div class="line">runmode = dev</div><div class="line">uname=admin</div><div class="line">pwd=admin</div></pre></td></tr></table></figure>
</li>
<li><p>login.go</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> controllers</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"github.com/astaxie/beego"</span></div><div class="line">	<span class="string">"github.com/astaxie/beego/context"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">type</span> LoginController <span class="keyword">struct</span> &#123;</div><div class="line">	beego.Controller</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *LoginController)</span> <span class="title">Get</span><span class="params">()</span></span> &#123;</div><div class="line">	<span class="comment">//退出</span></div><div class="line">	isExit := this.Input().Get(<span class="string">"exit"</span>) == <span class="string">"true"</span></div><div class="line">	<span class="keyword">if</span> isExit &#123;</div><div class="line">		this.Ctx.SetCookie(<span class="string">"uname"</span>, <span class="string">""</span>, <span class="number">-1</span>, <span class="string">"/"</span>)</div><div class="line">		this.Ctx.SetCookie(<span class="string">"pwd"</span>, <span class="string">""</span>, <span class="number">-1</span>, <span class="string">"/"</span>)</div><div class="line">		this.Redirect(<span class="string">"/"</span>, <span class="number">301</span>)</div><div class="line">		<span class="keyword">return</span></div><div class="line">	&#125;</div><div class="line">	this.TplName = <span class="string">"login.html"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *LoginController)</span> <span class="title">Post</span><span class="params">()</span></span> &#123;</div><div class="line">	uname := this.Input().Get(<span class="string">"uname"</span>)</div><div class="line">	pwd := this.Input().Get(<span class="string">"pwd"</span>)</div><div class="line">	autoLogin := this.Input().Get(<span class="string">"autoLogin"</span>)==<span class="string">"on"</span></div><div class="line"></div><div class="line">	<span class="keyword">if</span> beego.AppConfig.String(<span class="string">"uname"</span>) == uname &amp;&amp; beego.AppConfig.String(<span class="string">"pwd"</span>) == pwd&#123;</div><div class="line">		maxAge := <span class="number">0</span></div><div class="line">		<span class="keyword">if</span> autoLogin&#123;</div><div class="line">			maxAge = <span class="number">1</span>&lt;&lt;<span class="number">31</span><span class="number">-1</span> <span class="comment">//1左移31位减去1</span></div><div class="line">		&#125;</div><div class="line">		this.Ctx.SetCookie(<span class="string">"uname"</span>,uname,maxAge,<span class="string">"/"</span>)</div><div class="line">		this.Ctx.SetCookie(<span class="string">"pwd"</span>,pwd,maxAge,<span class="string">"/"</span>)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	this.Redirect(<span class="string">"/"</span>,<span class="number">301</span>)<span class="comment">//重定向</span></div><div class="line">	<span class="keyword">return</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">checkAccount</span><span class="params">(ctx *context.Context)</span> <span class="title">bool</span></span>&#123;</div><div class="line">	ck,err := ctx.Request.Cookie(<span class="string">"uname"</span>)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span></div><div class="line">	&#125;</div><div class="line">	uname := ck.Value</div><div class="line"></div><div class="line">	ck,err = ctx.Request.Cookie(<span class="string">"pwd"</span>)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span></div><div class="line">	&#125;</div><div class="line">	pwd := ck.Value</div><div class="line"></div><div class="line">	<span class="keyword">return</span> beego.AppConfig.String(<span class="string">"uname"</span>) == uname &amp;&amp; beego.AppConfig.String(<span class="string">"pwd"</span>) == pwd</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>home.go</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> controllers</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"github.com/astaxie/beego"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">type</span> MainController <span class="keyword">struct</span> &#123;</div><div class="line">	beego.Controller</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *MainController)</span> <span class="title">Get</span><span class="params">()</span></span> &#123;</div><div class="line">	this.Data[<span class="string">"IsHome"</span>] = <span class="literal">true</span>;</div><div class="line">	this.TplName = <span class="string">"home.html"</span></div><div class="line"></div><div class="line">	this.Data[<span class="string">"IsLogin"</span>] = checkAccount(this.Ctx)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="五、分类"><a href="#五、分类" class="headerlink" title="五、分类"></a>五、分类</h4><h5 id="html代码-1"><a href="#html代码-1" class="headerlink" title="html代码"></a>html代码</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line">&#123;&#123;template "header"&#125;&#125;</div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>分类-我的 Beego 博客<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"navbar navbar-default navbar-fixed-top"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">            &#123;&#123;template "navbar".&#125;&#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>分类列表<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"GET"</span> <span class="attr">action</span>=<span class="string">"/category"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">label</span>&gt;</span>分类名称<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"name"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"Enter category"</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"op"</span> <span class="attr">value</span>=<span class="string">"add"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span> <span class="attr">onclick</span>=<span class="string">"return checkInput()"</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">            <span class="function"><span class="keyword">function</span> <span class="title">checkInput</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                <span class="keyword">var</span> name = <span class="built_in">document</span>.getElementById(<span class="string">"name"</span>);</div><div class="line">                <span class="keyword">if</span> (name.value.length == <span class="number">0</span>) &#123;</div><div class="line">                    alert(<span class="string">"请输入分类名称"</span>);</div><div class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">            &#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table table-striped"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">thead</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">th</span>&gt;</span>#<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">th</span>&gt;</span>名称<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">th</span>&gt;</span>文章数<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></div><div class="line">                &#123;&#123;range .Categories&#125;&#125;</div><div class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>&#123;&#123;.Id&#125;&#125;<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>&#123;&#123;.Title&#125;&#125;<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>&#123;&#123;.TopicCount&#125;&#125;<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/category?op=del&amp;id=&#123;&#123;.Id&#125;&#125;"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">                &#123;&#123;end&#125;&#125;</div><div class="line">            <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"http://cdn.staticfile.org/jquery/2.1.1-rc2/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/static/js/bootstrap.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h5 id="后端代码-1"><a href="#后端代码-1" class="headerlink" title="后端代码"></a>后端代码</h5><ul>
<li><p>category.go</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> controllers</div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"beeblog/models"</span></div><div class="line">	<span class="string">"github.com/astaxie/beego"</span></div><div class="line">)</div><div class="line"><span class="keyword">type</span> CategoryController <span class="keyword">struct</span> &#123;</div><div class="line">	beego.Controller</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *CategoryController)</span> <span class="title">Get</span><span class="params">()</span></span> &#123;</div><div class="line">	op := this.Input().Get(<span class="string">"op"</span>)</div><div class="line">	<span class="keyword">switch</span> op &#123;</div><div class="line">			<span class="keyword">case</span> <span class="string">"add"</span>:</div><div class="line">				name := this.Input().Get(<span class="string">"name"</span>)</div><div class="line">				<span class="keyword">if</span> <span class="built_in">len</span>(name) == <span class="number">0</span> &#123;</div><div class="line">					<span class="keyword">break</span></div><div class="line">				&#125;</div><div class="line">				err := models.AddCategory(name)</div><div class="line">				<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">					beego.Error(err)</div><div class="line">				&#125;</div><div class="line">				this.Redirect(<span class="string">"/category"</span>, <span class="number">301</span>)</div><div class="line">				<span class="keyword">return</span></div><div class="line">			<span class="keyword">case</span> <span class="string">"del"</span>:</div><div class="line">				id := this.Input().Get(<span class="string">"id"</span>)</div><div class="line">				<span class="keyword">if</span> <span class="built_in">len</span>(id) == <span class="number">0</span> &#123;</div><div class="line">					<span class="keyword">break</span></div><div class="line">				&#125;</div><div class="line">				err := models.DelCategory(id)</div><div class="line">				<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">					beego.Error(err)</div><div class="line">				&#125;</div><div class="line">				this.Redirect(<span class="string">"/category"</span>, <span class="number">301</span>)</div><div class="line">				<span class="keyword">return</span></div><div class="line">	&#125;</div><div class="line">	this.Data[<span class="string">"IsLogin"</span>] = checkAccount(this.Ctx)</div><div class="line">	this.Data[<span class="string">"IsCategory"</span>] = <span class="literal">true</span></div><div class="line">	this.TplName = <span class="string">"category.html"</span></div><div class="line"></div><div class="line">	<span class="keyword">var</span> err error</div><div class="line">	this.Data[<span class="string">"Categories"</span>], err = models.GetAllCategories()</div><div class="line"></div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		beego.Error(err)</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>models.go（部分）</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//添加分类</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">AddCategory</span><span class="params">(name <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</div><div class="line">	o := orm.NewOrm()</div><div class="line">	cate := &amp;Category&#123;Title: name,Created:time.Now(),TopicTime:time.Now()&#125;</div><div class="line">	qs := o.QueryTable(<span class="string">"Category"</span>)</div><div class="line">	err := qs.Filter(<span class="string">"Title"</span>, name).One(cate)</div><div class="line">	<span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</div><div class="line">		<span class="keyword">return</span> err</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	_, err = o.Insert(cate)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		<span class="keyword">return</span> err</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">&#125;</div><div class="line"><span class="comment">//获取所以分类</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetAllCategories</span><span class="params">()</span> <span class="params">([]*Category, error)</span></span> &#123;</div><div class="line">	o := orm.NewOrm()</div><div class="line"></div><div class="line">	cates := <span class="built_in">make</span>([]*Category, <span class="number">0</span>)</div><div class="line"></div><div class="line">	qs := o.QueryTable(<span class="string">"Category"</span>)</div><div class="line">	_, err := qs.All(&amp;cates)</div><div class="line"></div><div class="line">	<span class="keyword">return</span> cates, err</div><div class="line">&#125;</div><div class="line"><span class="comment">//删除分类</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">DelCategory</span><span class="params">(id <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</div><div class="line">	<span class="comment">//字符串转换成十进制的int64</span></div><div class="line">	cid, err := strconv.ParseInt(id, <span class="number">10</span>, <span class="number">64</span>)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		<span class="keyword">return</span> err</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	o := orm.NewOrm()</div><div class="line"></div><div class="line">	cate := &amp;Category&#123;Id: cid&#125;</div><div class="line">	_, err = o.Delete(cate)</div><div class="line">	<span class="keyword">return</span> err</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>main.go(部分)</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"beeblog/controllers"</span></div><div class="line">)</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    orm.Debug = <span class="literal">true</span>    <span class="comment">//打印所有orm信息，方便调试</span></div><div class="line">    <span class="comment">//第一个是否每次需要重建表，，是否打印相关信息</span></div><div class="line">	orm.RunSyncdb(<span class="string">"default"</span>,<span class="literal">false</span>,<span class="literal">true</span>)<span class="comment">//false=每次运行不重新建表 true=是否打印相关信息</span></div><div class="line">	beego.Router(<span class="string">"/"</span>,&amp;controllers.MainController&#123;&#125;)</div><div class="line">	beego.Router(<span class="string">"/category"</span>, &amp;controllers.CategoryController&#123;&#125;)</div><div class="line">	beego.Router(<span class="string">"/login"</span>,&amp;controllers.LoginController&#123;&#125;)</div><div class="line">	beego.Run()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;一、Beego-Web框架&quot;&gt;&lt;a href=&quot;#一、Beego-Web框架&quot; class=&quot;headerlink&quot; title=&quot;一、Beego Web框架&quot;&gt;&lt;/a&gt;一、Beego Web框架&lt;/h4&gt;&lt;h5 id=&quot;使用go-get下载安装bee工具与Bee
    
    </summary>
    
      <category term="go" scheme="http://yoursite.com/categories/go/"/>
    
    
      <category term="go" scheme="http://yoursite.com/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>TensorFlow 传统神经网络之非线性回归(激励函数，拟合，二次代价函数，对数释然函数，交叉熵)</title>
    <link href="http://yoursite.com/2017/06/03/TensorFlow/%E9%9D%9E%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/"/>
    <id>http://yoursite.com/2017/06/03/TensorFlow/非线性回归/</id>
    <published>2017-06-03T01:43:24.256Z</published>
    <updated>2017-06-12T02:12:05.980Z</updated>
    
    <content type="html"><![CDATA[<h4 id="非线性激励"><a href="#非线性激励" class="headerlink" title="非线性激励"></a>非线性激励</h4><p> <img src="http://i.imgur.com/iL6Sgxy.png" alt=""></p>
<ul>
<li>考量标准：<ul>
<li>1.正向对输入的调整 </li>
<li>2.反向梯度损失 </li>
</ul>
</li>
</ul>
<h4 id="常用的非线性激励函数"><a href="#常用的非线性激励函数" class="headerlink" title="常用的非线性激励函数"></a>常用的非线性激励函数</h4><h5 id="Sigmoid"><a href="#Sigmoid" class="headerlink" title="Sigmoid"></a>Sigmoid</h5><p><img src="http://i.imgur.com/7z7296c.png" alt=""><br><img src="http://i.imgur.com/UtEraBM.png" alt=""></p>
<ul>
<li>函数效果，导数 </li>
<li>优点，缺点 <ul>
<li>将输入数据映射到［0，1］</li>
<li>梯度下降非常明显，至少减少75% </li>
</ul>
</li>
<li>sigmoid函数可以把实数域光滑的映射到[0,1]空间。函数值恰好可以解释为属于正类的概率（概率的取值范围是0~1）。另外，sigmoid函数单调递增，连续可导，导数形式非常简单，是一个比较合适的函数</li>
<li>对于二分类问题，输出层是sigmoid函数</li>
<li>对于多分类问题，输出层就必须是softmax函数了。softmax函数是sigmoid函数的推广</li>
<li>当输入非常大或者非常小的时候，这些神经元的梯度是接近于0的，从图中可以看出梯度的趋势。<br>Sigmoid 的 输出不是0均值，这会导致后一层的神经元将得到上一层输出的非0均值的信号作为输入。</li>
</ul>
<h5 id="tahn"><a href="#tahn" class="headerlink" title="tahn"></a>tahn</h5><p>   <img src="http://i.imgur.com/g16OdUY.png" alt=""><br>   <img src="http://i.imgur.com/OOpr4uQ.png" alt=""></p>
<ul>
<li>函数效果，导数 </li>
<li>优点，缺点 <ul>
<li>将输入数据映射到［－1，1］ </li>
<li>梯度损失明显 </li>
</ul>
</li>
<li>Tanh是Sigmoid的变形，与 sigmoid 不同的是，tanh 是0均值的。因此，实际应用中，tanh 会比 sigmoid 更好。</li>
</ul>
<h5 id="softmax"><a href="#softmax" class="headerlink" title="softmax"></a>softmax</h5><p><img src="http://i.imgur.com/8icoWvX.png" alt=""></p>
<ul>
<li>sigmoid将一个real value映射到（0,1）的区间（当然也可以是（-1,1）），这样可以用来做二分类。 </li>
<li>我们知道MNIST的结果是0-9，我们的模型可能推测出一张图片是数字9的概率是80%，是数字8 的概率是10%，然后其他数字的概率更小，总体概率加起来等于1。这是一个使用softmax回归模 型的经典案例。softmax模型可以用来给不同的对象分配概率。</li>
<li>比如输出结果为[1,5,3]<br><img src="http://i.imgur.com/JLe14k6.png" alt=""></li>
</ul>
<h5 id="ReLU-Rectified-linear-unit"><a href="#ReLU-Rectified-linear-unit" class="headerlink" title="ReLU(Rectified linear unit)"></a>ReLU(Rectified linear unit)</h5><p><img src="http://i.imgur.com/s4Cp3IE.png" alt=""><br><img src="http://i.imgur.com/d2k5aRH.png" alt=""></p>
<p>f(x)=max(0,x)</p>
<ul>
<li>输入信号<0时，输出都是0，>0 的情况下，输出等于输入</0时，输出都是0，></li>
<li>正向截断负值，损失大量特征 <ul>
<li>正向截断负值，损失大量特征为什么还用？<ul>
<li>特征足够多 </li>
</ul>
</li>
</ul>
</li>
<li>反向梯度没有损失<br><img src="http://i.imgur.com/PwU5L9X.png" alt=""></li>
<li>优点<ul>
<li>使用 ReLU 得到的SGD的收敛速度会比 sigmoid/tanh 快很多(看右图)。有人说这是因为它是linear，而且 non-saturating<br>相比于 sigmoid/tanh，ReLU 只需要一个阈值就可以得到激活值，而不用去算一大堆复杂的运算。</li>
</ul>
</li>
<li>缺点<ul>
<li>就是训练的时候很”脆弱”，很容易就就”die”了<ul>
<li>一个非常大的梯度流过一个 ReLU 神经元，更新过参数之后，这个神经元再也不会对任何数据有激活现象了。</li>
<li>如果这个情况发生了，那么这个神经元的梯度就永远都会是0.</li>
</ul>
</li>
<li>实际操作中，如果你的learning rate 很大，那么很有可能你网络中的40%的神经元都”dead”了。 </li>
<li>当然，如果你设置了一个合适的较小的learning rate，这个问题发生的情况其实也不会太频繁。</li>
</ul>
</li>
</ul>
<h5 id="Leaky-ReLU-Rectified-linear-unit"><a href="#Leaky-ReLU-Rectified-linear-unit" class="headerlink" title="Leaky ReLU(Rectified  linear unit)"></a>Leaky ReLU(Rectified  linear unit)</h5><p><img src="http://i.imgur.com/v48UPtN.png" alt=""></p>
<ul>
<li><p>Leaky ReLUs： 就是用来解决这个 “dying ReLU” 的问题的。与 ReLU 不同的是： </p>
<pre><code>f(x)=αx，(x&lt;0)
f(x)=x，(x&gt;=0)
</code></pre><p>这里的 α 是一个很小的常数。这样，即修正了数据分布，又保留了一些负轴的值，使得负轴信息不会全部丢失。<br><img src="http://i.imgur.com/TfkyNMV.png" alt=""><br><img src="http://i.imgur.com/RboxM59.png" alt=""> </p>
</li>
<li>为什么不变成y=x ?   线性了</li>
</ul>
<h4 id="二次代价函数-quadratic-cost"><a href="#二次代价函数-quadratic-cost" class="headerlink" title="二次代价函数(quadratic cost)"></a>二次代价函数(quadratic cost)</h4><p><img src="http://i.imgur.com/5OOzPSd.png" alt=""></p>
<ul>
<li>其中，C表示代价函数，x表示样本，y表示实际值，a表示输出值，n表示样本的总数。为简单起见 ，同样一个样本为例进行说明，此时二次代价函数为：</li>
<li>a=σ(z),  z=∑Wj*Xj+b </li>
<li>σ() 是激活函数</li>
</ul>
<p><img src="http://i.imgur.com/m9S6lIw.png" alt=""></p>
<ul>
<li>假如我们使用梯度下降法(Gradient descent)来调整权值参数的大小，权值w和偏置b的梯度推导 如下：<br><img src="http://i.imgur.com/uMUiChz.png" alt=""></li>
<li>其中，z表示神经元的输入，σ表示激活函数。w和b的梯度跟激活函数的梯度成正比，激活函数的 梯度越大，w和b的大小调整得越快，训练收敛得就越快。</li>
<li>假设我们的激活函数是sigmoid函数<br><img src="http://i.imgur.com/D8AwwFF.png" alt=""><br>假设我们目标是收敛到1。A点为0.82离目标比较远，梯度比较大，权值调整比较大。B点为0.92离目标比较近，梯度比较小，权值调整比较小。调整方案合理。</li>
</ul>
<h5 id="交叉熵代价函数-cross-entropy"><a href="#交叉熵代价函数-cross-entropy" class="headerlink" title="交叉熵代价函数(cross-entropy)"></a>交叉熵代价函数(cross-entropy)</h5><p> 换一个思路，我们不改变激活函数，而是改变代价函数，改用交叉熵代价函数：</p>
<p> <img src="http://i.imgur.com/ADwSAEx.png" alt=""></p>
<ul>
<li>其中，C表示代价函数，x表示样本，y表示 实际值，a表示输出值，n表示样本的总数。 a=σ(z),  z=∑Wj*Xj+b<br><img src="http://i.imgur.com/nslv91P.png" alt=""><br><img src="http://i.imgur.com/iPMHIFm.png" alt=""></li>
</ul>
<p><img src="http://i.imgur.com/wBiWams.png" alt=""></p>
<ul>
<li>权值和偏置值的调整与<img src="http://i.imgur.com/ABY3HQk.png" alt="">无关，另外，梯度公式中的<img src="http://i.imgur.com/srDw13Z.png" alt=""> 表示输出值与实 际值的误差。所以当误差越大时，梯度就越大，参数w和b的调整就越快，训练的速度也就越快。 </li>
<li>如果输出神经元是线性的，那么二次代价函数就是一种合适的选择。如果输出神经元是S型函数， 那么比较适合用交叉熵代价函数。</li>
<li>对数似然代价函数与softmax的组合和交叉熵与sigmoid函数的组合非常相似。对数释然代价函数 在二分类时可以化简为交叉熵代价函数的形式。</li>
</ul>
<h5 id="对数释然代价函数-log-likelihood-cost"><a href="#对数释然代价函数-log-likelihood-cost" class="headerlink" title="对数释然代价函数(log-likelihood cost)"></a>对数释然代价函数(log-likelihood cost)</h5><ul>
<li><p>log似然代价函数的公式为：</p>
<p> <img src="http://i.imgur.com/HpAdpEG.png" alt=""></p>
<p> 其中，表示第k个神经元的输出值，表示第k个神经元对应的真实值，取值为0或1。</p>
</li>
<li><p>偏置b的梯度公式</p>
</li>
</ul>
<p><img src="http://i.imgur.com/qcwsJTX.png" alt=""></p>
<ul>
<li>权重w的梯度公式</li>
</ul>
<p><img src="http://i.imgur.com/9h7prWB.png" alt=""></p>
<ul>
<li>对数释然函数常用来作为softmax回归的代价函数，如果输出层神经元是sigmoid函数，可以采用 交叉熵代价函数。而深度学习中更普遍的做法是将softmax作为最后一层，此时常用的代价函数是 对数释然代价函数。</li>
<li>对数似然代价函数与softmax的组合和交叉熵与sigmoid函数的组合非常相似。对数释然代价函数 在二分类时可以化简为交叉熵代价函数的形式。</li>
</ul>
<h5 id="交叉熵在Tensorflow中用"><a href="#交叉熵在Tensorflow中用" class="headerlink" title="交叉熵在Tensorflow中用"></a>交叉熵在Tensorflow中用</h5><ul>
<li>tf.nn.sigmoid_cross_entropy_with_logits()来表示跟sigmoid搭配使用的交叉熵。 </li>
<li>tf.nn.softmax_cross_entropy_with_logits()来表示跟softmax搭配使用的交叉熵。</li>
</ul>
<h4 id="神经元－神经网络"><a href="#神经元－神经网络" class="headerlink" title="神经元－神经网络"></a>神经元－神经网络</h4><p><img src="http://i.imgur.com/Bm1hRDE.png" alt=""></p>
<ul>
<li>有线性回归网络吗？<br>并没有。。</li>
</ul>
<p><img src="http://i.imgur.com/9lWvUzf.png" alt=""></p>
<h4 id="拟合"><a href="#拟合" class="headerlink" title="拟合"></a>拟合</h4><p><img src="http://i.imgur.com/ddcx2d9.png" alt=""><br><img src="http://i.imgur.com/TfAECWs.png" alt=""></p>
<h5 id="防止过拟合"><a href="#防止过拟合" class="headerlink" title="防止过拟合"></a>防止过拟合</h5><ul>
<li>增加数据集<ul>
<li>一般有更多数据来训练话，训练得到的模型就会比较好。如果数据集太少，构造模型太复杂，就会出现过拟合</li>
<li>在AlexNet中,将256<em>256图像随机的截取224</em>224大小,增加了许多的训练样本,同时可以对图像进行左右翻转,增加样本的个数,实验的结果可以可降低1%的误差. <ul>
<li>在神经网络中输入噪声也可以看做是数据增强的一种方式.</li>
</ul>
</li>
</ul>
</li>
<li><p>正则化方法</p>
<p><img src="http://i.imgur.com/OR6FFtI.png" alt=""></p>
</li>
<li><p>Dropout</p>
<p><img src="http://i.imgur.com/tAef3Yc.png" alt=""></p>
<ul>
<li>Dropout提供了一种廉价的Bagging集成近似,能够训练和评估指数级数量的神经网络。dropout可以随机的让一部分神经元失活,这样仿佛是bagging的采样过程,因此可以看做是bagging的廉价的实现.<br>但是它们训练不太一样,因为bagging,所有的模型都是独立的,而dropout下所有模型的参数是共享的.<br>通常可以这样理解dropout:假设我们要判别一只猫,有一个神经元说看到有毛就是猫,但是如果我让这个神经元失活,它还能判断出来是猫的话,这样就比较具有泛化的能力,减轻了过拟合的风险.</li>
</ul>
</li>
<li><a href="http://blog.csdn.net/taoyanqi8932/article/details/71101699" target="_blank" rel="external">参考</a></li>
</ul>
<h4 id="tensorFlow非线性代码实现"><a href="#tensorFlow非线性代码实现" class="headerlink" title="tensorFlow非线性代码实现"></a>tensorFlow非线性代码实现</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"><span class="comment">#使用numpy生成200个随机点</span></div><div class="line"><span class="comment">#[生成数据存在“:”,np.newaxis增加了一个维度] 2维 200行1列</span></div><div class="line">x_data = np.linspace(<span class="number">-0.5</span>,<span class="number">0.5</span>,<span class="number">200</span>)[:,np.newaxis]</div><div class="line">noise = np.random.normal(<span class="number">0</span>,<span class="number">0.02</span>,x_data.shape)</div><div class="line">y_data = np.square(x_data) + noise</div><div class="line"></div><div class="line"><span class="comment">#定义两个placeholder</span></div><div class="line"><span class="comment">#[None,1] 任一行1列</span></div><div class="line">x = tf.placeholder(tf.float32,[<span class="keyword">None</span>,<span class="number">1</span>])</div><div class="line">y = tf.placeholder(tf.float32,[<span class="keyword">None</span>,<span class="number">1</span>])</div><div class="line"></div><div class="line"><span class="comment">#定义神经网络中间层</span></div><div class="line">Weights_L1 = tf.Variable(tf.random_normal([<span class="number">1</span>,<span class="number">10</span>]))</div><div class="line">biases_L1 = tf.Variable(tf.zeros([<span class="number">1</span>,<span class="number">10</span>]))</div><div class="line">Wx_plus_b_L1 = tf.matmul(x,Weights_L1) + biases_L1</div><div class="line">L1 = tf.nn.tanh(Wx_plus_b_L1)<span class="comment">#激活函数 中间层的输出</span></div><div class="line"></div><div class="line"><span class="comment">#定义神经网络输出层</span></div><div class="line">Weights_L2 = tf.Variable(tf.random_normal([<span class="number">10</span>,<span class="number">1</span>]))</div><div class="line">biases_L2 = tf.Variable(tf.zeros([<span class="number">1</span>,<span class="number">1</span>]))</div><div class="line">Wx_plus_b_L2 = tf.matmul(L1,Weights_L2) + biases_L2</div><div class="line">prediction = tf.nn.tanh(Wx_plus_b_L2)</div><div class="line"></div><div class="line"><span class="comment">#二次代价函数</span></div><div class="line"><span class="comment">#tf.square 平方</span></div><div class="line"><span class="comment">#tf.reduce_mean 求平均</span></div><div class="line">loss = tf.reduce_mean(tf.square(y-prediction))</div><div class="line"></div><div class="line"><span class="comment">#使用梯度下降法训练</span></div><div class="line"><span class="comment">#0.1学习率</span></div><div class="line"><span class="comment">#minimize 是loss最小化</span></div><div class="line">train_step = tf.train.GradientDescentOptimizer(<span class="number">0.1</span>).minimize(loss)</div><div class="line"></div><div class="line">ith tf.Session() <span class="keyword">as</span> sess:</div><div class="line">    <span class="comment">#变量初始化</span></div><div class="line">    sess.run(tf.global_variables_initializer())</div><div class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">2000</span>):</div><div class="line">        sess.run(train_step,feed_dict=&#123;x:x_data,y:y_data&#125;)</div><div class="line">        </div><div class="line">    <span class="comment">#获得预测值</span></div><div class="line">    prediction_value = sess.run(prediction,feed_dict=&#123;x:x_data&#125;)</div><div class="line">    <span class="comment">#画图</span></div><div class="line">    plt.figure()</div><div class="line">    <span class="comment">#离散的点</span></div><div class="line">    plt.scatter(x_data,y_data)</div><div class="line">    <span class="comment">#画线</span></div><div class="line">    <span class="comment">#r-红色的实线</span></div><div class="line">    plt.plot(x_data,prediction_value,<span class="string">'r-'</span>,lw=<span class="number">5</span>)</div><div class="line">    plt.show()</div></pre></td></tr></table></figure>
<p><img src="http://i.imgur.com/GwzUz79.png" alt=""></p>
<h4 id="tensorFlow交叉熵代码实现"><a href="#tensorFlow交叉熵代码实现" class="headerlink" title="tensorFlow交叉熵代码实现"></a>tensorFlow交叉熵代码实现</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</div><div class="line"><span class="keyword">from</span> tensorflow.examples.tutorials.mnist <span class="keyword">import</span> input_data</div><div class="line"></div><div class="line"><span class="comment">#载入数据集</span></div><div class="line">mnist = input_data.read_data_sets(<span class="string">"MNIST_data"</span>,one_hot=<span class="keyword">True</span>)</div><div class="line"></div><div class="line"><span class="comment">#每个批次的大小</span></div><div class="line">batch_size = <span class="number">100</span></div><div class="line"><span class="comment">#计算一共有多少个批次</span></div><div class="line">n_batch = mnist.train.num_examples // batch_size</div><div class="line"></div><div class="line"><span class="comment">#定义两个placeholder</span></div><div class="line">x = tf.placeholder(tf.float32,[<span class="keyword">None</span>,<span class="number">784</span>])</div><div class="line">y = tf.placeholder(tf.float32,[<span class="keyword">None</span>,<span class="number">10</span>])</div><div class="line"></div><div class="line"><span class="comment">#创建一个简单的神经网络</span></div><div class="line">W = tf.Variable(tf.zeros([<span class="number">784</span>,<span class="number">10</span>]))</div><div class="line">b = tf.Variable(tf.zeros([<span class="number">10</span>]))</div><div class="line">prediction = tf.nn.softmax(tf.matmul(x,W)+b)</div><div class="line"></div><div class="line"><span class="comment">#二次代价函数</span></div><div class="line"><span class="comment"># loss = tf.reduce_mean(tf.square(y-prediction))</span></div><div class="line">loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels=y,logits=prediction))</div><div class="line"><span class="comment">#使用梯度下降法</span></div><div class="line">train_step = tf.train.GradientDescentOptimizer(<span class="number">0.2</span>).minimize(loss)</div><div class="line"></div><div class="line"><span class="comment">#初始化变量</span></div><div class="line">init = tf.global_variables_initializer()</div><div class="line"></div><div class="line"><span class="comment">#结果存放在一个布尔型列表中</span></div><div class="line">correct_prediction = tf.equal(tf.argmax(y,<span class="number">1</span>),tf.argmax(prediction,<span class="number">1</span>))<span class="comment">#argmax返回一维张量中最大的值所在的位置</span></div><div class="line"><span class="comment">#求准确率</span></div><div class="line">accuracy = tf.reduce_mean(tf.cast(correct_prediction,tf.float32))</div><div class="line"></div><div class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</div><div class="line">    sess.run(init)</div><div class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> range(<span class="number">21</span>):</div><div class="line">        <span class="keyword">for</span> batch <span class="keyword">in</span> range(n_batch):</div><div class="line">            batch_xs,batch_ys =  mnist.train.next_batch(batch_size)</div><div class="line">            sess.run(train_step,feed_dict=&#123;x:batch_xs,y:batch_ys&#125;)</div><div class="line">        </div><div class="line">        acc = sess.run(accuracy,feed_dict=&#123;x:mnist.test.images,y:mnist.test.labels&#125;)</div><div class="line">        print(<span class="string">"Iter "</span> + str(epoch) + <span class="string">",Testing Accuracy "</span> + str(acc))</div></pre></td></tr></table></figure>
<h4 id="tensorFlow-Dropout代码实现"><a href="#tensorFlow-Dropout代码实现" class="headerlink" title="tensorFlow Dropout代码实现"></a>tensorFlow Dropout代码实现</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</div><div class="line"><span class="keyword">from</span> tensorflow.examples.tutorials.mnist <span class="keyword">import</span> input_data</div><div class="line"><span class="comment">#输出层：784   中间层1：2000 中间层2:1000 输出层：10</span></div><div class="line"><span class="comment">#数据集少 模型过于复杂 =》 过拟合  </span></div><div class="line"><span class="comment">#使用dropout防止过拟合</span></div><div class="line"><span class="comment">#训练的时候让百分之多少的神经元工作，测试的时候让所有的神经元工作</span></div><div class="line"><span class="comment">#载入数据集</span></div><div class="line">mnist = input_data.read_data_sets(<span class="string">"MNIST_data"</span>,one_hot=<span class="keyword">True</span>)</div><div class="line"></div><div class="line"><span class="comment">#每个批次的大小</span></div><div class="line">batch_size = <span class="number">100</span></div><div class="line"><span class="comment">#计算一共有多少个批次</span></div><div class="line">n_batch = mnist.train.num_examples // batch_size</div><div class="line"></div><div class="line"><span class="comment">#定义两个placeholder</span></div><div class="line">x = tf.placeholder(tf.float32,[<span class="keyword">None</span>,<span class="number">784</span>])</div><div class="line">y = tf.placeholder(tf.float32,[<span class="keyword">None</span>,<span class="number">10</span>])</div><div class="line">keep_prob=tf.placeholder(tf.float32)<span class="comment">#百分之多少的神经元工作</span></div><div class="line"></div><div class="line"><span class="comment">#创建一个简单的神经网络</span></div><div class="line"><span class="comment">#truncated_normal  截断的正态分布中输出随机值</span></div><div class="line"><span class="comment">#tf.truncated_normal(shape, mean=0.0, stddev=1.0, dtype=tf.float32, seed=None, name=None)</span></div><div class="line"><span class="comment">#shape: 一维的张量，也是输出的张量  mean: 正态分布的均值 stddev: 正态分布的标准差  dtype: 输出的类型</span></div><div class="line"><span class="comment">#seed: 一个整数，当设置之后，每次生成的随机数都一样  name: 操作的名字</span></div><div class="line"><span class="comment">#stddev=0.1 标准差</span></div><div class="line">W1 = tf.Variable(tf.truncated_normal([<span class="number">784</span>,<span class="number">2000</span>],stddev=<span class="number">0.1</span>))</div><div class="line">b1 = tf.Variable(tf.zeros([<span class="number">2000</span>])+<span class="number">0.1</span>)</div><div class="line">L1 = tf.nn.tanh(tf.matmul(x,W1)+b1)</div><div class="line">L1_drop = tf.nn.dropout(L1,keep_prob) <span class="comment">#防止过拟合</span></div><div class="line"></div><div class="line">W2 = tf.Variable(tf.truncated_normal([<span class="number">2000</span>,<span class="number">2000</span>],stddev=<span class="number">0.1</span>))</div><div class="line">b2 = tf.Variable(tf.zeros([<span class="number">2000</span>])+<span class="number">0.1</span>)</div><div class="line">L2 = tf.nn.tanh(tf.matmul(L1_drop,W2)+b2)</div><div class="line">L2_drop = tf.nn.dropout(L2,keep_prob) </div><div class="line"></div><div class="line">W3 = tf.Variable(tf.truncated_normal([<span class="number">2000</span>,<span class="number">1000</span>],stddev=<span class="number">0.1</span>))</div><div class="line">b3 = tf.Variable(tf.zeros([<span class="number">1000</span>])+<span class="number">0.1</span>)</div><div class="line">L3 = tf.nn.tanh(tf.matmul(L2_drop,W3)+b3)</div><div class="line">L3_drop = tf.nn.dropout(L3,keep_prob) </div><div class="line"></div><div class="line">W4 = tf.Variable(tf.truncated_normal([<span class="number">1000</span>,<span class="number">10</span>],stddev=<span class="number">0.1</span>))</div><div class="line">b4 = tf.Variable(tf.zeros([<span class="number">10</span>])+<span class="number">0.1</span>)</div><div class="line">prediction = tf.nn.softmax(tf.matmul(L3_drop,W4)+b4)</div><div class="line"></div><div class="line"><span class="comment">#二次代价函数</span></div><div class="line"><span class="comment"># loss = tf.reduce_mean(tf.square(y-prediction))</span></div><div class="line">loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels=y,logits=prediction))</div><div class="line"><span class="comment">#使用梯度下降法</span></div><div class="line">train_step = tf.train.GradientDescentOptimizer(<span class="number">0.2</span>).minimize(loss)</div><div class="line"></div><div class="line"><span class="comment">#初始化变量</span></div><div class="line">init = tf.global_variables_initializer()</div><div class="line"></div><div class="line"><span class="comment">#结果存放在一个布尔型列表中</span></div><div class="line">correct_prediction = tf.equal(tf.argmax(y,<span class="number">1</span>),tf.argmax(prediction,<span class="number">1</span>))<span class="comment">#argmax返回一维张量中最大的值所在的位置</span></div><div class="line"><span class="comment">#求准确率</span></div><div class="line">accuracy = tf.reduce_mean(tf.cast(correct_prediction,tf.float32))</div><div class="line"></div><div class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</div><div class="line">    sess.run(init)</div><div class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> range(<span class="number">31</span>):</div><div class="line">        <span class="keyword">for</span> batch <span class="keyword">in</span> range(n_batch):</div><div class="line">            batch_xs,batch_ys =  mnist.train.next_batch(batch_size)</div><div class="line">            <span class="comment">#keep_prob = 1 所有神经元都是工作的  =0.7 ---&gt; 70%的神经元工作</span></div><div class="line">            sess.run(train_step,feed_dict=&#123;x:batch_xs,y:batch_ys,keep_prob:<span class="number">0.7</span>&#125;)</div><div class="line">        </div><div class="line">        test_acc = sess.run(accuracy,feed_dict=&#123;x:mnist.test.images,y:mnist.test.labels,keep_prob:<span class="number">1.0</span>&#125;)</div><div class="line">        train_acc = sess.run(accuracy,feed_dict=&#123;x:mnist.train.images,y:mnist.train.labels,keep_prob:<span class="number">1.0</span>&#125;)</div><div class="line">        print(<span class="string">"Iter "</span> + str(epoch) + <span class="string">",Testing Accuracy "</span> + str(test_acc) +<span class="string">",Training Accuracy "</span> + str(train_acc))</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">Extracting MNIST_data\train-images-idx3-ubyte.gz</div><div class="line">Extracting MNIST_data\train-labels-idx1-ubyte.gz</div><div class="line">Extracting MNIST_data\t10k-images-idx3-ubyte.gz</div><div class="line">Extracting MNIST_data\t10k-labels-idx1-ubyte.gz</div><div class="line">Iter <span class="number">0</span>,Testing Accuracy <span class="number">0.9117</span>,Training Accuracy <span class="number">0.903655</span></div><div class="line">Iter <span class="number">1</span>,Testing Accuracy <span class="number">0.9243</span>,Training Accuracy <span class="number">0.923709</span></div><div class="line">Iter <span class="number">2</span>,Testing Accuracy <span class="number">0.936</span>,Training Accuracy <span class="number">0.933528</span></div><div class="line">Iter <span class="number">3</span>,Testing Accuracy <span class="number">0.9389</span>,Training Accuracy <span class="number">0.939546</span></div><div class="line">Iter <span class="number">4</span>,Testing Accuracy <span class="number">0.9419</span>,Training Accuracy <span class="number">0.942328</span></div><div class="line">Iter <span class="number">5</span>,Testing Accuracy <span class="number">0.9466</span>,Training Accuracy <span class="number">0.948309</span></div><div class="line">Iter <span class="number">6</span>,Testing Accuracy <span class="number">0.9487</span>,Training Accuracy <span class="number">0.951873</span></div><div class="line">Iter <span class="number">7</span>,Testing Accuracy <span class="number">0.9514</span>,Training Accuracy <span class="number">0.953437</span></div><div class="line">Iter <span class="number">8</span>,Testing Accuracy <span class="number">0.9525</span>,Training Accuracy <span class="number">0.956291</span></div><div class="line">Iter <span class="number">9</span>,Testing Accuracy <span class="number">0.9533</span>,Training Accuracy <span class="number">0.957327</span></div><div class="line">Iter <span class="number">10</span>,Testing Accuracy <span class="number">0.9558</span>,Training Accuracy <span class="number">0.958237</span></div><div class="line">Iter <span class="number">11</span>,Testing Accuracy <span class="number">0.9571</span>,Training Accuracy <span class="number">0.961128</span></div><div class="line">Iter <span class="number">12</span>,Testing Accuracy <span class="number">0.9576</span>,Training Accuracy <span class="number">0.963473</span></div><div class="line">Iter <span class="number">13</span>,Testing Accuracy <span class="number">0.9595</span>,Training Accuracy <span class="number">0.964037</span></div><div class="line">Iter <span class="number">14</span>,Testing Accuracy <span class="number">0.9604</span>,Training Accuracy <span class="number">0.965255</span></div><div class="line">Iter <span class="number">15</span>,Testing Accuracy <span class="number">0.9619</span>,Training Accuracy <span class="number">0.966</span></div><div class="line">Iter <span class="number">16</span>,Testing Accuracy <span class="number">0.9621</span>,Training Accuracy <span class="number">0.966928</span></div><div class="line">Iter <span class="number">17</span>,Testing Accuracy <span class="number">0.9634</span>,Training Accuracy <span class="number">0.968091</span></div><div class="line">Iter <span class="number">18</span>,Testing Accuracy <span class="number">0.9643</span>,Training Accuracy <span class="number">0.968691</span></div><div class="line">Iter <span class="number">19</span>,Testing Accuracy <span class="number">0.9659</span>,Training Accuracy <span class="number">0.970237</span></div><div class="line">Iter <span class="number">20</span>,Testing Accuracy <span class="number">0.9656</span>,Training Accuracy <span class="number">0.971128</span></div><div class="line">Iter <span class="number">21</span>,Testing Accuracy <span class="number">0.9653</span>,Training Accuracy <span class="number">0.971218</span></div><div class="line">Iter <span class="number">22</span>,Testing Accuracy <span class="number">0.9667</span>,Training Accuracy <span class="number">0.971873</span></div><div class="line">Iter <span class="number">23</span>,Testing Accuracy <span class="number">0.9676</span>,Training Accuracy <span class="number">0.973655</span></div><div class="line">Iter <span class="number">24</span>,Testing Accuracy <span class="number">0.9675</span>,Training Accuracy <span class="number">0.973546</span></div><div class="line">Iter <span class="number">25</span>,Testing Accuracy <span class="number">0.9695</span>,Training Accuracy <span class="number">0.974637</span></div><div class="line">Iter <span class="number">26</span>,Testing Accuracy <span class="number">0.97</span>,Training Accuracy <span class="number">0.975618</span></div><div class="line">Iter <span class="number">27</span>,Testing Accuracy <span class="number">0.9688</span>,Training Accuracy <span class="number">0.9752</span></div><div class="line">Iter <span class="number">28</span>,Testing Accuracy <span class="number">0.969</span>,Training Accuracy <span class="number">0.976928</span></div><div class="line">Iter <span class="number">29</span>,Testing Accuracy <span class="number">0.9695</span>,Training Accuracy <span class="number">0.976491</span></div><div class="line">Iter <span class="number">30</span>,Testing Accuracy <span class="number">0.971</span>,Training Accuracy <span class="number">0.977219</span></div><div class="line">In [ ]:</div><div class="line"></div><div class="line"></div><div class="line">Iter <span class="number">29</span>,Testing Accuracy <span class="number">0.9727</span>,Training Accuracy <span class="number">0.995655</span></div><div class="line">Iter <span class="number">30</span>,Testing Accuracy <span class="number">0.9722</span>,Training Accuracy <span class="number">0.995782</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;非线性激励&quot;&gt;&lt;a href=&quot;#非线性激励&quot; class=&quot;headerlink&quot; title=&quot;非线性激励&quot;&gt;&lt;/a&gt;非线性激励&lt;/h4&gt;&lt;p&gt; &lt;img src=&quot;http://i.imgur.com/iL6Sgxy.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ul
    
    </summary>
    
      <category term="深度学习" scheme="http://yoursite.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="TensorFlow" scheme="http://yoursite.com/tags/TensorFlow/"/>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="非线性回归" scheme="http://yoursite.com/tags/%E9%9D%9E%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>TensorFlow 代价函数 拟合 激活函数</title>
    <link href="http://yoursite.com/2017/06/02/TensorFlow/%E4%BB%A3%E4%BB%B7%E5%87%BD%E6%95%B0&amp;%E6%8B%9F%E5%90%88&amp;%E6%BF%80%E6%B4%BB%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2017/06/02/TensorFlow/代价函数&amp;拟合&amp;激活函数/</id>
    <published>2017-06-02T14:28:09.158Z</published>
    <updated>2017-06-02T14:35:45.798Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://i.imgur.com/y0La0tZ.png" alt=""></p>
<h4 id="二次代价函数-quadratic-cost"><a href="#二次代价函数-quadratic-cost" class="headerlink" title="二次代价函数(quadratic cost)"></a>二次代价函数(quadratic cost)</h4><p><img src="http://i.imgur.com/Gx4BC6S.png" alt=""></p>
<ul>
<li>其中，C表示代价函数，x表示样本，y表示实际值，a表示输出值，n表示样本的总数。为简单起见 ，同样一个样本为例进行说明，此时二次代价函数为：</li>
<li>a=σ(z),  z=∑Wj*Xj+b </li>
<li>σ() 是激活函数</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://i.imgur.com/y0La0tZ.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;二次代价函数-quadratic-cost&quot;&gt;&lt;a href=&quot;#二次代价函数-quadratic-cost&quot; class=&quot;headerlink&quot; 
    
    </summary>
    
      <category term="深度学习" scheme="http://yoursite.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="TensorFlow" scheme="http://yoursite.com/tags/TensorFlow/"/>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>队列相关算法（最短路径条数问题,拓扑排序）</title>
    <link href="http://yoursite.com/2017/06/02/%E7%AE%97%E6%B3%95/%E9%98%9F%E5%88%97%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/2017/06/02/算法/队列算法/</id>
    <published>2017-06-02T07:33:20.480Z</published>
    <updated>2017-06-02T10:20:23.923Z</updated>
    
    <content type="html"><![CDATA[<h4 id="queue"><a href="#queue" class="headerlink" title="queue"></a>queue</h4><ul>
<li>队列是一种特殊的线性表，只允许在表的前端front进行删除操作，在表的后端rear进行插入操作，和栈一样，队列是一种操作受限制的线性表。进行插入操作的端称为队尾，进行删除操作的端称为队头。</li>
<li>队列元素服从先进先出原则<ul>
<li>FIFO——First In First Out</li>
</ul>
</li>
</ul>
<h4 id="最短路径条数问题"><a href="#最短路径条数问题" class="headerlink" title="最短路径条数问题"></a>最短路径条数问题</h4><ul>
<li>给定如图所示的无向连通图，假定图中所有边的权值都为1，显然，从源点A到终点T的 最短路径有多条，求不同的最短路径的数目。<br><img src="http://i.imgur.com/KSt4BSg.png" alt=""></li>
</ul>
<h5 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h5><ul>
<li>权值相同的<font color="red">最短路径问题</font>，则<font color="red">单源点Dijkstra算法</font>退化成BFS广度优先搜索，假定起点为0，终点为N： <ul>
<li>结点步数step[0…N-1]初始化为0 </li>
<li>路径数目pathNum[0…N-1]初始化为0 </li>
<li>pathNum[0] = 1 </li>
</ul>
</li>
<li>若从<font color="red">当前结点i</font>扩展到<font color="blue">邻接点j</font>时： <ul>
<li>若step[j]为0，则 <ul>
<li><font color="blue">step[j]</font>=<font color="red">step[i]+1</font>，<font color="blue">pathN[j]</font> = <font color="red">pathN[i]</font> </li>
</ul>
</li>
<li>若step[j]==step[i]+1，则 <ul>
<li><font color="blue">pathN[j]</font> += <font color="red">pathN[i]</font> </li>
</ul>
</li>
<li>可考虑一旦扩展到结点N，则提前终止算法。</li>
</ul>
</li>
</ul>
<h5 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> _tmain(<span class="keyword">int</span> argc, _TCHAR *argv[])</div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> G[N][N];</div><div class="line">    <span class="built_in">memset</span>(G, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="keyword">int</span>) * N * N);</div><div class="line">    G[<span class="number">0</span>][<span class="number">1</span>] = G[<span class="number">0</span>][<span class="number">4</span>] = <span class="number">1</span>;</div><div class="line">    G[<span class="number">1</span>][<span class="number">5</span>] = G[<span class="number">1</span>][<span class="number">0</span>] = G[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">1</span>;</div><div class="line">    G[<span class="number">3</span>][<span class="number">2</span>] = G[<span class="number">3</span>][<span class="number">7</span>] = <span class="number">1</span>;</div><div class="line">    G[<span class="number">4</span>][<span class="number">0</span>] = G[<span class="number">4</span>][<span class="number">5</span>] = <span class="number">1</span>;</div><div class="line">    G[<span class="number">5</span>][<span class="number">1</span>] = G[<span class="number">5</span>][<span class="number">4</span>] = G[<span class="number">5</span>][<span class="number">6</span>] = G[<span class="number">5</span>][<span class="number">9</span>];</div><div class="line">    G[<span class="number">6</span>][<span class="number">2</span>] = G[<span class="number">6</span>][<span class="number">5</span>] = G[<span class="number">6</span>][<span class="number">7</span>] = G[<span class="number">6</span>][<span class="number">10</span>] = <span class="number">1</span>;</div><div class="line">    G[<span class="number">7</span>][<span class="number">3</span>] = G[<span class="number">7</span>][<span class="number">6</span>] = <span class="number">1</span>;</div><div class="line">    G[<span class="number">8</span>][<span class="number">9</span>] = G[<span class="number">8</span>][<span class="number">12</span>] = <span class="number">1</span>;</div><div class="line">    G[<span class="number">9</span>][<span class="number">8</span>] = G[<span class="number">9</span>][<span class="number">10</span>] = G[<span class="number">9</span>][<span class="number">13</span>] = <span class="number">1</span>;</div><div class="line">    G[<span class="number">10</span>][<span class="number">6</span>] = G[<span class="number">10</span>][<span class="number">9</span>] = G[<span class="number">10</span>][<span class="number">11</span>] = G[<span class="number">10</span>][<span class="number">14</span>] = <span class="number">1</span>;</div><div class="line">    G[<span class="number">11</span>][<span class="number">10</span>] = G[<span class="number">11</span>][<span class="number">15</span>] = <span class="number">1</span>;</div><div class="line">    G[<span class="number">12</span>][<span class="number">8</span>] = G[<span class="number">12</span>][<span class="number">13</span>] = <span class="number">1</span>;</div><div class="line">    G[<span class="number">13</span>][<span class="number">9</span>] = G[<span class="number">13</span>][<span class="number">12</span>] = G[<span class="number">13</span>][<span class="number">14</span>] = <span class="number">1</span>;</div><div class="line">    G[<span class="number">14</span>][<span class="number">10</span>] = G[<span class="number">14</span>][<span class="number">13</span>] = G[<span class="number">14</span>][<span class="number">15</span>] = <span class="number">1</span>;</div><div class="line">    G[<span class="number">15</span>][<span class="number">11</span>] = G[<span class="number">15</span>][<span class="number">14</span>] = <span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; Calc(G) &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://i.imgur.com/KSt4BSg.png" alt=""><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">16</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">Calc</span><span class="params">(<span class="keyword">int</span> G[N][N])</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> step[N];       <span class="comment">//每个节点第几步可以到达</span></div><div class="line">    <span class="keyword">int</span> stepNumber[N]; <span class="comment">//每个节点有几种走法</span></div><div class="line">    <span class="built_in">memset</span>(step, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="keyword">int</span>) * N);</div><div class="line">    <span class="built_in">memset</span>(stepNumber, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="keyword">int</span>) * N);</div><div class="line">    stepNumber[<span class="number">0</span>] = <span class="number">1</span>; <span class="comment">//无向图可以第一步到第一步，即A到A</span></div><div class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;      <span class="comment">//当前搜索的节点</span></div><div class="line">    q.push(<span class="number">0</span>);</div><div class="line">    <span class="keyword">int</span> from, i, s;</div><div class="line">    <span class="keyword">while</span> (!q.empty())</div><div class="line">    &#123;</div><div class="line">        form = q.front();</div><div class="line">        q.pop();</div><div class="line">        s = step[from] + <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; N; i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span> (G[from][i] == <span class="number">1</span>)</div><div class="line">            &#123; <span class="comment">//连通</span></div><div class="line">                <span class="comment">//i尚未可达或发现更快的路（权值不同才可能）</span></div><div class="line">                <span class="keyword">if</span> ((step[i] == <span class="number">0</span>) || (step[i] &gt; s))</div><div class="line">                &#123;</div><div class="line">                    step[i] = s;</div><div class="line">                    stepNumber[i] = stepNumber[from];</div><div class="line">                    q.push(i);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (step[i] == s)</div><div class="line">                &#123; <span class="comment">//发现相同的路径</span></div><div class="line">                    stepNumber[i] += stepNumber[from];</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a>拓扑排序</h4><ul>
<li>对一个有向无环图(Directed Acyclic Graph， DAG)G进行拓扑排序，是将G中所有顶点排 成线性序列，使得图中任意一对顶点u和v， 若边(u,v)∈E(G)，则u在线性序列中出现在v 之前。 </li>
<li>一种可能的拓扑排序结果 2-&gt;8-&gt;0-&gt;3-&gt;7-&gt;1-&gt;5-&gt;6 -&gt;9-&gt;4-&gt;11-&gt;10-&gt;12<br><img src="http://i.imgur.com/Nms64TO.png" alt=""></li>
</ul>
<h5 id="拓扑排序的方法"><a href="#拓扑排序的方法" class="headerlink" title="拓扑排序的方法"></a>拓扑排序的方法</h5><ul>
<li>从有向图中选择一个没有前驱(即入度为0)的 顶点并且输出它； </li>
<li>从网中删去该顶点，并且删去从该顶点发出 的全部有向边；</li>
<li>重复上述两步，直到剩余的网中不再存在没 有前趋的顶点为止。<br><img src="http://i.imgur.com/FwYYLbs.png" alt=""></li>
</ul>
<h5 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//结点数为n，用邻接矩阵gragh[n][n]存储边权</span></div><div class="line"><span class="comment">//用indegree[n]存储每一个结点的入度</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">toplogic</span><span class="params">(<span class="keyword">int</span> *topsort)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;  <span class="comment">//当前拓扑排序列表有多少结点</span></div><div class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q; <span class="comment">//保存入度为0的结点，还可以用栈甚至随机取</span></div><div class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (indegree[i] == <span class="number">0</span>)</div><div class="line">            q.push(i);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> cur; <span class="comment">//当前入度为0的结点</span></div><div class="line">    <span class="keyword">while</span> (!e.empty)</div><div class="line">    &#123;</div><div class="line">        cur = q.front();</div><div class="line">        q.pop();</div><div class="line">        toposort[cnt++] = cur;</div><div class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span> (gragh[cur][i] != <span class="number">0</span>)</div><div class="line">            &#123;</div><div class="line">                indegree[i]--;</div><div class="line">                q.push(i);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;queue&quot;&gt;&lt;a href=&quot;#queue&quot; class=&quot;headerlink&quot; title=&quot;queue&quot;&gt;&lt;/a&gt;queue&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;队列是一种特殊的线性表，只允许在表的前端front进行删除操作，在表的后端rear进行插入操作，和栈一样
    
    </summary>
    
      <category term="算法与数据结构" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="算法与数据结构" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="队列" scheme="http://yoursite.com/tags/%E9%98%9F%E5%88%97/"/>
    
      <category term="queue" scheme="http://yoursite.com/tags/queue/"/>
    
      <category term="无向图" scheme="http://yoursite.com/tags/%E6%97%A0%E5%90%91%E5%9B%BE/"/>
    
      <category term="有向无环图" scheme="http://yoursite.com/tags/%E6%9C%89%E5%90%91%E6%97%A0%E7%8E%AF%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>goWeb基础（http服务器+模板）</title>
    <link href="http://yoursite.com/2017/06/02/go/GoWeb%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2017/06/02/go/GoWeb基础/</id>
    <published>2017-06-02T06:00:18.697Z</published>
    <updated>2017-06-02T06:00:12.757Z</updated>
    
    <content type="html"><![CDATA[<p>####使用go get下载安装bee工具与Beego</p>
<ul>
<li>Bee:<a href="https://github.com/astaxie/bee" target="_blank" rel="external">https://github.com/astaxie/bee</a></li>
<li>Beego:<a href="https://github.com/astaxie/beego" target="_blank" rel="external">https://github.com/astaxie/beego</a> <figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">安装</div><div class="line"><span class="keyword">go</span> get github.com/astaxie/beego</div><div class="line">更新</div><div class="line"><span class="keyword">go</span> get -u github.com/astaxie/beego</div><div class="line">安装</div><div class="line"><span class="keyword">go</span> get github.com/beego/bee</div><div class="line">更新</div><div class="line"><span class="keyword">go</span> get -u github.com/beego/bee</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="简单示例"><a href="#简单示例" class="headerlink" title="简单示例"></a>简单示例</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"github.com/astaxie/beego"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">type</span> HomeCOntroller <span class="keyword">struct</span> &#123;</div><div class="line">	beego.Controller</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *HomeCOntroller)</span> <span class="title">Get</span><span class="params">()</span></span> &#123;</div><div class="line">	this.Ctx.WriteString(<span class="string">"hello world"</span>)</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	beego.Router(<span class="string">"/"</span>, &amp;HomeCOntroller&#123;&#125;)</div><div class="line">	beego.Run()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"io"</span></div><div class="line">	<span class="string">"log"</span></div><div class="line">	<span class="string">"net/http"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	<span class="comment">//设置路由</span></div><div class="line">	http.HandleFunc(<span class="string">"/"</span>, sayhello)</div><div class="line">	err := http.ListenAndServe(<span class="string">":8081"</span>, <span class="literal">nil</span>)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		log.Fatal(err)</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">sayhello</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</div><div class="line">	io.WriteString(w, <span class="string">"hello world,this is version 1."</span>)</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"io"</span></div><div class="line">	<span class="string">"log"</span></div><div class="line">	<span class="string">"net/http"</span></div><div class="line">    <span class="string">"os"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	mux := http.NewServeMux()</div><div class="line"></div><div class="line">	mux.Handle(<span class="string">"/"</span>, &amp;myHandler&#123;&#125;)</div><div class="line">	mux.HandleFunc(<span class="string">"/hello"</span>, sayhello)</div><div class="line">    <span class="comment">/*</span></div><div class="line">    绝对路径</div><div class="line">    wd,err := os.Getwd()</div><div class="line">    if err != nil&#123;</div><div class="line">        log.Fatal(err)</div><div class="line">    &#125;</div><div class="line">    mux.Handel('/static',http.FileServer(http.Dir()wd))</div><div class="line">    */</div><div class="line">	err := http.ListenAndServe(<span class="string">":8081"</span>, mux)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		log.Fatal(err)</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">type</span> myHandler <span class="keyword">struct</span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(*myHandler)</span> <span class="title">ServeHTTP</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</div><div class="line">	io.WriteString(w, <span class="string">"URL:"</span>+r.URL.String())</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">sayhello</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</div><div class="line">	io.WriteString(w, <span class="string">"hello world,this is version 1."</span>)</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="最底层实现，效率交高"><a href="#最底层实现，效率交高" class="headerlink" title="最底层实现，效率交高"></a>最底层实现，效率交高</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"log"</span></div><div class="line">	<span class="string">"net/http"</span></div><div class="line">	<span class="string">"os"</span></div><div class="line">	<span class="string">"os/signal"</span></div><div class="line">	<span class="string">"time"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	server := &amp;http.Server&#123;</div><div class="line">		Addr:         <span class="string">":4000"</span>,</div><div class="line">		WriteTimeout: time.Second * <span class="number">2</span>, <span class="comment">// 4</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	quit := <span class="built_in">make</span>(<span class="keyword">chan</span> os.Signal)</div><div class="line">	signal.Notify(quit, os.Interrupt)</div><div class="line"></div><div class="line">	mux := http.NewServeMux()</div><div class="line">	mux.Handle(<span class="string">"/"</span>, &amp;myHandler&#123;&#125;)</div><div class="line">	mux.HandleFunc(<span class="string">"/bye"</span>, sayBye)</div><div class="line"></div><div class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</div><div class="line">		&lt;-quit</div><div class="line"></div><div class="line">		<span class="keyword">if</span> err := server.Close(); err != <span class="literal">nil</span> &#123;</div><div class="line">			log.Fatal(<span class="string">"Close server:"</span>, err)</div><div class="line">		&#125;</div><div class="line">	&#125;()</div><div class="line"></div><div class="line">	server.Handler = mux</div><div class="line">	log.Print(<span class="string">"Starting server... v3"</span>)</div><div class="line">	err := server.ListenAndServe()</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		<span class="keyword">if</span> err == http.ErrServerClosed &#123;</div><div class="line">			log.Print(<span class="string">"Server closed under request"</span>)</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			log.Fatal(<span class="string">"Server closed unexpected"</span>)</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">sayBye</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</div><div class="line">	time.Sleep(<span class="number">3</span> * time.Second)</div><div class="line">	w.Write([]<span class="keyword">byte</span>(<span class="string">"Bye bye this is version 3!"</span>))</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">type</span> myHandler <span class="keyword">struct</span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(*myHandler)</span> <span class="title">ServeHTTP</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</div><div class="line">	w.Write([]<span class="keyword">byte</span>(<span class="string">"Hello v3, the request URL is: "</span> + r.URL.String()))</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"fmt"</span></div><div class="line">	<span class="string">"html/template"</span></div><div class="line">	<span class="string">"log"</span></div><div class="line">	<span class="string">"net/http"</span></div><div class="line">	<span class="string">"os"</span></div><div class="line">	<span class="string">"path/filepath"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">type</span> Package <span class="keyword">struct</span> &#123;</div><div class="line">	Name     <span class="keyword">string</span></div><div class="line">	NumFuncs <span class="keyword">int</span></div><div class="line">	NumVars  <span class="keyword">int</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	wd, err := os.Getwd()</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		log.Fatalf(<span class="string">"Getwd: %v"</span>, err)</div><div class="line">	&#125;</div><div class="line">	log.Print(<span class="string">"Work directory:"</span>, wd)</div><div class="line"></div><div class="line">	http.HandleFunc(<span class="string">"/"</span>, <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</div><div class="line">		<span class="comment">// tmpl := template.Must(template.ParseFiles(filepath.Join(wd, "main_v2.tmpl")))</span></div><div class="line">		tmpl, err := template.ParseFiles(filepath.Join(wd, <span class="string">"main_v2.tmpl"</span>))</div><div class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">			fmt.Fprintf(w, <span class="string">"Parse: %v"</span>, err)</div><div class="line">			<span class="keyword">return</span></div><div class="line">		&#125;</div><div class="line">		err = tmpl.Execute(w, &amp;Package&#123;</div><div class="line">			Name:     <span class="string">"go-web"</span>,</div><div class="line">			NumFuncs: <span class="number">12</span>,</div><div class="line">			NumVars:  <span class="number">1200</span>,</div><div class="line">		&#125;)</div><div class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">			fmt.Fprintf(w, <span class="string">"Execute: %v"</span>, err)</div><div class="line">			<span class="keyword">return</span></div><div class="line">		&#125;</div><div class="line">	&#125;)</div><div class="line"></div><div class="line">	log.Print(<span class="string">"Starting server..."</span>)</div><div class="line">	log.Fatal(http.ListenAndServe(<span class="string">":4000"</span>, <span class="literal">nil</span>))</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line">main_v2.tmpl</div><div class="line"></div><div class="line">Package name: &#123;&#123;.Name&#125;&#125;</div><div class="line">Number of functions: &#123;&#123;.NumFuncs&#125;&#125;</div><div class="line">Number of variables: &#123;&#123;.NumVars&#125;&#125;</div><div class="line"></div><div class="line">err = tmpl.Execute(w, r)</div><div class="line">main_v2.tmpl</div><div class="line">Method:&#123;&#123;.Method&#125;&#125;</div><div class="line">URL:&#123;&#123;.URL.Path&#125;&#125;</div><div class="line">Header:&#123;&#123;.Header.Get "User-Agent"&#125;&#125;  //.Header.Get方法  User-Agent是其Get方法的参数</div><div class="line"></div><div class="line">main_v2.tmpl</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;title&gt;</div><div class="line">        GO Web</div><div class="line">    &lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">    &lt;p&gt;Package info:&lt;/p&gt;</div><div class="line">    &lt;ul&gt;</div><div class="line">        &lt;li&gt;Package name:&#123;&#123;.Name&#125;&#125;&lt;/li&gt;</div><div class="line">        &lt;li&gt;Number of functions:&#123;&#123;&gt;NumFuncs&#125;&#125;&lt;/li&gt;</div><div class="line">        &lt;li&gt;Number of variables:&#123;&#123;&gt;NumFuncs&#125;&#125;&lt;/li&gt;</div><div class="line"></div><div class="line">    &lt;/ul&gt;</div><div class="line">&lt;/body&gt;</div><div class="line"></div><div class="line">&lt;/html&gt;</div><div class="line">设置变量</div><div class="line">score:= r.FormValue("score")</div><div class="line">err = tmpl.Exexute(w,score)</div><div class="line"></div><div class="line">&#123;&#123;if .&#125;&#125;</div><div class="line">        score is &#123;&#123;.&#125;&#125;</div><div class="line">    &#123;&#123;else&#125;&#125;</div><div class="line">            no score</div><div class="line">    &#123;&#123;end&#125;&#125;</div><div class="line">num,_:=strconv.Atoi(score)//字符串转换为int</div><div class="line">&#123;&#123;if gt .90&#125;&#125; secore&gt;90</div><div class="line"></div><div class="line">err = tmpl.Exexute(w,r)</div><div class="line">遍历Header</div><div class="line">&#123;&#123;range $key,%value := .Header&#125;&#125;</div><div class="line">	&#123;&#123;.&#125;&#125;</div><div class="line">	&lt;p&gt;</div><div class="line">		Method:&#123;&#123;$Method&#125;&#125;</div><div class="line">		Key:&#123;&#123;$key&#125;&#125;,Value:&#123;&#123;$value&#125;&#125;</div><div class="line">	&lt;/p&gt;</div><div class="line">&#123;&#123;end&#125;&#125;</div><div class="line"></div><div class="line">&#123;&#123;.URL.Scheme&#125;&#125;</div><div class="line">&#123;&#123;.URL.User&#125;&#125;</div><div class="line">&#123;&#123;.URL.Host&#125;&#125;</div><div class="line">&#123;&#123;.URL.Path&#125;&#125;</div><div class="line">&#123;&#123;with .URL&#125;&#125;</div><div class="line">	&#123;&#123;.Scheme&#125;&#125;</div><div class="line">	&#123;&#123;.User&#125;&#125;</div><div class="line">	&#123;&#123;.Host&#125;&#125;</div><div class="line">	&#123;&#123;.Path&#125;&#125;</div><div class="line">&#123;&#123;end&#125;&#125;</div><div class="line"></div><div class="line"></div><div class="line">err = tmpl.Execute(w,map[string]interface&#123;&#125;&#123;</div><div class="line">	"Request":r,</div><div class="line">	"Score":97</div><div class="line">&#125;)</div><div class="line">&#123;&#123;.Request&#125;&#125;</div><div class="line">&#123;&#123;.Score&#125;&#125;</div><div class="line">*/</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;####使用go get下载安装bee工具与Beego&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Bee:&lt;a href=&quot;https://github.com/astaxie/bee&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/a
    
    </summary>
    
      <category term="go" scheme="http://yoursite.com/categories/go/"/>
    
    
      <category term="go" scheme="http://yoursite.com/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>TensorFlow MNIST数据集分类</title>
    <link href="http://yoursite.com/2017/06/01/TensorFlow/MNIST%E6%95%B0%E6%8D%AE%E9%9B%86%E5%88%86%E7%B1%BB/"/>
    <id>http://yoursite.com/2017/06/01/TensorFlow/MNIST数据集分类/</id>
    <published>2017-06-01T14:22:11.947Z</published>
    <updated>2017-06-02T12:29:21.279Z</updated>
    
    <content type="html"><![CDATA[<h4 id="MNIST数据集"><a href="#MNIST数据集" class="headerlink" title="MNIST数据集"></a>MNIST数据集</h4><ul>
<li>MNIST数据集的官网：<a href="http://yann.lecun.com/exdb/mnist/" target="_blank" rel="external">Yann LeCun’s website</a> </li>
<li>下载下来的数据集被分成两部分：60000行的训练数据集（mnist.train）和10000行的测试数据 集（mnist.test）<br>  <img src="http://i.imgur.com/hdmAsXj.png" alt=""></li>
<li>每一张图片包含28*28个像素，我们把这一个数组展开成一个向量，长度是28*28=784。因此在 MNIST训练数据集中mnist.train.images 是一个形状为 [60000, 784] 的张量，第一个维度数字用 来索引图片，第二个维度数字用来索引每张图片中的像素点。图片里的某个像素的强度值介于0-1 之间。<br><img src="http://i.imgur.com/FGRiusz.png" alt=""><br><img src="http://i.imgur.com/mtJ4Qyo.png" alt=""></li>
<li>MNIST数据集的标签是介于0-9的数字，我们要把标签转化为“one-hot vectors”。一个onehot向量除了某一位数字是1以外，其余维度数字都是0，比如标签0将表示为([1,0,0,0,0,0,0,0,0,0]) ，标签3将表示为([0,0,0,1,0,0,0,0,0,0]) 。 </li>
<li>因此， mnist.train.labels 是一个 [60000, 10] 的数字矩阵。<br><img src="http://i.imgur.com/mhxiCpp.png" alt=""><h4 id="神经网络构建"><a href="#神经网络构建" class="headerlink" title="神经网络构建"></a>神经网络构建</h4></li>
</ul>
<p><img src="http://i.imgur.com/UnEYyU9.png" alt=""></p>
<h4 id="Softmax函数"><a href="#Softmax函数" class="headerlink" title="Softmax函数"></a>Softmax函数</h4><ul>
<li>我们知道MNIST的结果是0-9，我们的模型可能推测出一张图片是数字9的概率是80%，是数字8 的概率是10%，然后其他数字的概率更小，总体概率加起来等于1。这是一个使用softmax回归模 型的经典案例。softmax模型可以用来给不同的对象分配概率。<br><img src="http://i.imgur.com/GcU3k6o.png" alt=""></li>
<li>比如输出结果为[1,5,3]<br><img src="http://i.imgur.com/JLe14k6.png" alt=""></li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># coding: utf-8</span></div><div class="line"></div><div class="line"><span class="comment"># In[2]:</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</div><div class="line"><span class="keyword">from</span> tensorflow.examples.tutorials.mnist <span class="keyword">import</span> input_data</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># In[3]:</span></div><div class="line"></div><div class="line"><span class="comment">#载入数据集</span></div><div class="line"><span class="comment">#"MNIST_data" 数据集和程序在同一个路径下面</span></div><div class="line"><span class="comment">#one_hot=True 1转化[1,0,0,0,0,0,0,0,0,0]</span></div><div class="line">mnist = input_data.read_data_sets(<span class="string">"MNIST_data"</span>,one_hot=<span class="keyword">True</span>)</div><div class="line"></div><div class="line"><span class="comment">#每个批次的大小</span></div><div class="line">batch_size = <span class="number">100</span></div><div class="line"><span class="comment">#计算一共有多少个批次</span></div><div class="line"><span class="comment">#mnist.train.num_examples 数据的数量 // 整除</span></div><div class="line">n_batch = mnist.train.num_examples // batch_size</div><div class="line"></div><div class="line"><span class="comment">#定义两个placeholder</span></div><div class="line"><span class="comment"># 输入层的节点数。对于MNIST数据集，这个就等于图片的像素。   </span></div><div class="line"><span class="comment"># 输出层的节点数。这个等于类别的数目。因为在MNIST数据集中</span></div><div class="line"><span class="comment"># 需要区分的是0~9这10个数字，所以这里输出层的节点数为10。</span></div><div class="line"></div><div class="line">x = tf.placeholder(tf.float32,[<span class="keyword">None</span>,<span class="number">784</span>])</div><div class="line">y = tf.placeholder(tf.float32,[<span class="keyword">None</span>,<span class="number">10</span>])</div><div class="line"></div><div class="line"><span class="comment">#创建一个简单的神经网络</span></div><div class="line">W = tf.Variable(tf.zeros([<span class="number">784</span>,<span class="number">10</span>]))</div><div class="line">b = tf.Variable(tf.zeros([<span class="number">10</span>]))</div><div class="line">prediction = tf.nn.softmax(tf.matmul(x,W)+b)</div><div class="line"></div><div class="line"><span class="comment">#二次代价函数</span></div><div class="line">loss = tf.reduce_mean(tf.square(y-prediction))</div><div class="line"><span class="comment">#使用梯度下降法</span></div><div class="line">train_step = tf.train.GradientDescentOptimizer(<span class="number">0.2</span>).minimize(loss)</div><div class="line"></div><div class="line"><span class="comment">#初始化变量</span></div><div class="line">init = tf.global_variables_initializer()</div><div class="line"></div><div class="line"><span class="comment">#结果存放在一个布尔型列表中</span></div><div class="line">correct_prediction = tf.equal(tf.argmax(y,<span class="number">1</span>),tf.argmax(prediction,<span class="number">1</span>))<span class="comment">#argmax返回一维张量中最大的值所在的位置</span></div><div class="line"><span class="comment">#求准确率 tf.cast类型转换</span></div><div class="line">accuracy = tf.reduce_mean(tf.cast(correct_prediction,tf.float32))</div><div class="line"></div><div class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</div><div class="line">    sess.run(init)</div><div class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> range(<span class="number">21</span>):</div><div class="line">        <span class="keyword">for</span> batch <span class="keyword">in</span> range(n_batch):</div><div class="line">            batch_xs,batch_ys =  mnist.train.next_batch(batch_size)</div><div class="line">            sess.run(train_step,feed_dict=&#123;x:batch_xs,y:batch_ys&#125;)</div><div class="line">        </div><div class="line">        acc = sess.run(accuracy,feed_dict=&#123;x:mnist.test.images,y:mnist.test.labels&#125;)</div><div class="line">        print(<span class="string">"Iter "</span> + str(epoch) + <span class="string">",Testing Accuracy "</span> + str(acc))</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># In[ ]:</span></div></pre></td></tr></table></figure>
<h4 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</div><div class="line"><span class="keyword">from</span> tensorflow.examples.tutorials.mnist <span class="keyword">import</span> input_data</div><div class="line"></div><div class="line"><span class="comment"># MNIST数据集相关的常数。</span></div><div class="line">INPUT_NODE = <span class="number">784</span>      <span class="comment"># 输入层的节点数。对于MNIST数据集，这个就等于图片的像素。   </span></div><div class="line">OUTPUT_NODE = <span class="number">10</span>     <span class="comment"># 输出层的节点数。这个等于类别的数目。因为在MNIST数据集中</span></div><div class="line">                         <span class="comment"># 需要区分的是0~9这10个数字，所以这里输出层的节点数为10。</span></div><div class="line"></div><div class="line"><span class="comment"># 配置神经网络的参数。</span></div><div class="line">LAYER1_NODE = <span class="number">500</span>   <span class="comment"># 隐藏层节点数。这里使用只有一个隐藏层的网络结构作为样例。</span></div><div class="line">                        <span class="comment"># 这个隐藏层有500个节点。</span></div><div class="line">BATCH_SIZE = <span class="number">100</span>    <span class="comment"># 一个训练batch中的训练数据个数。数字越小时，训练过程越接近</span></div><div class="line">                        <span class="comment"># 随机梯度下降；数字越大时，训练越接近梯度下降。</span></div><div class="line">LEARNING_RATE = <span class="number">0.01</span>           <span class="comment"># 学习率。</span></div><div class="line">TRAINING_STEPS = <span class="number">10000</span>              <span class="comment"># 训练轮数。</span></div><div class="line"></div><div class="line"><span class="comment"># 训练模型的过程。</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">train</span><span class="params">(mnist)</span>:</span></div><div class="line">    x = tf.placeholder(tf.float32, [<span class="keyword">None</span>, INPUT_NODE], name=<span class="string">'x-input'</span>)</div><div class="line">    y_ = tf.placeholder(tf.float32, [<span class="keyword">None</span>, OUTPUT_NODE], name=<span class="string">'y-input'</span>)</div><div class="line">    </div><div class="line">    <span class="comment"># 定义神经网络参数。</span></div><div class="line">weights1 = tf.Variable(</div><div class="line">    tf.truncated_normal([INPUT_NODE, LAYER1_NODE], stddev=<span class="number">0.1</span>))</div><div class="line">bias1 = tf.Variable(tf.constant(<span class="number">0.0</span>, shape=[LAYER1_NODE]))</div><div class="line">weights2 = tf.Variable(</div><div class="line">    tf.truncated_normal([LAYER1_NODE, OUTPUT_NODE], stddev=<span class="number">0.1</span>))</div><div class="line">bias2 = tf.Variable(tf.constant(<span class="number">0.0</span>, shape=[OUTPUT_NODE]))</div><div class="line"></div><div class="line"><span class="comment"># 计算在当前参数下神经网络前向传播的结果。</span></div><div class="line">    layer1 = tf.nn.relu(tf.matmul(input_tensor, weights1) + bias1)</div><div class="line">    y = tf.matmul(layer1, weights2) + bias2</div><div class="line"></div><div class="line"><span class="comment"># 定义存储训练轮数的变量。 </span></div><div class="line">    global_step = tf.Variable(<span class="number">0</span>, trainable=<span class="keyword">False</span>)</div><div class="line">    </div><div class="line"><span class="comment"># 计算交叉熵作为刻画预测值和真实值之间差距的损失函数。</span></div><div class="line">cross_entropy = tf.nn.softmax_cross_entropy_with_logits(</div><div class="line">    labels=y_, logits=y)</div><div class="line">    loss = tf.reduce_mean(cross_entropy)</div><div class="line">           </div><div class="line">    <span class="comment"># 使用tf.train.GradientDescentOptimizer优化算法来优化损失函数。注意这里损失</span></div><div class="line">    <span class="comment"># 函数包含了交叉熵损失和L2正则化损失。</span></div><div class="line">    train_op=tf.train.GradientDescentOptimizer(LEARNING_RATE)\</div><div class="line">                 .minimize(loss, global_step=global_step)</div><div class="line"></div><div class="line">    <span class="comment"># 检验神经网络的正确率。</span></div><div class="line">correct_prediction = tf.equal(tf.argmax(y, <span class="number">1</span>), tf.argmax(y_,<span class="number">1</span>))</div><div class="line">    accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))</div><div class="line">  </div><div class="line">    <span class="comment"># 初始化会话并开始训练过程。</span></div><div class="line">    <span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</div><div class="line">    tf.initialize_all_variables().run()</div><div class="line">    <span class="comment"># 准备验证数据。一般在神经网络的训练过程中会通过验证数据来大致判断停止的</span></div><div class="line">    <span class="comment"># 条件和评判训练的效果。</span></div><div class="line">        validate_feed = &#123;x: mnist.validation.images, </div><div class="line">                             y_: mnist.validation.labels&#125;</div><div class="line"></div><div class="line">    <span class="comment"># 准备测试数据。在真实的应用中，这部分数据在训练时是不可见的，这个数据只是作为  </span></div><div class="line">    <span class="comment"># 模型优劣的最后评价标准。</span></div><div class="line">        test_feed = &#123;x: mnist.test.images, y_: mnist.test.labels&#125;     </div><div class="line"></div><div class="line">        <span class="comment"># 迭代地训练神经网络。</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(TRAINING_STEPS):</div><div class="line">            <span class="comment"># 每1000轮输出一次在验证数据集上的测试结果。</span></div><div class="line">            <span class="keyword">if</span> i % <span class="number">1000</span> == <span class="number">0</span>:</div><div class="line">    validate_acc = sess.run(accuracy, feed_dict=validate_feed)</div><div class="line">                  print(<span class="string">"After %d training step(s), validation accuracy "</span></div><div class="line">                         <span class="string">"using average model is %g "</span> % (i, validate_acc))</div><div class="line">            </div><div class="line">            <span class="comment"># 产生这一轮使用的一个batch的训练数据，并运行训练过程。</span></div><div class="line">            xs, ys = mnist.train.next_batch(BATCH_SIZE)</div><div class="line">            sess.run(train_op, feed_dict=&#123;x: xs, y_: ys&#125;)</div><div class="line"></div><div class="line">        <span class="comment"># 在训练结束之后，在测试数据上检测神经网络模型的最终正确率。</span></div><div class="line">        test_acc = sess.run(accuracy, feed_dict=test_feed)</div><div class="line">    print(<span class="string">"After %d training step(s), test accuracy using average "</span></div><div class="line">           <span class="string">"model is %g"</span> % (TRAINING_STEPS, test_acc))</div><div class="line"> </div><div class="line"><span class="comment"># 主程序入口</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(argv=None)</span>:</span> </div><div class="line">    <span class="comment"># 声明处理MNIST数据集的类，这个类在初始化时会自动下载数据。</span></div><div class="line">    mnist = input_data.read_data_sets(<span class="string">"/tmp/data"</span>, one_hot=<span class="keyword">True</span>)</div><div class="line">    train(mnist)</div><div class="line"></div><div class="line"><span class="comment"># TensorFlow提供的一个主程序入口，tf.app.run会调用上面定义的main函数。</span></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">tf.app.run()</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;MNIST数据集&quot;&gt;&lt;a href=&quot;#MNIST数据集&quot; class=&quot;headerlink&quot; title=&quot;MNIST数据集&quot;&gt;&lt;/a&gt;MNIST数据集&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;MNIST数据集的官网：&lt;a href=&quot;http://yann.lecun.c
    
    </summary>
    
      <category term="深度学习" scheme="http://yoursite.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="TensorFlow" scheme="http://yoursite.com/tags/TensorFlow/"/>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>TensorFlow 传统神经网络之线性回归</title>
    <link href="http://yoursite.com/2017/06/01/TensorFlow/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/"/>
    <id>http://yoursite.com/2017/06/01/TensorFlow/线性回归/</id>
    <published>2017-06-01T13:09:54.700Z</published>
    <updated>2017-06-03T06:12:58.732Z</updated>
    
    <content type="html"><![CDATA[<h5 id="神经网络起源：线性回归"><a href="#神经网络起源：线性回归" class="headerlink" title="神经网络起源：线性回归"></a>神经网络起源：线性回归</h5><ul>
<li>概念: 线性关系来描述输入到输出的映射关系 </li>
<li>应用场景： <ul>
<li>网络分析</li>
<li>银行风险分析</li>
<li>基金股份预测</li>
<li>天气预报</li>
</ul>
</li>
<li><p>一个线性回归问题 </p>
<ul>
<li>目标方程：y=ax1+bx2+cx3+d </li>
<li>参数：m=[a,b,c,d] </li>
<li>数据：[(x1,1,x2,1,x3,1), (x1,2,x2,2,x3,2), …(x1,n,x2,n,x3,n)]<pre><code>[y1,y2…..yn] 
</code></pre></li>
<li>预测：ŷt＝ax1,t+bx2,t+cx3,t+d </li>
</ul>
</li>
<li><p>目标： minimize (ŷt -yt)</p>
</li>
</ul>
<h5 id="优化方法：梯度下降"><a href="#优化方法：梯度下降" class="headerlink" title="优化方法：梯度下降"></a>优化方法：梯度下降</h5><p><img src="http://i.imgur.com/ltdihEu.png" alt=""></p>
<ul>
<li>描述<ul>
<li>山坡高度：Loss </li>
<li>地面位置：参数 </li>
<li>山坡最低点：Loss minimal </li>
<li>最低点位置：目标参数 </li>
<li>怎么到达：下坡方向，梯度下降 </li>
<li>怎么找方向：高度对地面关系导数 </li>
</ul>
</li>
<li>模型参数<ul>
<li>当前 m0 =[a0,b0,c0,d0] </li>
<li>每一步Δm? </li>
<li>参数：m=[a,b,c,d]</li>
</ul>
</li>
<li><p>梯度下降：梯度计算 </p>
<pre><code>Loss=ax1,t+bx2,t+cx3,t+d－y 
</code></pre><p>  <img src="http://i.imgur.com/F6cpekA.png" alt=""></p>
</li>
<li>梯度下降：参数更新 m:=m-ηΔm </li>
<li>梯度下降法总结： <ul>
<li>随机初始化参数</li>
<li>开启循环：t＝0，1，2。。  <ul>
<li>带入数据求出结果ŷt  </li>
<li>与真值比较得到loss＝y－ŷt  </li>
<li>对各个变量求导得到Δm  </li>
<li>更新变量m  </li>
<li>如果loss足够小或t循环结束，停止</li>
</ul>
</li>
</ul>
</li>
</ul>
<h5 id="输出＋"><a href="#输出＋" class="headerlink" title="输出＋"></a>输出＋</h5><ul>
<li>能否同时预测 多个目标？<br><img src="http://i.imgur.com/nSjDjmd.png" alt=""><br>多目标学习，通过合并多个 任务loss，一般能够产生比 单个模型更好的效果。 </li>
</ul>
<h5 id="局限"><a href="#局限" class="headerlink" title="局限"></a>局限</h5><p><img src="http://i.imgur.com/BmMSJAV.png" alt=""><br>线性回归能够清楚的描述分割线性分布的数据，对非线性分布的数据 描述较弱 </p>
<h5 id="tensorFlow代码实现-一个简单线性回归示例"><a href="#tensorFlow代码实现-一个简单线性回归示例" class="headerlink" title="tensorFlow代码实现(一个简单线性回归示例)"></a>tensorFlow代码实现(一个简单线性回归示例)</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line">	</div><div class="line"><span class="comment">#使用numpy生成100个随机点</span></div><div class="line">x_data = np.random.rand(<span class="number">100</span>)</div><div class="line">y_data = x_data*<span class="number">0.1</span> + <span class="number">0.2</span></div><div class="line"></div><div class="line"><span class="comment">#构造一个线性模型</span></div><div class="line">b = tf.Variable(<span class="number">0.</span>)</div><div class="line">k = tf.Variable(<span class="number">0.</span>)</div><div class="line">y = k*x_data +b</div><div class="line"></div><div class="line"><span class="comment">#二次代价函数</span></div><div class="line">loss = tf.reduce_mean(tf.square(y_data-y))<span class="comment">#tf.square 平方  tf.reduce_mean平均值</span></div><div class="line"></div><div class="line"><span class="comment">#定义一个梯度下降法来进行训练的优化器</span></div><div class="line">optimizer = tf.train.GradientDescentOptimizer(<span class="number">0.2</span>)<span class="comment">#学习率0.2</span></div><div class="line"><span class="comment">#最小化代价函数</span></div><div class="line">train = optimizer.minimize(loss)</div><div class="line"></div><div class="line">init = tf.global_variables_initializer()</div><div class="line"></div><div class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</div><div class="line">   	sess.run(init)</div><div class="line">    <span class="keyword">for</span> step <span class="keyword">in</span> range(<span class="number">201</span>):</div><div class="line">        sess.run(train)</div><div class="line">        <span class="keyword">if</span> step%<span class="number">20</span> == <span class="number">0</span>:</div><div class="line">            print(step,sess.run([k,b]))</div><div class="line">-----------------------------------------------</div><div class="line"><span class="number">0</span> [<span class="number">0.054121759</span>, <span class="number">0.10027351</span>]</div><div class="line"><span class="number">20</span> [<span class="number">0.10373501</span>, <span class="number">0.1979759</span>]</div><div class="line"><span class="number">40</span> [<span class="number">0.10221059</span>, <span class="number">0.19880207</span>]</div><div class="line"><span class="number">60</span> [<span class="number">0.10130835</span>, <span class="number">0.19929099</span>]</div><div class="line"><span class="number">80</span> [<span class="number">0.10077434</span>, <span class="number">0.19958037</span>]</div><div class="line"><span class="number">100</span> [<span class="number">0.1004583</span>, <span class="number">0.19975165</span>]</div><div class="line"><span class="number">120</span> [<span class="number">0.10027125</span>, <span class="number">0.199853</span>]</div><div class="line"><span class="number">140</span> [<span class="number">0.10016056</span>, <span class="number">0.19991298</span>]</div><div class="line"><span class="number">160</span> [<span class="number">0.10009503</span>, <span class="number">0.1999485</span>]</div><div class="line"><span class="number">180</span> [<span class="number">0.10005624</span>, <span class="number">0.19996952</span>]</div><div class="line"><span class="number">200</span> [<span class="number">0.10003328</span>, <span class="number">0.19998197</span>]</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;神经网络起源：线性回归&quot;&gt;&lt;a href=&quot;#神经网络起源：线性回归&quot; class=&quot;headerlink&quot; title=&quot;神经网络起源：线性回归&quot;&gt;&lt;/a&gt;神经网络起源：线性回归&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;概念: 线性关系来描述输入到输出的映射关系 &lt;/li&gt;

    
    </summary>
    
      <category term="深度学习" scheme="http://yoursite.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="TensorFlow" scheme="http://yoursite.com/tags/TensorFlow/"/>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="线性回归" scheme="http://yoursite.com/tags/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/"/>
    
  </entry>
  
</feed>
