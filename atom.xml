<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>liuzhupeng的博客</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-09-03T01:53:13.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>刘铸澎</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>redis 之七： Redis 中的事务</title>
    <link href="http://yoursite.com/2018/09/03/redis/redis%20%E4%B9%8B%E4%B8%83%EF%BC%9A%20Redis%20%E4%B8%AD%E7%9A%84%E4%BA%8B%E5%8A%A1/"/>
    <id>http://yoursite.com/2018/09/03/redis/redis 之七： Redis 中的事务/</id>
    <published>2018-09-03T01:54:46.169Z</published>
    <updated>2018-09-03T01:53:13.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Redis支持简单的事务"><a href="#Redis支持简单的事务" class="headerlink" title="Redis支持简单的事务"></a>Redis支持简单的事务</h2><h3 id="Redis与-mysql事务的对比"><a href="#Redis与-mysql事务的对比" class="headerlink" title="Redis与 mysql事务的对比"></a>Redis与 mysql事务的对比</h3><h1 id="Mysql-Redis"><a href="#Mysql-Redis" class="headerlink" title="| Mysql |Redis"></a>| Mysql |Redis</h1><p>—|—|—<br>开启 | start transaction|muitl|<br>语句 | 普通sql| 普通命令|<br>失败 | rollback |discard 取消|<br>成功 | commit| exec|</p>
<ul>
<li>注: rollback与discard 的区别</li>
<li>如果已经成功执行了2条语句, 第3条语句出错.<br>Rollback后,前2条的语句影响消失.</li>
<li>Discard只是结束本次事务,前2条语句造成的影响仍然还在</li>
<li>注:在mutil后面的语句中, 语句出错可能有2种情况<ul>
<li>1: 语法就有问题, 这种,exec时,报错, 所有语句得不到执行</li>
<li>2: 语法本身没错,但适用对象有问题. 比如 zadd 操作list对象<ul>
<li>Exec之后,会执行正确的语句,并跳过有不适当的语句.</li>
<li>(如果zadd操作list这种事怎么避免? 这一点,由程序员负责)</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p>我正在买票</p><br><p>Ticket -1 , money -100</p><br><p>而票只有1张, 如果在我multi之后,和exec之前, 票被别人买了—即ticket变成0了.</p><br><p>我该如何观察这种情景,并不再提交</p><br><p>悲观的想法:<br>世界充满危险,肯定有人和我抢, 给 ticket上锁, 只有我能操作. [悲观锁]</p><br><p>乐观的想法:<br>没有那么人和我抢,因此,我只需要注意,<br>–有没有人更改ticket的值就可以了 [乐观锁]</p>

<h3 id="Redis的事务中-启用的是乐观锁-只负责监测key没有被改动"><a href="#Redis的事务中-启用的是乐观锁-只负责监测key没有被改动" class="headerlink" title="Redis的事务中,启用的是乐观锁,只负责监测key没有被改动."></a>Redis的事务中,启用的是乐观锁,只负责监测key没有被改动.</h3><ul>
<li>具体的命令—-  watch命令<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">redis 127.0.0.1:6379&gt; watch ticket</div><div class="line">OK</div><div class="line">redis 127.0.0.1:6379&gt; multi</div><div class="line">OK</div><div class="line">redis 127.0.0.1:6379&gt; decr ticket</div><div class="line">QUEUED</div><div class="line">redis 127.0.0.1:6379&gt; decrby money 100</div><div class="line">QUEUED</div><div class="line">redis 127.0.0.1:6379&gt; exec</div><div class="line">(nil)   // 返回nil,说明监视的ticket已经改变了,事务就取消了.</div><div class="line">redis 127.0.0.1:6379&gt; get ticket</div><div class="line">&quot;0&quot;</div><div class="line">redis 127.0.0.1:6379&gt; get money</div><div class="line">&quot;200&quot;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="watch-key1-key2-…-keyN"><a href="#watch-key1-key2-…-keyN" class="headerlink" title="watch key1 key2  … keyN"></a>watch key1 key2  … keyN</h2><ul>
<li>作用:监听key1 key2..keyN有没有变化,如果有变, 则事务取消<h2 id="unwatch"><a href="#unwatch" class="headerlink" title="unwatch"></a>unwatch</h2></li>
<li>作用: 取消所有watch监听</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Redis支持简单的事务&quot;&gt;&lt;a href=&quot;#Redis支持简单的事务&quot; class=&quot;headerlink&quot; title=&quot;Redis支持简单的事务&quot;&gt;&lt;/a&gt;Redis支持简单的事务&lt;/h2&gt;&lt;h3 id=&quot;Redis与-mysql事务的对比&quot;&gt;&lt;a hre
    
    </summary>
    
      <category term="redis" scheme="http://yoursite.com/categories/redis/"/>
    
    
      <category term="redis" scheme="http://yoursite.com/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>redis 之六： Hash 哈希数据类型相关命令</title>
    <link href="http://yoursite.com/2018/09/03/redis/redis%20%E4%B9%8B%E5%85%AD%EF%BC%9A%20Hash%20%E5%93%88%E5%B8%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2018/09/03/redis/redis 之六： Hash 哈希数据类型相关命令/</id>
    <published>2018-09-03T01:54:46.165Z</published>
    <updated>2018-09-03T01:24:50.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="hset-key-field-value"><a href="#hset-key-field-value" class="headerlink" title="hset key field value"></a>hset key field value</h4><ul>
<li>作用: 把key中 filed域的值设为value</li>
<li>注:如果没有field域,直接添加,如果有,则覆盖原field域的值</li>
</ul>
<h4 id="hmset-key-field1-value1-field2-value2-field3-value3-……fieldn-valuen"><a href="#hmset-key-field1-value1-field2-value2-field3-value3-……fieldn-valuen" class="headerlink" title="hmset key field1 value1 [field2 value2 field3 value3 ……fieldn valuen]"></a>hmset key field1 value1 [field2 value2 field3 value3 ……fieldn valuen]</h4><ul>
<li>作用: 设置field1-&gt;N 个域, 对应的值是value1-&gt;N</li>
<li>(对应PHP理解为  $key = array(file1=&gt;value1, field2=&gt;value2 ….fieldN=&gt;valueN))</li>
</ul>
<h4 id="hget-key-field"><a href="#hget-key-field" class="headerlink" title="hget key field"></a>hget key field</h4><ul>
<li>作用: 返回key中field域的值</li>
</ul>
<h4 id="hmget-key-field1-field2-fieldN"><a href="#hmget-key-field1-field2-fieldN" class="headerlink" title="hmget key field1 field2 fieldN"></a>hmget key field1 field2 fieldN</h4><ul>
<li>作用: 返回key中field1 field2 fieldN域的值</li>
</ul>
<h4 id="hgetall-key"><a href="#hgetall-key" class="headerlink" title="hgetall key"></a>hgetall key</h4><ul>
<li>作用:返回key中,所有域与其值</li>
</ul>
<h4 id="hdel-key-field"><a href="#hdel-key-field" class="headerlink" title="hdel key field"></a>hdel key field</h4><ul>
<li>作用: 删除key中 field域</li>
</ul>
<h4 id="hlen-key"><a href="#hlen-key" class="headerlink" title="hlen key"></a>hlen key</h4><ul>
<li>作用: 返回key中元素的数量</li>
</ul>
<h4 id="hexists-key-field"><a href="#hexists-key-field" class="headerlink" title="hexists key field"></a>hexists key field</h4><ul>
<li>作用: 判断key中有没有field域</li>
</ul>
<h4 id="hinrby-key-field-value"><a href="#hinrby-key-field-value" class="headerlink" title="hinrby key field value"></a>hinrby key field value</h4><ul>
<li>作用: 是把key中的field域的值增长整型值value</li>
</ul>
<h4 id="hinrby-float-key-field-value"><a href="#hinrby-float-key-field-value" class="headerlink" title="hinrby float  key field value"></a>hinrby float  key field value</h4><ul>
<li>作用: 是把key中的field域的值增长浮点值value</li>
</ul>
<h4 id="hkeys-key"><a href="#hkeys-key" class="headerlink" title="hkeys key"></a>hkeys key</h4><ul>
<li>作用: 返回key中所有的field</li>
</ul>
<h4 id="kvals-key"><a href="#kvals-key" class="headerlink" title="kvals key"></a>kvals key</h4><ul>
<li>作用: 返回key中所有的value</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;hset-key-field-value&quot;&gt;&lt;a href=&quot;#hset-key-field-value&quot; class=&quot;headerlink&quot; title=&quot;hset key field value&quot;&gt;&lt;/a&gt;hset key field value&lt;/h4&gt;&lt;
    
    </summary>
    
      <category term="redis" scheme="http://yoursite.com/categories/redis/"/>
    
    
      <category term="redis" scheme="http://yoursite.com/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>redis 之四： link 链表结构</title>
    <link href="http://yoursite.com/2018/09/03/redis/redis%20%E4%B9%8B%E5%9B%9B%EF%BC%9A%20link%20%E9%93%BE%E8%A1%A8%E7%BB%93%E6%9E%84/"/>
    <id>http://yoursite.com/2018/09/03/redis/redis 之四： link 链表结构/</id>
    <published>2018-09-03T01:14:33.781Z</published>
    <updated>2018-09-03T00:17:22.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="lpush-key-value"><a href="#lpush-key-value" class="headerlink" title="lpush key value"></a>lpush key value</h4><ul>
<li>作用: 把值插入到链接头部<h4 id="rpop-key"><a href="#rpop-key" class="headerlink" title="rpop key"></a>rpop key</h4></li>
<li>作用: 返回并删除链表尾元素</li>
</ul>
<h4 id="rpush-lpop-不解释"><a href="#rpush-lpop-不解释" class="headerlink" title="rpush,lpop: 不解释"></a>rpush,lpop: 不解释</h4><h4 id="lrange-key-start-stop"><a href="#lrange-key-start-stop" class="headerlink" title="lrange key start  stop"></a>lrange key start  stop</h4><ul>
<li>作用: 返回链表中[start ,stop]中的元素</li>
<li>规律: 左数从0开始,右数从-1开始</li>
</ul>
<h4 id="代码练习"><a href="#代码练习" class="headerlink" title="代码练习"></a>代码练习</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; lpush character a</div><div class="line">(integer) 1</div><div class="line">127.0.0.1:6379&gt; rpush character b </div><div class="line">(integer) 2</div><div class="line">127.0.0.1:6379&gt; rpush character c</div><div class="line">(integer) 3</div><div class="line">127.0.0.1:6379&gt; lpush character 0</div><div class="line">(integer) 4</div><div class="line">127.0.0.1:6379&gt; lrange character 1 2</div><div class="line">1) &quot;a&quot;</div><div class="line">2) &quot;b&quot;</div><div class="line">127.0.0.1:6379&gt; lrange character 1 3</div><div class="line">1) &quot;a&quot;</div><div class="line">2) &quot;b&quot;</div><div class="line">3) &quot;c&quot;</div><div class="line">127.0.0.1:6379&gt; lrange character 0 3</div><div class="line">1) &quot;0&quot;</div><div class="line">2) &quot;a&quot;</div><div class="line">3) &quot;b&quot;</div><div class="line">4) &quot;c&quot;</div><div class="line">127.0.0.1:6379&gt; lrange character 0 -1</div><div class="line">1) &quot;0&quot;</div><div class="line">2) &quot;a&quot;</div><div class="line">3) &quot;b&quot;</div><div class="line">4) &quot;c&quot;</div><div class="line">127.0.0.1:6379&gt; lpop character</div><div class="line">&quot;0&quot;</div><div class="line">127.0.0.1:6379&gt; lrange character 0 -1</div><div class="line">1) &quot;a&quot;</div><div class="line">2) &quot;b&quot;</div><div class="line">3) &quot;c&quot;</div><div class="line">127.0.0.1:6379&gt; rpop character</div><div class="line">&quot;c&quot;</div><div class="line">127.0.0.1:6379&gt; lrange character 0 -1</div><div class="line">1) &quot;a&quot;</div><div class="line">2) &quot;b&quot;</div></pre></td></tr></table></figure>
<h4 id="lrem-key-count-value"><a href="#lrem-key-count-value" class="headerlink" title="lrem key count value"></a>lrem key count value</h4><ul>
<li>作用: 从key链表中删除 value值</li>
<li>注: 删除count的绝对值个value后结束<ul>
<li>Count&gt;0 从表头删除</li>
<li>Count&lt;0 从表尾删除<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; lpush answer a b c a b d a</div><div class="line">(integer) 7</div><div class="line">127.0.0.1:6379&gt; lrange answer 0 -1</div><div class="line">1) &quot;a&quot;</div><div class="line">2) &quot;d&quot;</div><div class="line">3) &quot;b&quot;</div><div class="line">4) &quot;a&quot;</div><div class="line">5) &quot;c&quot;</div><div class="line">6) &quot;b&quot;</div><div class="line">7) &quot;a&quot;</div><div class="line">127.0.0.1:6379&gt; lrem answer 1 b</div><div class="line">(integer) 1</div><div class="line">127.0.0.1:6379&gt; lrange answer 0 -1</div><div class="line">1) &quot;a&quot;</div><div class="line">2) &quot;d&quot;</div><div class="line">3) &quot;a&quot;</div><div class="line">4) &quot;c&quot;</div><div class="line">5) &quot;b&quot;</div><div class="line">6) &quot;a&quot;</div><div class="line">127.0.0.1:6379&gt; lrem answer -2 a</div><div class="line">(integer) 2</div><div class="line">127.0.0.1:6379&gt; lrange answer 0 -1</div><div class="line">1) &quot;a&quot;</div><div class="line">2) &quot;d&quot;</div><div class="line">3) &quot;c&quot;</div><div class="line">4) &quot;b&quot;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h4 id="ltrim-key-start-stop"><a href="#ltrim-key-start-stop" class="headerlink" title="ltrim key start stop"></a>ltrim key start stop</h4><ul>
<li>作用: 剪切key对应的链接,切[start,stop]一段,并把该段重新赋给key<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; rpush character a b c d e f</div><div class="line">(integer) 6</div><div class="line">127.0.0.1:6379&gt; lrange character 0 -1</div><div class="line">1) &quot;a&quot;</div><div class="line">2) &quot;b&quot;</div><div class="line">3) &quot;c&quot;</div><div class="line">4) &quot;d&quot;</div><div class="line">5) &quot;e&quot;</div><div class="line">6) &quot;f&quot;</div><div class="line">127.0.0.1:6379&gt; ltrim character 2 5</div><div class="line">OK</div><div class="line">127.0.0.1:6379&gt; lrange character 0 -1</div><div class="line">1) &quot;c&quot;</div><div class="line">2) &quot;d&quot;</div><div class="line">3) &quot;e&quot;</div><div class="line">4) &quot;f&quot;</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="lindex-key-index"><a href="#lindex-key-index" class="headerlink" title="lindex key index"></a>lindex key index</h4><ul>
<li>作用: 返回index索引上的值,</li>
<li>如  lindex key 2</li>
</ul>
<h4 id="llen-key"><a href="#llen-key" class="headerlink" title="llen key"></a>llen key</h4><ul>
<li>作用:计算链接表的元素个数<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">redis 127.0.0.1:6379&gt; llen task</div><div class="line">(integer) 3</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="linsert-key-after-before-search-value"><a href="#linsert-key-after-before-search-value" class="headerlink" title="linsert  key after|before search value"></a>linsert  key after|before search value</h4><ul>
<li>作用: 在key链表中寻找’search’,并在search值之前|之后,.插入value</li>
<li>注: 一旦找到一个search后,命令就结束了,因此不会插入多个value</li>
</ul>
<h4 id="rpoplpush-source-dest"><a href="#rpoplpush-source-dest" class="headerlink" title="rpoplpush source dest"></a>rpoplpush source dest</h4><ul>
<li>作用: 把source的尾部拿出,放在dest的头部,并返回 该单元值</li>
<li><p>场景: task + bak 双链表完成安全队列</p>
<ul>
<li><p>Task列表</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">----------</div><div class="line">|  |  |  |</div><div class="line">----------</div></pre></td></tr></table></figure>
</li>
<li><p>bak列表</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">----------</div><div class="line">|  |  |  |</div><div class="line">----------</div></pre></td></tr></table></figure>
</li>
<li><p>业务逻辑:</p>
<ul>
<li>1:Rpoplpush task bak</li>
<li>2:接收返回值,并做业务处理</li>
<li>3:如果成功,rpop bak 清除任务. 如不成功,下次从bak表里取任务</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="brpop-blpop-key-timeout"><a href="#brpop-blpop-key-timeout" class="headerlink" title="brpop ,blpop  key timeout"></a>brpop ,blpop  key timeout</h4><ul>
<li>作用:等待弹出key的尾/头元素, </li>
<li>Timeout为等待超时时间</li>
<li>如果timeout为0,则一直等待</li>
<li>场景: 长轮询Ajax,在线聊天时,能够用到</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;lpush-key-value&quot;&gt;&lt;a href=&quot;#lpush-key-value&quot; class=&quot;headerlink&quot; title=&quot;lpush key value&quot;&gt;&lt;/a&gt;lpush key value&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;作用: 把值插入到链接头
    
    </summary>
    
      <category term="redis" scheme="http://yoursite.com/categories/redis/"/>
    
    
      <category term="redis" scheme="http://yoursite.com/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>redis 之 五： 集合 set 相关命令</title>
    <link href="http://yoursite.com/2018/09/03/redis/redis%20%E4%B9%8B%E4%BA%94%EF%BC%9A%20%E9%9B%86%E5%90%88%20set%20%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2018/09/03/redis/redis 之五： 集合 set 相关命令/</id>
    <published>2018-09-03T01:14:33.773Z</published>
    <updated>2018-09-03T00:17:05.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="集合-set-相关命令"><a href="#集合-set-相关命令" class="headerlink" title="集合 set 相关命令"></a>集合 set 相关命令</h3><ul>
<li>集合的性质: 唯一性,无序性,确定性</li>
<li>注: 在string和link的命令中,可以通过range 来访问string中的某几个字符或某几个元素<br>但,因为集合的无序性,无法通过下标或范围来访问部分元素.</li>
<li>因此想看元素,要么随机先一个,要么全选</li>
</ul>
<h4 id="sadd-key-value1-value2"><a href="#sadd-key-value1-value2" class="headerlink" title="sadd key  value1 value2"></a>sadd key  value1 value2</h4><ul>
<li>作用: 往集合key中增加元素</li>
</ul>
<h4 id="srem-value1-value2"><a href="#srem-value1-value2" class="headerlink" title="srem value1 value2"></a>srem value1 value2</h4><ul>
<li>作用: 删除集合中集为 value1 value2的元素</li>
<li>返回值: 忽略不存在的元素后,真正删除掉的元素的个数</li>
</ul>
<h4 id="spop-key"><a href="#spop-key" class="headerlink" title="spop key"></a>spop key</h4><ul>
<li>作用: 返回并删除集合中key中1个随机元素</li>
<li>随机–体现了无序性</li>
</ul>
<h4 id="srandmember-key"><a href="#srandmember-key" class="headerlink" title="srandmember key"></a>srandmember key</h4><ul>
<li>作用: 返回集合key中,随机的1个元素.</li>
</ul>
<h4 id="sismember-key-value"><a href="#sismember-key-value" class="headerlink" title="sismember key  value"></a>sismember key  value</h4><ul>
<li>作用: 判断value是否在key集合中</li>
<li>是返回1,否返回0</li>
</ul>
<h4 id="smembers-key"><a href="#smembers-key" class="headerlink" title="smembers key"></a>smembers key</h4><ul>
<li>作用: 返回集中中所有的元素</li>
</ul>
<h4 id="scard-key"><a href="#scard-key" class="headerlink" title="scard key"></a>scard key</h4><ul>
<li>作用: 返回集合中元素的个数</li>
</ul>
<h4 id="smove-source-dest-value"><a href="#smove-source-dest-value" class="headerlink" title="smove source dest value"></a>smove source dest value</h4><ul>
<li>作用:把source中的value删除,并添加到dest集合中</li>
</ul>
<h4 id="sinter-key1-key2-key3"><a href="#sinter-key1-key2-key3" class="headerlink" title="sinter  key1 key2 key3"></a>sinter  key1 key2 key3</h4><ul>
<li>作用: 求出key1 key2 key3 三个集合中的交集,并返回<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">redis 127.0.0.1:6379&gt; sadd s1 0 2 4 6</div><div class="line">(integer) 4</div><div class="line">redis 127.0.0.1:6379&gt; sadd s2 1 2 3 4</div><div class="line">(integer) 4</div><div class="line">redis 127.0.0.1:6379&gt; sadd s3 4 8 9 12</div><div class="line">(integer) 4</div><div class="line">redis 127.0.0.1:6379&gt; sinter s1 s2 s3</div><div class="line">1) &quot;4&quot;</div><div class="line">redis 127.0.0.1:6379&gt; sinter s3 s1 s2</div><div class="line">1) &quot;4&quot;</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="sinterstore-dest-key1-key2-key3"><a href="#sinterstore-dest-key1-key2-key3" class="headerlink" title="sinterstore dest key1 key2 key3"></a>sinterstore dest key1 key2 key3</h4><ul>
<li>作用: 求出key1 key2 key3 三个集合中的交集,并赋给dest</li>
</ul>
<h4 id="suion-key1-key2-Keyn"><a href="#suion-key1-key2-Keyn" class="headerlink" title="suion key1 key2.. Keyn"></a>suion key1 key2.. Keyn</h4><ul>
<li>作用: 求出key1 key2 keyn的并集,并返回</li>
</ul>
<h4 id="sdiff-key1-key2-key3"><a href="#sdiff-key1-key2-key3" class="headerlink" title="sdiff key1 key2 key3"></a>sdiff key1 key2 key3</h4><ul>
<li>作用: 求出key1与key2 key3的差集<br>即key1-key2-key3 </li>
</ul>
<h3 id="order-set-有序集合"><a href="#order-set-有序集合" class="headerlink" title="order set 有序集合"></a>order set 有序集合</h3><h4 id="zadd-key-score1-value1-score2-value2"><a href="#zadd-key-score1-value1-score2-value2" class="headerlink" title="zadd key score1 value1 score2 value2 .."></a>zadd key score1 value1 score2 value2 ..</h4><ul>
<li>添加元素<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">redis 127.0.0.1:6379&gt; zadd stu 18 lily 19 hmm 20 lilei 21 lilei</div><div class="line">(integer) 3</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="zrem-key-value1-value2"><a href="#zrem-key-value1-value2" class="headerlink" title="zrem key value1 value2 .."></a>zrem key value1 value2 ..</h4><ul>
<li>作用: 删除集合中的元素</li>
</ul>
<h4 id="zremrangebyscore-key-min-max"><a href="#zremrangebyscore-key-min-max" class="headerlink" title="zremrangebyscore key min max"></a>zremrangebyscore key min max</h4><ul>
<li>作用: 按照socre来删除元素,删除score在[min,max]之间的<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">redis 127.0.0.1:6379&gt; zremrangebyscore stu 4 10</div><div class="line">(integer) 2</div><div class="line">redis 127.0.0.1:6379&gt; zrange stu 0 -1</div><div class="line">1) &quot;f&quot;</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="zremrangebyrank-key-start-end"><a href="#zremrangebyrank-key-start-end" class="headerlink" title="zremrangebyrank key start end"></a>zremrangebyrank key start end</h4><ul>
<li>作用: 按排名删除元素,删除名次在[start,end]之间的<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">redis 127.0.0.1:6379&gt; zremrangebyrank stu 0 1</div><div class="line">(integer) 2</div><div class="line">redis 127.0.0.1:6379&gt; zrange stu 0 -1</div><div class="line">1) &quot;c&quot;</div><div class="line">2) &quot;e&quot;</div><div class="line">3) &quot;f&quot;</div><div class="line">4) &quot;g&quot;</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="zrank-key-member"><a href="#zrank-key-member" class="headerlink" title="zrank key member"></a>zrank key member</h4><ul>
<li>查询member的排名(升续 0名开始)</li>
</ul>
<h4 id="zrevrank-key-memeber"><a href="#zrevrank-key-memeber" class="headerlink" title="zrevrank key memeber"></a>zrevrank key memeber</h4><ul>
<li>查询 member的排名(降续 0名开始)</li>
</ul>
<h4 id="zrange-key-start-stop-WITHSCORES"><a href="#zrange-key-start-stop-WITHSCORES" class="headerlink" title="zrange key start stop [WITHSCORES]"></a>zrange key start stop [WITHSCORES]</h4><ul>
<li>把集合排序后,返回名次[start,stop]的元素</li>
<li>默认是升续排列 </li>
<li>Withscores 是把score也打印出来</li>
</ul>
<h4 id="zrevrange-key-start-stop"><a href="#zrevrange-key-start-stop" class="headerlink" title="zrevrange key start stop"></a>zrevrange key start stop</h4><ul>
<li>作用:把集合降序排列,取名字[start,stop]之间的元素</li>
</ul>
<h4 id="zrangebyscore-key-min-max-withscores-limit-offset-N"><a href="#zrangebyscore-key-min-max-withscores-limit-offset-N" class="headerlink" title="zrangebyscore  key min max [withscores] limit offset N"></a>zrangebyscore  key min max [withscores] limit offset N</h4><ul>
<li>作用: 集合(升续)排序后,取score在[min,max]内的元素, 并跳过 offset个, 取出N个<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">redis 127.0.0.1:6379&gt; zadd stu 1 a 3 b 4 c 9 e 12 f 15 g</div><div class="line">(integer) 6</div><div class="line">redis 127.0.0.1:6379&gt; zrangebyscore stu 3 12 limit 1 2 withscores</div><div class="line">1) &quot;c&quot;</div><div class="line">2) &quot;4&quot;</div><div class="line">3) &quot;e&quot;</div><div class="line">4) &quot;9&quot;</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="zcard-key"><a href="#zcard-key" class="headerlink" title="zcard key"></a>zcard key</h4><ul>
<li>返回元素个数</li>
</ul>
<h4 id="zcount-key-min-max"><a href="#zcount-key-min-max" class="headerlink" title="zcount key min max"></a>zcount key min max</h4><ul>
<li>返回[min,max] 区间内元素的数量</li>
</ul>
<h4 id="zinterstore-destination-numkeys-key1-key2-…-WEIGHTS-weight-weight-…-AGGREGATE-SUM-MIN-MAX"><a href="#zinterstore-destination-numkeys-key1-key2-…-WEIGHTS-weight-weight-…-AGGREGATE-SUM-MIN-MAX" class="headerlink" title="zinterstore destination numkeys key1 [key2 …] [WEIGHTS weight [weight …]] [AGGREGATE SUM|MIN|MAX]"></a>zinterstore destination numkeys key1 [key2 …] [WEIGHTS weight [weight …]] [AGGREGATE SUM|MIN|MAX]</h4><ul>
<li>求key1,key2的交集,key1,key2的权重分别是 weight1,weight2</li>
<li>聚合方法用: sum |min|max</li>
<li>聚合的结果,保存在dest集合内</li>
<li><p>注意: weights ,aggregate如何理解?</p>
<ul>
<li>答: 如果有交集, 交集元素又有socre,score怎么处理?</li>
<li><p>Aggregate sum-&gt;score相加   , min 求最小score, max 最大score</p>
</li>
<li><p>另: 可以通过weigth设置不同key的权重, 交集时,socre * weights</p>
</li>
</ul>
</li>
</ul>
<h4 id="详见下例"><a href="#详见下例" class="headerlink" title="详见下例"></a>详见下例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">redis 127.0.0.1:6379&gt; zadd z1 2 a 3 b 4 c</div><div class="line">(integer) 3</div><div class="line">redis 127.0.0.1:6379&gt; zadd z2 2.5 a 1 b 8 d</div><div class="line">(integer) 3</div><div class="line">redis 127.0.0.1:6379&gt; zinterstore tmp 2 z1 z2</div><div class="line">(integer) 2</div><div class="line">redis 127.0.0.1:6379&gt; zrange tmp 0 -1</div><div class="line">1) &quot;b&quot;</div><div class="line">2) &quot;a&quot;</div><div class="line">redis 127.0.0.1:6379&gt; zrange tmp 0 -1 withscores</div><div class="line">1) &quot;b&quot;</div><div class="line">2) &quot;4&quot;</div><div class="line">3) &quot;a&quot;</div><div class="line">4) &quot;4.5&quot;</div><div class="line">redis 127.0.0.1:6379&gt; zinterstore tmp 2 z1 z2 aggregate sum</div><div class="line">(integer) 2</div><div class="line">redis 127.0.0.1:6379&gt; zrange tmp 0 -1 withscores</div><div class="line">1) &quot;b&quot;</div><div class="line">2) &quot;4&quot;</div><div class="line">3) &quot;a&quot;</div><div class="line">4) &quot;4.5&quot;</div><div class="line">redis 127.0.0.1:6379&gt; zinterstore tmp 2 z1 z2 aggregate min</div><div class="line">(integer) 2</div><div class="line">redis 127.0.0.1:6379&gt; zrange tmp 0 -1 withscores</div><div class="line">1) &quot;b&quot;</div><div class="line">2) &quot;1&quot;</div><div class="line">3) &quot;a&quot;</div><div class="line">4) &quot;2&quot;</div><div class="line">redis 127.0.0.1:6379&gt; zinterstore tmp 2 z1 z2 weights 1 2</div><div class="line">(integer) 2</div><div class="line">redis 127.0.0.1:6379&gt; zrange tmp 0 -1 withscores</div><div class="line">1) &quot;b&quot;</div><div class="line">2) &quot;5&quot;</div><div class="line">3) &quot;a&quot;</div><div class="line">4) &quot;7&quot;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;集合-set-相关命令&quot;&gt;&lt;a href=&quot;#集合-set-相关命令&quot; class=&quot;headerlink&quot; title=&quot;集合 set 相关命令&quot;&gt;&lt;/a&gt;集合 set 相关命令&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;集合的性质: 唯一性,无序性,确定性&lt;/li&gt;
&lt;li&gt;
    
    </summary>
    
      <category term="redis" scheme="http://yoursite.com/categories/redis/"/>
    
    
      <category term="redis" scheme="http://yoursite.com/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>redis 之 二： Redis对于key的操作命令</title>
    <link href="http://yoursite.com/2018/09/03/redis/redis%20%E4%B9%8B%20%E4%BA%8C%EF%BC%9A%20Redis%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2018/09/03/redis/redis 之 二： Redis操作命令/</id>
    <published>2018-09-03T01:14:33.769Z</published>
    <updated>2018-09-03T00:16:34.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li><a href="https://redis.io/commands" target="_blank" rel="external">https://redis.io/commands</a></li>
<li>String——字符串</li>
<li>Hash——字典</li>
<li>List——列表</li>
<li>Set——集合</li>
<li>Sorted Set——有序集合</li>
</ul>
<h4 id="keys-pattern-查询相应的key"><a href="#keys-pattern-查询相应的key" class="headerlink" title="keys pattern 查询相应的key"></a>keys pattern 查询相应的key</h4><ul>
<li><p>在redis里,允许模糊查询key</p>
<ul>
<li>有3个通配符 *, ? ,[]<ul>
<li>*: 通配任意多个字符</li>
<li>?: 通配单个字符</li>
<li>[]: 通配括号内的某1个字符</li>
</ul>
</li>
</ul>
</li>
<li><p>keys *</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; set sit www.glodon.com</div><div class="line">127.0.0.1:6379&gt; set site www.glodon.com</div><div class="line">127.0.0.1:6379&gt; set age 29</div><div class="line">127.0.0.1:6379&gt; keys *</div><div class="line">1) &quot;age&quot;</div><div class="line">2) &quot;sit&quot;</div><div class="line">3) &quot;site&quot;</div><div class="line">127.0.0.1:6379&gt; keys s*</div><div class="line">1) &quot;sit&quot;</div><div class="line">2) &quot;site&quot;</div><div class="line">127.0.0.1:6379&gt; keys sit[ey]</div><div class="line">1) &quot;site&quot;</div><div class="line">127.0.0.1:6379&gt; keys sit?</div><div class="line">1) &quot;site&quot;</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="randomkey-返回随机key"><a href="#randomkey-返回随机key" class="headerlink" title="randomkey 返回随机key"></a>randomkey 返回随机key</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; randomkey</div><div class="line">&quot;age&quot;</div><div class="line">127.0.0.1:6379&gt; randomkey</div><div class="line">&quot;sit&quot;</div><div class="line">127.0.0.1:6379&gt; randomkey</div><div class="line">&quot;sit&quot;</div></pre></td></tr></table></figure>
<h4 id="type-key"><a href="#type-key" class="headerlink" title="type key"></a>type key</h4><ul>
<li>返回key存储的值的类型</li>
<li>有string,link,set,order set, hash<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; type site</div><div class="line">string</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="exists-key"><a href="#exists-key" class="headerlink" title="exists key"></a>exists key</h4><ul>
<li>判断key是否存在,返回1/0<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; exists site</div><div class="line">(integer) 1</div><div class="line">127.0.0.1:6379&gt; exists title</div><div class="line">(integer) 0</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="del-key1-key2-…-Keyn"><a href="#del-key1-key2-…-Keyn" class="headerlink" title="del key1 key2 … Keyn"></a>del key1 key2 … Keyn</h4><ul>
<li>作用: 删除1个或多个键</li>
<li>返回值: 不存在的key忽略掉,返回真正删除的key的数量<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; keys *</div><div class="line">1) &quot;age&quot;</div><div class="line">2) &quot;sit&quot;</div><div class="line">3) &quot;site&quot;</div><div class="line">127.0.0.1:6379&gt; del sit</div><div class="line">(integer) 1</div><div class="line">127.0.0.1:6379&gt; keys *</div><div class="line">1) &quot;age&quot;</div><div class="line">2) &quot;site&quot;</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="rename-key-newkey"><a href="#rename-key-newkey" class="headerlink" title="rename key newkey"></a>rename key newkey</h4><ul>
<li>作用: 给key赋一个新的key名</li>
<li>注:如果newkey已存在,则newkey的原值被覆盖<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; rename site wangzhi</div><div class="line">OK</div><div class="line">127.0.0.1:6379&gt; keys *</div><div class="line">1) &quot;age&quot;</div><div class="line">2) &quot;wangzhi&quot;</div><div class="line">--------------------------------------</div><div class="line">127.0.0.1:6379&gt; set site www.glodon.com</div><div class="line">OK</div><div class="line">127.0.0.1:6379&gt; set search www.baidu.com</div><div class="line">OK</div><div class="line">127.0.0.1:6379&gt; rename site search</div><div class="line">OK</div><div class="line">127.0.0.1:6379&gt; get search</div><div class="line">&quot;www.glodon.com&quot;</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="renamenx-key-newkey"><a href="#renamenx-key-newkey" class="headerlink" title="renamenx key newkey"></a>renamenx key newkey</h4><ul>
<li>作用: 把key改名为newkey</li>
<li>返回: 发生修改返回1,未发生修改返回0</li>
<li>注: nx–&gt; not exists, 即, newkey不存在时,作改名动作<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; renamenx site sea</div><div class="line">(integer) 1</div><div class="line">127.0.0.1:6379&gt; get sea</div><div class="line">&quot;www.glodon.com&quot;</div><div class="line">127.0.0.1:6379&gt; renamenx sea search</div><div class="line">(integer) 0</div><div class="line">127.0.0.1:6379&gt; keys *</div><div class="line">1) &quot;age&quot;</div><div class="line">2) &quot;sea&quot;</div><div class="line">3) &quot;search&quot;</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="move-key-db"><a href="#move-key-db" class="headerlink" title="move key db\"></a>move key db\</h4><ul>
<li>redis 默认有16个数据库（0，1，2，3…,15）</li>
<li>select 1 进入1号数据库</li>
<li>move age 1 把age移动到1号数据库<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; move age 1</div><div class="line">(integer) 1</div><div class="line">127.0.0.1:6379&gt; select 1</div><div class="line">OK</div><div class="line">127.0.0.1:6379[1]&gt; keys *</div><div class="line">1) &quot;age&quot;</div><div class="line">----------------------------------</div><div class="line">127.0.0.1:6379&gt; keys *</div><div class="line">1) &quot;age&quot;</div><div class="line">2) &quot;sea&quot;</div><div class="line">3) &quot;search&quot;</div><div class="line">127.0.0.1:6379&gt; select 1</div><div class="line">OK</div><div class="line">127.0.0.1:6379[1]&gt; keys *</div><div class="line">(empty list or set)</div><div class="line">127.0.0.1:6379[1]&gt; select 0</div><div class="line">OK</div><div class="line">127.0.0.1:6379&gt; keys *</div><div class="line">1) &quot;age&quot;</div><div class="line">2) &quot;sea&quot;</div><div class="line">3) &quot;search&quot;</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="ttl-key"><a href="#ttl-key" class="headerlink" title="ttl key"></a>ttl key</h4><ul>
<li>作用: 查询key的生命周期</li>
<li>返回: 秒数<ul>
<li>注:对于不存在的key或已过期的key/不过期的key,都返回-1</li>
<li>Redis4.0中,对于不存在的key,返回-2<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; ttl search</div><div class="line">(integer) -1</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h4 id="expire-key-整型值"><a href="#expire-key-整型值" class="headerlink" title="expire key 整型值"></a>expire key 整型值</h4><ul>
<li>作用: 设置key的生命周期,以秒为单位</li>
<li>同理: <ul>
<li>pexpire key 毫秒数, 设置生命周期</li>
<li>pttl  key, 以毫秒返回生命周期<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; expire search 10</div><div class="line">(integer) 1</div><div class="line">127.0.0.1:6379&gt; get search</div><div class="line">&quot;www.baidu.com&quot;</div><div class="line">127.0.0.1:6379&gt; get search</div><div class="line">(nil)</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h4 id="persist-key"><a href="#persist-key" class="headerlink" title="persist key"></a>persist key</h4><ul>
<li>作用: 把指定key置为永久有效<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; set site www.baidu.com</div><div class="line">OK</div><div class="line">127.0.0.1:6379&gt; expire site 10</div><div class="line">(integer) 1</div><div class="line">127.0.0.1:6379&gt; ttl site</div><div class="line">(integer) 8</div><div class="line">127.0.0.1:6379&gt; ttl site</div><div class="line">(integer) 7</div><div class="line">127.0.0.1:6379&gt; persist site</div><div class="line">(integer) 1</div><div class="line">127.0.0.1:6379&gt; ttl site</div><div class="line">(integer) -1</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="flushdb-清空当前数据库中的所有key"><a href="#flushdb-清空当前数据库中的所有key" class="headerlink" title="flushdb 清空当前数据库中的所有key"></a>flushdb 清空当前数据库中的所有key</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; keys *</div><div class="line">1) &quot;sea&quot;</div><div class="line">2) &quot;site&quot;</div><div class="line">127.0.0.1:6379&gt; flushdb</div><div class="line">OK</div><div class="line">127.0.0.1:6379&gt; keys *</div><div class="line">(empty list or set)</div><div class="line">127.0.0.1:6379&gt; select 1</div><div class="line">OK</div><div class="line">127.0.0.1:6379[1]&gt; keys *</div><div class="line">1) &quot;age&quot;</div><div class="line">127.0.0.1:6379[1]&gt; flushdb</div><div class="line">OK</div><div class="line">127.0.0.1:6379[1]&gt; keys *</div><div class="line">(empty list or set)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://redis.io/commands&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://redis.io/commands&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;String——字符串&lt;/li&gt;
&lt;li&gt;Hash
    
    </summary>
    
      <category term="redis" scheme="http://yoursite.com/categories/redis/"/>
    
    
      <category term="redis" scheme="http://yoursite.com/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>redis 之三： Redis字符串类型的操作</title>
    <link href="http://yoursite.com/2018/09/03/redis/redis%20%E4%B9%8B%E4%B8%89%EF%BC%9A%20Redis%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B1%BB%E5%9E%8B%E7%9A%84%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2018/09/03/redis/redis 之三： Redis字符串类型的操作/</id>
    <published>2018-09-03T01:14:33.769Z</published>
    <updated>2018-09-03T00:16:44.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="set-key-value-ex-秒数-px-毫秒数-nx-xx"><a href="#set-key-value-ex-秒数-px-毫秒数-nx-xx" class="headerlink" title="set key value [ex 秒数] / [px 毫秒数]  [nx] /[xx]"></a>set key value [ex 秒数] / [px 毫秒数]  [nx] /[xx]</h4><ul>
<li>如: set a 1 ex 10 , 10秒有效</li>
<li>Set a 1 px 9000  , 9秒有效<ul>
<li>注: 如果ex,px同时写,以后面的有效期为准</li>
<li>如 set a 1 ex 100 px 9000, 实际有效期是9000毫秒</li>
</ul>
</li>
<li>nx: 表示key不存在时,执行操作</li>
<li>xx: 表示key存在时,执行操作<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; set site www.google.com</div><div class="line">OK</div><div class="line">127.0.0.1:6379&gt; set site www.baidu.com nx</div><div class="line">(nil)</div><div class="line">127.0.0.1:6379&gt; get site</div><div class="line">&quot;www.google.com&quot;</div><div class="line">127.0.0.1:6379&gt; set site www.baidu.com xx</div><div class="line">OK</div><div class="line">127.0.0.1:6379&gt; get site</div><div class="line">&quot;www.baidu.com&quot;</div><div class="line">127.0.0.1:6379&gt; set site www.google.com</div><div class="line">OK</div><div class="line">127.0.0.1:6379&gt; set site www.baidu.com nx</div><div class="line">(nil)</div><div class="line">127.0.0.1:6379&gt; get site</div><div class="line">&quot;www.google.com&quot;</div><div class="line">127.0.0.1:6379&gt; set site www.baidu.com xx</div><div class="line">OK</div><div class="line">127.0.0.1:6379&gt; set sites www.baidu.com xx</div><div class="line">(nil)</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="mset-multi-set-一次性设置多个键值"><a href="#mset-multi-set-一次性设置多个键值" class="headerlink" title="mset  multi set , 一次性设置多个键值"></a>mset  multi set , 一次性设置多个键值</h4><p>例: mset key1 v1 key2 v2 ….<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; mset a lzp b liming c zhangsan</div><div class="line">OK</div><div class="line">127.0.0.1:6379&gt; keys *</div><div class="line">1) &quot;a&quot;</div><div class="line">2) &quot;c&quot;</div><div class="line">3) &quot;b&quot;</div></pre></td></tr></table></figure></p>
<h4 id="get-key"><a href="#get-key" class="headerlink" title="get key"></a>get key</h4><ul>
<li>作用:获取key的值</li>
</ul>
<h4 id="mget-key1-key2-keyn"><a href="#mget-key1-key2-keyn" class="headerlink" title="mget key1 key2 ..keyn"></a>mget key1 key2 ..keyn</h4><ul>
<li>作用:获取多个key的值<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; mget a b c d</div><div class="line">1) &quot;lzp&quot;</div><div class="line">2) &quot;liming&quot;</div><div class="line">3) &quot;zhangsan&quot;</div><div class="line">4) (nil)</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="setrange-key-offset-value"><a href="#setrange-key-offset-value" class="headerlink" title="setrange key offset value"></a>setrange key offset value</h4><ul>
<li>作用:把字符串的offset偏移字节,改成value</li>
<li>注意: 如果偏移量&gt;字符长度, 该字符自动补0x00<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; set word hello</div><div class="line">OK</div><div class="line">127.0.0.1:6379&gt; get word</div><div class="line">&quot;hello&quot;</div><div class="line">127.0.0.1:6379&gt; setrange word 2 ??</div><div class="line">(integer) 5</div><div class="line">127.0.0.1:6379&gt; get word</div><div class="line">&quot;he??o&quot;</div><div class="line">----------------------------------------</div><div class="line">127.0.0.1:6379&gt; set word hello</div><div class="line">OK</div><div class="line">127.0.0.1:6379&gt; setrange word 6 ?</div><div class="line">(integer) 7</div><div class="line">127.0.0.1:6379&gt; get word</div><div class="line">&quot;hello\x00?&quot;</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="append-key-value"><a href="#append-key-value" class="headerlink" title="append key value"></a>append key value</h4><ul>
<li>作用: 把value追加到key的原值上<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; get word</div><div class="line">&quot;hello\x00?&quot;</div><div class="line">127.0.0.1:6379&gt; append word &amp;&amp;</div><div class="line">(integer) 9</div><div class="line">127.0.0.1:6379&gt; get word</div><div class="line">&quot;hello\x00?&amp;&amp;&quot;</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="getrange-key-start-stop"><a href="#getrange-key-start-stop" class="headerlink" title="getrange key start stop"></a>getrange key start stop</h4><ul>
<li>作用: 是获取字符串中 [start, stop]范围的值</li>
<li>注意: 对于字符串的下标,左数从0开始,右数从-1开始</li>
<li>注意: <ul>
<li>1: start&gt;=length, 则返回空字符串</li>
<li>2: stop&gt;=length,则截取至字符结尾</li>
<li>3: 如果start 所处位置在stop右边, 返回空字符串<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; set area chinese</div><div class="line">OK</div><div class="line">127.0.0.1:6379&gt; getrange area 1 4</div><div class="line">&quot;hine&quot;</div><div class="line">------------------------</div><div class="line">127.0.0.1:6379&gt; set status working</div><div class="line">OK</div><div class="line">127.0.0.1:6379&gt; getrange status 0 -4</div><div class="line">&quot;work&quot;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h4 id="getset-key-newvalue"><a href="#getset-key-newvalue" class="headerlink" title="getset key newvalue"></a>getset key newvalue</h4><ul>
<li>作用: 获取并返回旧值,设置新值<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; set status sleep</div><div class="line">OK</div><div class="line">127.0.0.1:6379&gt; getset status wakeup</div><div class="line">&quot;sleep&quot;</div><div class="line">127.0.0.1:6379&gt; get status</div><div class="line">&quot;wakeup&quot;</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="incr-key"><a href="#incr-key" class="headerlink" title="incr key"></a>incr key</h4><ul>
<li>作用: 指定的key的值加1,并返回加1后的值</li>
<li>注意:<ul>
<li>1:不存在的key当成0,再incr操作</li>
<li>2: 范围为64有符号 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; get status</div><div class="line">&quot;wakeup&quot;</div><div class="line">127.0.0.1:6379&gt; set age 29</div><div class="line">OK</div><div class="line">127.0.0.1:6379&gt; incr age</div><div class="line">(integer) 30</div><div class="line">127.0.0.1:6379&gt; decr age</div><div class="line">(integer) 29</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h4 id="decr-key"><a href="#decr-key" class="headerlink" title="decr key"></a>decr key</h4><ul>
<li>作用: 指定的key的值减1,并返回减1后的值<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">redis 127.0.0.1:6379&gt; set age 20</div><div class="line">OK</div><div class="line">redis 127.0.0.1:6379&gt; decr age</div><div class="line">(integer) 19</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="incrby-float-key-floatnumber"><a href="#incrby-float-key-floatnumber" class="headerlink" title="incrby float key floatnumber"></a>incrby float key floatnumber</h4><ul>
<li>浮点型增加<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; set age 0</div><div class="line">OK</div><div class="line">127.0.0.1:6379&gt; incrbyfloat age 0.5</div><div class="line">&quot;0.5&quot;</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="getbit-key-offset"><a href="#getbit-key-offset" class="headerlink" title="getbit key offset"></a>getbit key offset</h4><ul>
<li>作用:获取值的二进制表示,对应位上的值(从左,从0编号)<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">ascii</div><div class="line">a 65  0100 0001</div><div class="line">a 97  0110 0001</div><div class="line">---------------------------</div><div class="line">127.0.0.1:6379&gt; set char A</div><div class="line">127.0.0.1:6379&gt; getbit char 1</div><div class="line">(integer) 1</div><div class="line">127.0.0.1:6379&gt; getbit char 2</div><div class="line">(integer) 0</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="setbit-key-offset-value"><a href="#setbit-key-offset-value" class="headerlink" title="setbit  key offset value"></a>setbit  key offset value</h4><ul>
<li>设置offset对应二进制位上的值</li>
<li>返回: 该位上的旧值</li>
<li>注意: <ul>
<li>1:如果offset过大,则会在中间填充0,</li>
<li>2: offset最大大到多少</li>
<li>3:offset最大2^32-1,可推出最大的的字符串为512M<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; set char A</div><div class="line">OK</div><div class="line">127.0.0.1:6379&gt; get char</div><div class="line">&quot;A&quot;</div><div class="line">大写变小写：setbit char 2 1</div><div class="line">127.0.0.1:6379&gt; setbit char 2 1</div><div class="line">(integer) 0</div><div class="line">127.0.0.1:6379&gt; get char</div><div class="line">&quot;a&quot;</div><div class="line">小写变大写：setbit char 2 0</div><div class="line">127.0.0.1:6379&gt; get char</div><div class="line">&quot;a&quot;</div><div class="line">127.0.0.1:6379&gt; setbit char 2 0</div><div class="line">(integer) 1</div><div class="line">127.0.0.1:6379&gt; get char</div><div class="line">&quot;A&quot;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h4 id="bitop-operation-destkey-key1-key2-…"><a href="#bitop-operation-destkey-key1-key2-…" class="headerlink" title="bitop operation destkey key1 [key2 …]"></a>bitop operation destkey key1 [key2 …]</h4><ul>
<li>对key1,key2..keyN作operation,并将结果保存到 destkey 上。</li>
<li>operation 可以是 AND 、 OR 、 NOT 、 XOR<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; get upper</div><div class="line">(nil)</div><div class="line">127.0.0.1:6379&gt; setbit upper 2 1</div><div class="line">(integer) 0</div><div class="line">127.0.0.1:6379&gt; get upper</div><div class="line">&quot; &quot;</div><div class="line">127.0.0.1:6379&gt; setbit lower 2 1</div><div class="line">(integer) 0</div><div class="line">127.0.0.1:6379&gt; get lower</div><div class="line">&quot; &quot;</div><div class="line">127.0.0.1:6379&gt; get char</div><div class="line">&quot;Q&quot;</div><div class="line">127.0.0.1:6379&gt; bitop or char char lower</div><div class="line">(integer) 1</div><div class="line">127.0.0.1:6379&gt; get char</div><div class="line">&quot;q&quot;</div></pre></td></tr></table></figure></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;set-key-value-ex-秒数-px-毫秒数-nx-xx&quot;&gt;&lt;a href=&quot;#set-key-value-ex-秒数-px-毫秒数-nx-xx&quot; class=&quot;headerlink&quot; title=&quot;set key value [ex 秒数] / [px 
    
    </summary>
    
      <category term="redis" scheme="http://yoursite.com/categories/redis/"/>
    
    
      <category term="redis" scheme="http://yoursite.com/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>redis 之 一： 安装配置及启动连接</title>
    <link href="http://yoursite.com/2018/09/03/redis/redis%20%E4%B9%8B%20%E4%B8%80%EF%BC%9A%20%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E5%8F%8A%E5%90%AF%E5%8A%A8%E8%BF%9E%E6%8E%A5/"/>
    <id>http://yoursite.com/2018/09/03/redis/redis 之 一： 安装配置及启动连接/</id>
    <published>2018-09-03T01:14:33.761Z</published>
    <updated>2018-09-03T00:16:01.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="redis定义"><a href="#redis定义" class="headerlink" title="redis定义"></a>redis定义</h4><ul>
<li>redis是开源,BSD许可,高级的key-value存储系统. </li>
<li>可以用来存储字符串,哈希结构,链表,集合,因此,常用来提供数据结构服务.</li>
</ul>
<h4 id="redis和memcached相比-的独特之处"><a href="#redis和memcached相比-的独特之处" class="headerlink" title="redis和memcached相比,的独特之处:"></a>redis和memcached相比,的独特之处:</h4><ul>
<li>1: redis可以用来做存储(storge), 而memccached是用来做缓存(cache)<br>这个特点主要因为其有”持久化”的功能.</li>
<li>2: 存储的数据有”结构”,对于memcached来说,存储的数据,只有1种类型–”字符串”,<br>而redis则可以存储字符串,链表,哈希结构,集合,有序集合.</li>
</ul>
<h4 id="Redis下载安装"><a href="#Redis下载安装" class="headerlink" title="Redis下载安装"></a>Redis下载安装</h4><ul>
<li>1:官方站点: redis.io 下载最新版或者最新stable版</li>
<li>2:解压源码并进入目录</li>
<li>3: 不用configure</li>
<li>4: 直接make </li>
<li>5: 可选步骤: make test  测试编译情况<br>(可能出现: need tcl  &gt;8.4这种情况, yum install tcl)</li>
<li><p>6: 安装到指定的目录,比如 /usr/local/redis</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">make  PREFIX=/usr/<span class="built_in">local</span>/redis install</div><div class="line">注: PREFIX要大写</div></pre></td></tr></table></figure>
</li>
<li><p>7: make install之后,得到如下几个文件</p>
<ul>
<li>redis-benchmark  性能测试工具</li>
<li>redis-check-aof  日志文件检测工(比如断电造成日志损坏,可以检测并修复)</li>
<li>redis-check-dump  快照文件检测工具,效果类上</li>
<li>redis-cli  客户端</li>
<li>redis-server 服务端</li>
</ul>
</li>
<li><p>8: 复制配置文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cp /path/redis.conf /usr/<span class="built_in">local</span>/redis</div></pre></td></tr></table></figure>
</li>
<li><p>9: 启动与连接</p>
<ul>
<li><p>启动</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/path/to/redis/bin/redis-server  ./path/to/conf-file</div><div class="line">例:liuzp@lzp-user:/usr/<span class="built_in">local</span>/redis$ ./bin/redis-server ./redis.conf</div></pre></td></tr></table></figure>
</li>
<li><p>连接: 用redis-cli</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#/path/to/redis/bin/redis-cli [-h localhost -p 6379 ]</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>10: 让redis以后台进程的形式运行</p>
<ul>
<li>编辑conf配置文件,修改如下内容;</li>
<li>daemonize yes<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo vim redis.conf</div><div class="line">daemonize yes</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>操作演示</p>
<ul>
<li><p>一台机子操作</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/src/</div><div class="line">wget http://download.redis.io/releases/redis-4.0.11.tar.gz</div><div class="line">tar zxvf redis-4.0.11.tar.gz</div><div class="line"><span class="built_in">cd</span> redis-4.0.11/</div><div class="line">make <span class="built_in">test</span></div><div class="line">yum install tcl</div><div class="line">sudo make PREFIX=/usr/<span class="built_in">local</span>/redis install</div><div class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/redis/</div><div class="line">sudo cp /usr/<span class="built_in">local</span>/src/redis-4.0.11/redis.conf ./</div><div class="line">sudo ./bin/redis-server ./redis.conf </div><div class="line"></div><div class="line">sudo vim redis.conf</div><div class="line">daemonize yes</div><div class="line">--------------------------------------------</div><div class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/redis/</div><div class="line">ls bin/</div><div class="line">    redis-benchmark  redis-check-aof  redis-check-rdb  redis-cli  redis-sentinel  redis-server</div><div class="line">redis-benchmark: redis性能测试工具</div><div class="line">redis-check-aof： 检查aof日志的工具</div><div class="line">redis-cli: 链接用的客户端</div><div class="line"> redis-server：redis服务进程</div><div class="line">--------------------------------------------</div></pre></td></tr></table></figure>
</li>
<li><p>另一台机子连接</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/redis/</div><div class="line">./bin/redis-cli </div><div class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> sit www.glodon.com</div><div class="line">OK</div><div class="line">127.0.0.1:6379&gt; get sit</div><div class="line"><span class="string">"www.glodon.com"</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;redis定义&quot;&gt;&lt;a href=&quot;#redis定义&quot; class=&quot;headerlink&quot; title=&quot;redis定义&quot;&gt;&lt;/a&gt;redis定义&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;redis是开源,BSD许可,高级的key-value存储系统. &lt;/li&gt;
&lt;li&gt;可
    
    </summary>
    
      <category term="redis" scheme="http://yoursite.com/categories/redis/"/>
    
    
      <category term="redis" scheme="http://yoursite.com/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>消息中间件（二）实战</title>
    <link href="http://yoursite.com/2018/09/03/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6%EF%BC%88%E4%BA%8C%EF%BC%89%E5%AE%9E%E6%88%98/"/>
    <id>http://yoursite.com/2018/09/03/消息中间件/消息中间件（二）实战/</id>
    <published>2018-09-03T01:01:50.479Z</published>
    <updated>2017-05-25T02:19:50.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul>
<li>metaq的架构原理<h3 id="metaq的架构原理"><a href="#metaq的架构原理" class="headerlink" title="metaq的架构原理"></a>metaq的架构原理</h3><h4 id="metaq简介"><a href="#metaq简介" class="headerlink" title="metaq简介"></a>metaq简介</h4>METAQ是一款完全的队列模型消息中间件，服务器使用Java语言编写，可在多种软硬件平台上部署。客户端支出Java，C++编程语言。单台服务器可支持1万以上个消息队列，通过扩容服务器，队列数几乎可以任意横向扩展。每一个队列都是可持久化、长度无限（取决于磁盘空间大小）、并且可从队列任意位置开始消费。  <a id="more"></a> 
访问地址：<a href="http://metaq.tabao.org/" target="_blank" rel="external">http://metaq.tabao.org/</a><h4 id="metaq架构"><a href="#metaq架构" class="headerlink" title="metaq架构"></a>metaq架构</h4><img src="http://i.imgur.com/21QIfPI.png" alt=""><h4 id="metaq特点"><a href="#metaq特点" class="headerlink" title="metaq特点"></a>metaq特点</h4></li>
<li>1.生产者、服务器和消费者都可分布式</li>
<li>2.消息存储顺序写</li>
<li>3.性能极高，吞吐量大</li>
<li>4.支持消息顺序</li>
<li>5.客户端pull，随机读，批量拉数据</li>
<li>6.数据迁移、扩容对用户透明</li>
<li>7.消费状态保存在客户端<h4 id="metap重要术语"><a href="#metap重要术语" class="headerlink" title="metap重要术语"></a>metap重要术语</h4></li>
<li>1.Topic:消息的主题，由用户定义在服务器端配置。producer发送消息到某个topic下，consumer从某个topic下消费消息。</li>
<li><ol>
<li>Offset：消息在broker上的每一个分区都是组织成一个文件列表，消费者拉取数据需要知道数据在文件中的偏移量，这个偏移量就是所谓offset。Offset是绝对偏移量，服务器会将offset转化为具体文件的相对偏移量。</li>
</ol>
</li>
<li>3.Boker:就是meta的服务端或者说服务器，在消息中间件也通常称为broker。</li>
<li>4.分区（partition）:同一个topic下面还分为多个分区，如meta-test这个topic我们可以分为10个分区，分别有两个服务器提供，那么可能每台服务器提供5个分区，假设服务器id分别为0和1，则所有分区为0-0,0-1,0-2,0-3,0-4，1-0,1-1,1-2,1-3,1-4。</li>
</ul>
<h4 id="metaq主要配置介绍"><a href="#metaq主要配置介绍" class="headerlink" title="metaq主要配置介绍"></a>metaq主要配置介绍</h4><ul>
<li>zk.zkEnable=true(是否注册到zk,默认为true)</li>
<li>zk.zkConnect=localhost:2181(zk的服务器列表)</li>
<li>zk.zkSessionTimeoutMs=30000(zk 心跳超时，单位毫秒，默认30秒)</li>
<li>zk.zkConnectYimeoutMs=30000(zk 连接超时时间，单位毫秒，默认30秒)</li>
<li>brokerId（服务器ID（必须是集群内唯一，必须为整型0-1024之间））</li>
<li>servePort(服务器端口)</li>
<li>hostName（默认将取本机IP（多机网卡，需要指明））</li>
<li>dataLogPath（日志数据文件路径，默认跟dataPath一样）</li>
<li>dataPath（于指定默认的数据存储路径）</li>
<li>deletePolicy=delete，168 (数据删除策略，默认超过7天即删除，这里的168是小时，10s表示10分钟，10h表示10小时，默认为小时)</li>
<li>deleteWhen：（何时执行删除策略的cron表达式，默认是0 0 6,18 **？，也就是每天的早晚6点执行处理策略。deleteWhen：删除策略的执行时间，cron表达式）</li>
<li>flushTxLogAtCommit=1(事务日志的同步设置，0表示让造作系统决定，1表示每次commit都同步，2表示每隔1秒同步一次，此参数严重影响事务性能，可根据你需要的性能和可靠性之间权衡做出一个合理的选择。通常建议设置为2，表示每隔1秒刷盘一次，也就是最多丢失一秒内的运行时事务。这样的可靠级别对大多数服务是足够的。做安全的当然是设置为1，但这将严重影响事务性能。而0的安全级别最低，安全级别为1》2》0，性能0》=2》1。)</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;metaq的架构原理&lt;h3 id=&quot;metaq的架构原理&quot;&gt;&lt;a href=&quot;#metaq的架构原理&quot; class=&quot;headerlink&quot; title=&quot;metaq的架构原理&quot;&gt;&lt;/a&gt;metaq的架构原理&lt;/h3&gt;&lt;h4 id=&quot;metaq简介&quot;&gt;&lt;a href=&quot;#metaq简介&quot; class=&quot;headerlink&quot; title=&quot;metaq简介&quot;&gt;&lt;/a&gt;metaq简介&lt;/h4&gt;METAQ是一款完全的队列模型消息中间件，服务器使用Java语言编写，可在多种软硬件平台上部署。客户端支出Java，C++编程语言。单台服务器可支持1万以上个消息队列，通过扩容服务器，队列数几乎可以任意横向扩展。每一个队列都是可持久化、长度无限（取决于磁盘空间大小）、并且可从队列任意位置开始消费。
    
    </summary>
    
      <category term="消息中间件" scheme="http://yoursite.com/categories/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    
      <category term="metaq" scheme="http://yoursite.com/tags/metaq/"/>
    
  </entry>
  
  <entry>
    <title>TensorFlow 传统神经网络之线性回归</title>
    <link href="http://yoursite.com/2018/09/03/TensorFlow/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/"/>
    <id>http://yoursite.com/2018/09/03/TensorFlow/线性回归/</id>
    <published>2018-09-03T01:01:50.479Z</published>
    <updated>2017-06-03T06:13:00.000Z</updated>
    
    <content type="html"><![CDATA[<h5 id="神经网络起源：线性回归"><a href="#神经网络起源：线性回归" class="headerlink" title="神经网络起源：线性回归"></a>神经网络起源：线性回归</h5><ul>
<li>概念: 线性关系来描述输入到输出的映射关系 </li>
<li>应用场景： <ul>
<li>网络分析</li>
<li>银行风险分析</li>
<li>基金股份预测</li>
<li>天气预报</li>
</ul>
</li>
<li><p>一个线性回归问题 </p>
<ul>
<li>目标方程：y=ax1+bx2+cx3+d </li>
<li>参数：m=[a,b,c,d] </li>
<li>数据：[(x1,1,x2,1,x3,1), (x1,2,x2,2,x3,2), …(x1,n,x2,n,x3,n)]<pre><code>[y1,y2…..yn] 
</code></pre></li>
<li>预测：ŷt＝ax1,t+bx2,t+cx3,t+d </li>
</ul>
</li>
<li><p>目标： minimize (ŷt -yt)</p>
</li>
</ul>
<h5 id="优化方法：梯度下降"><a href="#优化方法：梯度下降" class="headerlink" title="优化方法：梯度下降"></a>优化方法：梯度下降</h5><p><img src="http://i.imgur.com/ltdihEu.png" alt=""></p>
<ul>
<li>描述<ul>
<li>山坡高度：Loss </li>
<li>地面位置：参数 </li>
<li>山坡最低点：Loss minimal </li>
<li>最低点位置：目标参数 </li>
<li>怎么到达：下坡方向，梯度下降 </li>
<li>怎么找方向：高度对地面关系导数 </li>
</ul>
</li>
<li>模型参数<ul>
<li>当前 m0 =[a0,b0,c0,d0] </li>
<li>每一步Δm? </li>
<li>参数：m=[a,b,c,d]</li>
</ul>
</li>
<li><p>梯度下降：梯度计算 </p>
<pre><code>Loss=ax1,t+bx2,t+cx3,t+d－y 
</code></pre><p>  <img src="http://i.imgur.com/F6cpekA.png" alt=""></p>
</li>
<li>梯度下降：参数更新 m:=m-ηΔm </li>
<li>梯度下降法总结： <ul>
<li>随机初始化参数</li>
<li>开启循环：t＝0，1，2。。  <ul>
<li>带入数据求出结果ŷt  </li>
<li>与真值比较得到loss＝y－ŷt  </li>
<li>对各个变量求导得到Δm  </li>
<li>更新变量m  </li>
<li>如果loss足够小或t循环结束，停止</li>
</ul>
</li>
</ul>
</li>
</ul>
<h5 id="输出＋"><a href="#输出＋" class="headerlink" title="输出＋"></a>输出＋</h5><ul>
<li>能否同时预测 多个目标？<br><img src="http://i.imgur.com/nSjDjmd.png" alt=""><br>多目标学习，通过合并多个 任务loss，一般能够产生比 单个模型更好的效果。 </li>
</ul>
<h5 id="局限"><a href="#局限" class="headerlink" title="局限"></a>局限</h5><p><img src="http://i.imgur.com/BmMSJAV.png" alt=""><br>线性回归能够清楚的描述分割线性分布的数据，对非线性分布的数据 描述较弱 </p>
<h5 id="tensorFlow代码实现-一个简单线性回归示例"><a href="#tensorFlow代码实现-一个简单线性回归示例" class="headerlink" title="tensorFlow代码实现(一个简单线性回归示例)"></a>tensorFlow代码实现(一个简单线性回归示例)</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line">	</div><div class="line"><span class="comment">#使用numpy生成100个随机点</span></div><div class="line">x_data = np.random.rand(<span class="number">100</span>)</div><div class="line">y_data = x_data*<span class="number">0.1</span> + <span class="number">0.2</span></div><div class="line"></div><div class="line"><span class="comment">#构造一个线性模型</span></div><div class="line">b = tf.Variable(<span class="number">0.</span>)</div><div class="line">k = tf.Variable(<span class="number">0.</span>)</div><div class="line">y = k*x_data +b</div><div class="line"></div><div class="line"><span class="comment">#二次代价函数</span></div><div class="line">loss = tf.reduce_mean(tf.square(y_data-y))<span class="comment">#tf.square 平方  tf.reduce_mean平均值</span></div><div class="line"></div><div class="line"><span class="comment">#定义一个梯度下降法来进行训练的优化器</span></div><div class="line">optimizer = tf.train.GradientDescentOptimizer(<span class="number">0.2</span>)<span class="comment">#学习率0.2</span></div><div class="line"><span class="comment">#最小化代价函数</span></div><div class="line">train = optimizer.minimize(loss)</div><div class="line"></div><div class="line">init = tf.global_variables_initializer()</div><div class="line"></div><div class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</div><div class="line">   	sess.run(init)</div><div class="line">    <span class="keyword">for</span> step <span class="keyword">in</span> range(<span class="number">201</span>):</div><div class="line">        sess.run(train)</div><div class="line">        <span class="keyword">if</span> step%<span class="number">20</span> == <span class="number">0</span>:</div><div class="line">            print(step,sess.run([k,b]))</div><div class="line">-----------------------------------------------</div><div class="line"><span class="number">0</span> [<span class="number">0.054121759</span>, <span class="number">0.10027351</span>]</div><div class="line"><span class="number">20</span> [<span class="number">0.10373501</span>, <span class="number">0.1979759</span>]</div><div class="line"><span class="number">40</span> [<span class="number">0.10221059</span>, <span class="number">0.19880207</span>]</div><div class="line"><span class="number">60</span> [<span class="number">0.10130835</span>, <span class="number">0.19929099</span>]</div><div class="line"><span class="number">80</span> [<span class="number">0.10077434</span>, <span class="number">0.19958037</span>]</div><div class="line"><span class="number">100</span> [<span class="number">0.1004583</span>, <span class="number">0.19975165</span>]</div><div class="line"><span class="number">120</span> [<span class="number">0.10027125</span>, <span class="number">0.199853</span>]</div><div class="line"><span class="number">140</span> [<span class="number">0.10016056</span>, <span class="number">0.19991298</span>]</div><div class="line"><span class="number">160</span> [<span class="number">0.10009503</span>, <span class="number">0.1999485</span>]</div><div class="line"><span class="number">180</span> [<span class="number">0.10005624</span>, <span class="number">0.19996952</span>]</div><div class="line"><span class="number">200</span> [<span class="number">0.10003328</span>, <span class="number">0.19998197</span>]</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;神经网络起源：线性回归&quot;&gt;&lt;a href=&quot;#神经网络起源：线性回归&quot; class=&quot;headerlink&quot; title=&quot;神经网络起源：线性回归&quot;&gt;&lt;/a&gt;神经网络起源：线性回归&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;概念: 线性关系来描述输入到输出的映射关系 &lt;/li&gt;

    
    </summary>
    
      <category term="深度学习" scheme="http://yoursite.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="TensorFlow" scheme="http://yoursite.com/tags/TensorFlow/"/>
    
      <category term="线性回归" scheme="http://yoursite.com/tags/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>消息中间件（三）kafka</title>
    <link href="http://yoursite.com/2018/09/03/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6%EF%BC%88%E4%B8%89%EF%BC%89kafka/"/>
    <id>http://yoursite.com/2018/09/03/消息中间件/消息中间件（三）kafka/</id>
    <published>2018-09-03T01:01:50.479Z</published>
    <updated>2017-05-25T02:19:58.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="kafka使用背景"><a href="#kafka使用背景" class="headerlink" title="kafka使用背景"></a>kafka使用背景</h3><h4 id="Kafka的定义"><a href="#Kafka的定义" class="headerlink" title="Kafka的定义"></a>Kafka的定义</h4><p>是一个分布式消息系统，有LinkedIn使用Scala编写，用作LinkedIn的活动流（Activity Stream）和运营数据管道（Pipeline）基础，具有高水平扩展和高吞吐量。<br><a id="more"></a> </p>
<h4 id="应用领域"><a href="#应用领域" class="headerlink" title="应用领域"></a>应用领域</h4><ul>
<li>已被多家不同 尅性的公司作为多种类型的数据管道和消息系统使用。如：淘宝，支付宝，百度，twiter等</li>
<li>目前越来越多的开源分布式系统如Apache flume、Apache Strom、Spark、elesticsearch（全文检索系统）都支持与kafka集成。<br>表1 各种分布式队列对比<br><img src="http://i.imgur.com/1wGfIoH.png" alt=""><br>Kafka高吞吐量高水平扩展<h3 id="kafka相关概念"><a href="#kafka相关概念" class="headerlink" title="kafka相关概念"></a>kafka相关概念</h3></li>
<li>AMQP协议</li>
<li>Kafka支持的客户端语言</li>
<li><p>Kafka架构</p>
<h4 id="AMQP协议"><a href="#AMQP协议" class="headerlink" title="AMQP协议"></a>AMQP协议</h4><p><img src="http://i.imgur.com/Kv73g9f.png" alt=""></p>
</li>
<li><p>一些基本概念</p>
<ul>
<li>消费者（Consumer）：从消息队列请求消息的客户端应用程序；</li>
<li>生产者（Producer）:从broker发布消息的客户端应用程序；<ul>
<li>Producer将消息发布到它指定的topic中,并负责决定发布到哪个分区。通常简单的由负载均衡机制随机选择分区，但也可以通过特定的分区函数选择分区。使用的更多的是第二种。</li>
</ul>
</li>
<li>AMQP服务端（broker）：用来接收生产者发送并将这些消息路由给服务器中的队列；<h4 id="kafka支持的客户端语言"><a href="#kafka支持的客户端语言" class="headerlink" title="kafka支持的客户端语言"></a>kafka支持的客户端语言</h4></li>
</ul>
</li>
<li>Kafka客户端支持当前大部分主流语言，包括：C、C++、Erlang、Java、.net、perl、PHP、Python、Ruby、GO、JavaScript。</li>
<li><p>可以使用以上任何一种语言和Kafka服务器进行通信（即编写自己的consumer和producer程序）</p>
<h4 id="Kafka的架构"><a href="#Kafka的架构" class="headerlink" title="Kafka的架构"></a>Kafka的架构</h4><p><img src="http://i.imgur.com/MXAbltf.png" alt=""></p>
</li>
<li><p>一些基本的概念：</p>
<ul>
<li>主题（Topic）:一个主题类似新闻中的体育、娱乐、教育等分类概念，在实际工程中通常一个业务一个主题；</li>
<li>分区（Partition）:一个topic的消息数据安装多个分区组织，分区是kafka消息队列组织的最小单位，一个分区可以看做是一个FIFO队列；<br><img src="http://i.imgur.com/BtyKJih.png" alt=""></li>
</ul>
</li>
<li><p>备份（Replication）:为了保证分布式可靠性，kafka0.8开始对没一个分区的数据进行备份（不同Broker上），防止其中一个Broker故障造成分区数据不可用</p>
</li>
<li>zookeeper:一个提供分布式状态管理、分布式配置管理、分布式锁服务等集群</li>
<li>分布式<br>每个分区在Kafka集群的若干服务中都有副本，这样这些持有副本的服务可以共同处理数据和请求，副本数量是可以配置的。副本使Kafka具备了容错能力。<br>每个分区都由一个服务器作为“leader”，零或若干服务器作为“followers”,leader负责处理消息的读和写，followers则去复制leader.如果leader down了，followers中的一台则会自动成为leader。集群中的每个服务都会同时扮演两个角色：作为它所持有的一部分分区的leader，同时作为其他分区的followers，这样集群就会据有较好的负载均衡。</li>
</ul>
<h3 id="Kafka消费编程模型"><a href="#Kafka消费编程模型" class="headerlink" title="Kafka消费编程模型"></a>Kafka消费编程模型</h3><ul>
<li>分区消费模型</li>
<li>组（Group）消费模型</li>
<li>两种消费模型对比<h4 id="分区消费模型"><a href="#分区消费模型" class="headerlink" title="分区消费模型"></a>分区消费模型</h4><img src="http://i.imgur.com/geHWTrE.png" alt=""></li>
<li><p>分区消费伪代码描述</p>
<p>  main()</p>
<pre><code>获取分区的size
for index=0 to size
    create thread(or process) consumer(index)
</code></pre><p>  第index个线程（进程）<br>  consumer（index）</p>
<pre><code>创建到kafka broker的链接：KafkaClient(host,port)
指定消费参数构建consumer.SimpleConsumer(topic,port)
设置消费offset:consumer.seek(offset,0)
</code></pre><p>  while True</p>
<pre><code>消费指定topic第index个分区的数据
处理
</code></pre><p>  记录当前消费offset<br>  提交当前offset（可选）</p>
<h4 id="组（Group）消费模型"><a href="#组（Group）消费模型" class="headerlink" title="组（Group）消费模型"></a>组（Group）消费模型</h4><p><img src="http://i.imgur.com/HBotCi9.png" alt=""></p>
<p>  main()</p>
<pre><code>设置需要创建的流数N
for index=0 to N 
    create thread consumer(Index)

第index个线程
consumer(index)
    创建到kafka broker的链接：KafkaClient(Host,port)
    指定消费参数构建consumer：SimpleConsumer(topic,partitions)
    设置从头消费还是从最新的消费（smallest或largest）
    while True
        从指定Topic的第index个流取数据
        处理
        （offset会自动提交到zookeeper，无需我们操作）
</code></pre></li>
</ul>
<h4 id="两种模型对比"><a href="#两种模型对比" class="headerlink" title="两种模型对比"></a>两种模型对比</h4><ul>
<li>分区消费模型更加灵活但是：<ul>
<li>（1）需要自己处理各种异常情况；</li>
<li>（2）需要自己管理offset（以实现消息传递的其他语义）；</li>
</ul>
</li>
<li>组消费模型更加简单，但是不灵活：<ul>
<li>（1）不需要自己处理异常情况，不需要自己管理offset；</li>
<li>（2）只能实现kafka默认的最少一次消息传递语义；</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;kafka使用背景&quot;&gt;&lt;a href=&quot;#kafka使用背景&quot; class=&quot;headerlink&quot; title=&quot;kafka使用背景&quot;&gt;&lt;/a&gt;kafka使用背景&lt;/h3&gt;&lt;h4 id=&quot;Kafka的定义&quot;&gt;&lt;a href=&quot;#Kafka的定义&quot; class=&quot;headerlink&quot; title=&quot;Kafka的定义&quot;&gt;&lt;/a&gt;Kafka的定义&lt;/h4&gt;&lt;p&gt;是一个分布式消息系统，有LinkedIn使用Scala编写，用作LinkedIn的活动流（Activity Stream）和运营数据管道（Pipeline）基础，具有高水平扩展和高吞吐量。&lt;br&gt;
    
    </summary>
    
      <category term="消息中间件" scheme="http://yoursite.com/categories/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    
      <category term="kafka" scheme="http://yoursite.com/tags/kafka/"/>
    
  </entry>
  
  <entry>
    <title>TensorFlow 传统神经网络之优化器</title>
    <link href="http://yoursite.com/2018/09/03/TensorFlow/Optimizer/"/>
    <id>http://yoursite.com/2018/09/03/TensorFlow/Optimizer/</id>
    <published>2018-09-03T01:01:50.479Z</published>
    <updated>2017-06-12T12:51:16.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="优化器在TensorFlow对应的方法"><a href="#优化器在TensorFlow对应的方法" class="headerlink" title="优化器在TensorFlow对应的方法"></a>优化器在TensorFlow对应的方法</h3><ul>
<li>tf.train.GradientDescentOptimizer</li>
<li>tf.train.AdadeltaOptimizer</li>
<li>tf.train.AdagradOptimizer</li>
<li>tf.train.AdagradDAOptimizer</li>
<li>tf.train.MomentumOptimizer</li>
<li>tf.train.AdamOptimizer</li>
<li>tf.train.FtrlOptimizer</li>
<li>tf.train.ProximalGradientDescentOptimizer</li>
<li>tf.train.ProximalAdagradOptimizer</li>
<li>tf.train.RMSPropOptimizer<h3 id="各种优化器对比"><a href="#各种优化器对比" class="headerlink" title="各种优化器对比"></a>各种优化器对比</h3></li>
<li>标准梯度下降法：<ul>
<li>标准梯度下降先计算所有样本汇总误差，然后根据总误差来更新权值</li>
</ul>
</li>
<li>随机梯度下降法<ul>
<li>随机梯度下降随机抽取一个样本来计算误差，然后更新权值</li>
</ul>
</li>
<li>批量梯度下降法<ul>
<li>批量梯度下降算是一种折中的方案，从总样本中选取一个批次（比如一共有10000个样本，随机选取100个样本作为一个batch），然后计算这个batch的总误差，根据总误差来更新权值。<br><img src="http://i.imgur.com/BorKb2P.jpg" alt=""></li>
</ul>
</li>
<li>W：要训练的参数</li>
<li>J(W)：代价函数</li>
<li>\(∇_W\)J(W)：代价函数的梯度</li>
<li>η：学习率</li>
</ul>
<h4 id="SGD"><a href="#SGD" class="headerlink" title="SGD"></a>SGD</h4><ul>
<li>\(W = {W - η⋅∇_wJ(W;x^i;y^j)}\) </li>
</ul>
<h4 id="Momentum"><a href="#Momentum" class="headerlink" title="Momentum"></a>Momentum</h4><ul>
<li>γ：动力，通常设置为0.9</li>
<li>\(v<em>t = γv</em>{t-1} + η∇_WJ(W)\)<br><img src="http://i.imgur.com/q8PRjcZ.jpg" alt=""></li>
<li>\(W = W−v_t\)</li>
<li>当前权值的改变会受到上一次权值改变的影响，类似于小球向下滚动的时候带上了惯性。这样<br>可以加快小球的向下的速度。</li>
</ul>
<h4 id="NAG（Nesterov-accelerated-gradient）"><a href="#NAG（Nesterov-accelerated-gradient）" class="headerlink" title="NAG（Nesterov accelerated gradient）"></a>NAG（Nesterov accelerated gradient）</h4><ul>
<li>\(vt = γv_{t-1} + η∇<em>WJ(W−γv</em>{t-1})\)<br><img src="http://i.imgur.com/bRmWa1X.jpg" alt=""></li>
<li>\(W = W-vt\)</li>
<li>NAG在TF中跟Momentum合并在同一个函数tf.train.MomentumOptimizer中，可以通过参数配置启用。</li>
<li>在Momentun中小球会盲目地跟从下坡的梯度，容易发生错误，所以我们需要一个更聪明的小球，这个小球提前知道它要去哪里，它还要知道走到坡底的时候速度慢下来而不是又冲上另一个坡。\(γv<em>{t−1}\)会用来修改W的值，计算\(W−γv</em>{t−1}\)可以表示小球下一个位置大概在哪里。从而我们可以提前计算下一个位置的梯度，然后使用到当前位置。</li>
</ul>
<h4 id="Adagrad"><a href="#Adagrad" class="headerlink" title="Adagrad"></a>Adagrad</h4><ul>
<li>i：代表第i个分类</li>
<li>t：代表出现次数</li>
<li>ϵ：的作用是避免分母为0，取值一般为\(1e^{-8}\)</li>
<li>η：取值一般为0.01</li>
<li>\(g_{t,i} = ∇_WJ(W_i)\)<br><img src="http://i.imgur.com/VKLw51b.jpg" alt=""></li>
</ul>
<p><img src="http://i.imgur.com/y1fXoN8.jpg" alt=""></p>
<ul>
<li>它是基于SGD的一种算法，它的核心思想是对比较常见的数据给予它比较小的学习率去调整参数，对于比较罕见的数据给予它比较大的学习率去调整参数。它很适合应用于数据稀疏的数据集（比如一个图片数据集，有10000张狗的照片，10000张猫的照片，只有100张大象的照片）。</li>
<li>Adagrad主要的优势在于不需要人为的调节学习率，它可以自动调节。它的缺点在于，随着迭代次数的增多，学习率也会越来越低，最终会趋向于0。</li>
</ul>
<h4 id="RMSprop"><a href="#RMSprop" class="headerlink" title="RMSprop"></a>RMSprop</h4><ul>
<li>RMS（Root Mean Square）是均方根的缩写。</li>
<li>γ：动力，通常设置为0.9</li>
<li>η：取值一般为0.001</li>
<li>\(E[g^2]_t\)：表示前t次的梯度平方的平均值</li>
<li>\(g_t= ∇_WJ(W)\)<br><img src="http://i.imgur.com/S62E4UT.jpg" alt=""></li>
<li>RMSprop借鉴了一些Adagrad的思想，不过这里RMSprop只用到了前t-1次梯度平方的平均值加上当前梯度的平方的和的开平方作为学习率的分母。这样RMSprop不会出现学习率越来越低的问题，而且也能自己调节学习率，并且可以有一个比较好的效果。</li>
</ul>
<h4 id="Adadelta"><a href="#Adadelta" class="headerlink" title="Adadelta"></a>Adadelta</h4><p><img src="http://i.imgur.com/OlMb8If.jpg" alt=""></p>
<ul>
<li>使用Adadelta我们甚至不需要设置一个默认学习率，在Adadelta不需要使用学习率也可以达到一个非常好的效果。</li>
</ul>
<h4 id="Adam"><a href="#Adam" class="headerlink" title="Adam"></a>Adam</h4><ul>
<li>β1：一般取值0.9</li>
<li>β2 ：一般取值0.999</li>
<li><p>ϵ：避免分母为0，一般取值\(10^{-8}\)<br><img src="http://i.imgur.com/Bueczjr.jpg" alt=""></p>
</li>
<li><p>就像Adadelta和RMSprop一样Adam会存储之前衰减的平方梯度，同时它也会保存之前衰减的梯度。经过一些处理之后再使用类似Adadelta和RMSprop的方式更新参数。<br>分区</p>
</li>
</ul>
<p><img src="http://i.imgur.com/YawY2Vm.jpg" alt=""><br><img src="http://i.imgur.com/K5ukQxW.jpg" alt=""></p>
<ul>
<li>Adadelta 趋向最终学习率最快</li>
<li>随机梯度下降法在马鞍图像中陷入局部中,无法求出最终学习率</li>
</ul>
<h3 id="使用Adadelta的代码实现"><a href="#使用Adadelta的代码实现" class="headerlink" title="使用Adadelta的代码实现"></a>使用Adadelta的代码实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment"># coding: utf-8</span></div><div class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</div><div class="line"><span class="keyword">from</span> tensorflow.examples.tutorials.mnist <span class="keyword">import</span> input_data</div><div class="line"></div><div class="line"><span class="comment">#载入数据集</span></div><div class="line">mnist = input_data.read_data_sets(<span class="string">"MNIST_data"</span>,one_hot=<span class="keyword">True</span>)</div><div class="line"></div><div class="line"><span class="comment">#每个批次的大小</span></div><div class="line">batch_size = <span class="number">100</span></div><div class="line"><span class="comment">#计算一共有多少个批次</span></div><div class="line">n_batch = mnist.train.num_examples // batch_size</div><div class="line"></div><div class="line"><span class="comment">#定义两个placeholder</span></div><div class="line">x = tf.placeholder(tf.float32,[<span class="keyword">None</span>,<span class="number">784</span>])</div><div class="line">y = tf.placeholder(tf.float32,[<span class="keyword">None</span>,<span class="number">10</span>])</div><div class="line"></div><div class="line"><span class="comment">#创建一个简单的神经网络</span></div><div class="line">W = tf.Variable(tf.zeros([<span class="number">784</span>,<span class="number">10</span>]))</div><div class="line">b = tf.Variable(tf.zeros([<span class="number">10</span>]))</div><div class="line">prediction = tf.nn.softmax(tf.matmul(x,W)+b)</div><div class="line"></div><div class="line"><span class="comment">#二次代价函数</span></div><div class="line"><span class="comment"># loss = tf.reduce_mean(tf.square(y-prediction))</span></div><div class="line">loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels=y,logits=prediction))</div><div class="line"><span class="comment">#使用梯度下降法</span></div><div class="line"><span class="comment"># train_step = tf.train.GradientDescentOptimizer(0.2).minimize(loss)</span></div><div class="line">train_step = tf.train.AdamOptimizer(<span class="number">1e-2</span>).minimize(loss)</div><div class="line"></div><div class="line"><span class="comment">#初始化变量</span></div><div class="line">init = tf.global_variables_initializer()</div><div class="line"></div><div class="line"><span class="comment">#结果存放在一个布尔型列表中</span></div><div class="line">correct_prediction = tf.equal(tf.argmax(y,<span class="number">1</span>),tf.argmax(prediction,<span class="number">1</span>))<span class="comment">#argmax返回一维张量中最大的值所在的位置</span></div><div class="line"><span class="comment">#求准确率</span></div><div class="line">accuracy = tf.reduce_mean(tf.cast(correct_prediction,tf.float32))<span class="comment">#此函数是类型转换函数 boolean -&gt; int</span></div><div class="line"></div><div class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</div><div class="line">    sess.run(init)</div><div class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> range(<span class="number">21</span>):</div><div class="line">        <span class="keyword">for</span> batch <span class="keyword">in</span> range(n_batch):</div><div class="line">            batch_xs,batch_ys =  mnist.train.next_batch(batch_size)</div><div class="line">            sess.run(train_step,feed_dict=&#123;x:batch_xs,y:batch_ys&#125;)</div><div class="line">        </div><div class="line">        acc = sess.run(accuracy,feed_dict=&#123;x:mnist.test.images,y:mnist.test.labels&#125;)</div><div class="line">        print(<span class="string">"Iter "</span> + str(epoch) + <span class="string">",Testing Accuracy "</span> + str(acc))</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">Extracting MNIST_data\train-images-idx3-ubyte.gz</div><div class="line">Extracting MNIST_data\train-labels-idx1-ubyte.gz</div><div class="line">Extracting MNIST_data\t10k-images-idx3-ubyte.gz</div><div class="line">Extracting MNIST_data\t10k-labels-idx1-ubyte.gz</div><div class="line">Datasets(train=&lt;tensorflow.contrib.learn.python.learn.datasets.mnist.DataSet object at <span class="number">0x0000025A804D1828</span>&gt;, validation=&lt;tensorflow.contrib.learn.python.learn.datasets.mnist.DataSet object at <span class="number">0x0000025AD0463BE0</span>&gt;, test=&lt;tensorflow.contrib.learn.python.learn.datasets.mnist.DataSet object at <span class="number">0x0000025AD0463978</span>&gt;)</div><div class="line">Iter0,Testing Accuracy0<span class="number">.9185</span></div><div class="line">Iter1,Testing Accuracy0<span class="number">.9268</span></div><div class="line">Iter2,Testing Accuracy0<span class="number">.9274</span></div><div class="line">Iter3,Testing Accuracy0<span class="number">.9297</span></div><div class="line">Iter4,Testing Accuracy0<span class="number">.9278</span></div><div class="line">Iter5,Testing Accuracy0<span class="number">.9248</span></div><div class="line">Iter6,Testing Accuracy0<span class="number">.9292</span></div><div class="line">Iter7,Testing Accuracy0<span class="number">.9308</span></div><div class="line">Iter8,Testing Accuracy0<span class="number">.9281</span></div><div class="line">Iter9,Testing Accuracy0<span class="number">.9303</span></div><div class="line">Iter10,Testing Accuracy0<span class="number">.9305</span></div><div class="line">Iter11,Testing Accuracy0<span class="number">.9296</span></div><div class="line">Iter12,Testing Accuracy0<span class="number">.9288</span></div><div class="line">Iter13,Testing Accuracy0<span class="number">.926</span></div><div class="line">Iter14,Testing Accuracy0<span class="number">.9298</span></div><div class="line">Iter15,Testing Accuracy0<span class="number">.9314</span></div><div class="line">Iter16,Testing Accuracy0<span class="number">.9314</span></div><div class="line">Iter17,Testing Accuracy0<span class="number">.9307</span></div><div class="line">Iter18,Testing Accuracy0<span class="number">.9293</span></div><div class="line">Iter19,Testing Accuracy0<span class="number">.9289</span></div><div class="line">Iter20,Testing Accuracy0<span class="number">.9296</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;优化器在TensorFlow对应的方法&quot;&gt;&lt;a href=&quot;#优化器在TensorFlow对应的方法&quot; class=&quot;headerlink&quot; title=&quot;优化器在TensorFlow对应的方法&quot;&gt;&lt;/a&gt;优化器在TensorFlow对应的方法&lt;/h3&gt;&lt;ul&gt;

    
    </summary>
    
      <category term="深度学习" scheme="http://yoursite.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="TensorFlow" scheme="http://yoursite.com/tags/TensorFlow/"/>
    
      <category term="optimizer" scheme="http://yoursite.com/tags/optimizer/"/>
    
  </entry>
  
  <entry>
    <title>TensorFlow 代价函数 拟合 激活函数</title>
    <link href="http://yoursite.com/2018/09/03/TensorFlow/%E4%BB%A3%E4%BB%B7%E5%87%BD%E6%95%B0&amp;%E6%8B%9F%E5%90%88&amp;%E6%BF%80%E6%B4%BB%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2018/09/03/TensorFlow/代价函数&amp;拟合&amp;激活函数/</id>
    <published>2018-09-03T01:01:50.479Z</published>
    <updated>2017-06-02T14:35:46.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://i.imgur.com/y0La0tZ.png" alt=""></p>
<h4 id="二次代价函数-quadratic-cost"><a href="#二次代价函数-quadratic-cost" class="headerlink" title="二次代价函数(quadratic cost)"></a>二次代价函数(quadratic cost)</h4><p><img src="http://i.imgur.com/Gx4BC6S.png" alt=""></p>
<ul>
<li>其中，C表示代价函数，x表示样本，y表示实际值，a表示输出值，n表示样本的总数。为简单起见 ，同样一个样本为例进行说明，此时二次代价函数为：</li>
<li>a=σ(z),  z=∑Wj*Xj+b </li>
<li>σ() 是激活函数</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://i.imgur.com/y0La0tZ.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;二次代价函数-quadratic-cost&quot;&gt;&lt;a href=&quot;#二次代价函数-quadratic-cost&quot; class=&quot;headerlink&quot; 
    
    </summary>
    
      <category term="深度学习" scheme="http://yoursite.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="TensorFlow" scheme="http://yoursite.com/tags/TensorFlow/"/>
    
  </entry>
  
  <entry>
    <title>消息中间件（一）介绍及特点</title>
    <link href="http://yoursite.com/2018/09/03/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6%EF%BC%88%E4%B8%80%EF%BC%89%E4%BB%8B%E7%BB%8D%E5%8F%8A%E7%89%B9%E7%82%B9/"/>
    <id>http://yoursite.com/2018/09/03/消息中间件/消息中间件（一）介绍及特点/</id>
    <published>2018-09-03T01:01:50.479Z</published>
    <updated>2017-05-25T02:11:46.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul>
<li>消息中间件介绍及特点</li>
<li>消息服务传递模型及各自的特点详解</li>
<li>互联网消息中间件应用场景</li>
<li>消息中间件分类</li>
</ul>
<h3 id="消息中间件介绍及特点"><a href="#消息中间件介绍及特点" class="headerlink" title="消息中间件介绍及特点"></a>消息中间件介绍及特点</h3><h4 id="消息中间件简介"><a href="#消息中间件简介" class="headerlink" title="消息中间件简介"></a>消息中间件简介</h4><p>消息中间件是在消息的传输过程中保存消息的容器，消息中间件再将消息从它的源中继（生成者）到它的目标（消费者）时充当中间人的作用。队列的主要目的是提供路由并保证消息的传递；如果发送消息是接收者不可用，消息队列也保留消息，直到消息可以成功传递它为止，当然，消息队列保存消息也是有限期的。<br><a id="more"></a> </p>
<h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><ul>
<li>在消息的传输过程中保存消息的容器。</li>
<li>在从它源中继到它的目标时充当中间人的作用。</li>
</ul>
<h4 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h4><ul>
<li>主要目的是提供路由并保证消息的传递；</li>
<li>如果消息接收者不可用；消息队列保存消息，知道可以成功传递为止；</li>
<li>消息队列保存消息也是有期限的。</li>
</ul>
<h3 id="消息中间件特点、"><a href="#消息中间件特点、" class="headerlink" title="消息中间件特点、"></a>消息中间件特点、</h3><h4 id="采用异步处理模式"><a href="#采用异步处理模式" class="headerlink" title="采用异步处理模式"></a>采用异步处理模式</h4><ul>
<li>消息发送不需等待响应；</li>
<li>发送者将消息发送到一条虚拟的通道（队列）上，消息接受者则订阅或监听该通道；</li>
<li>一条消息最终发送给一个或者多个接受者；</li>
<li>这些接受者都无需对消息发送者做出同步响应。</li>
</ul>
<p>比如用户信息注册。注册完毕后过一段时间发送邮件或者短信</p>
<h4 id="应用程序和应用程序调用关系为松耦合关系"><a href="#应用程序和应用程序调用关系为松耦合关系" class="headerlink" title="应用程序和应用程序调用关系为松耦合关系"></a>应用程序和应用程序调用关系为松耦合关系</h4><ul>
<li>发送者和接受者不必了解对方，只需要确认消息</li>
<li>发送者和接受者不必同时在线</li>
</ul>
<p>比如在线交易系统为了保证数据的最终一致性，在支系统处理完成后会把支付结果放到消息中间件里通知订单系统修改订单支付状态。两个系统通过在消息中间件解耦</p>
<h3 id="消息服务传递模型及各自的特点详解"><a href="#消息服务传递模型及各自的特点详解" class="headerlink" title="消息服务传递模型及各自的特点详解"></a>消息服务传递模型及各自的特点详解</h3><h4 id="消息传递服务模型"><a href="#消息传递服务模型" class="headerlink" title="消息传递服务模型"></a>消息传递服务模型</h4><p><img src="http://i.imgur.com/yPanJco.png" alt=""></p>
<h4 id="消息中间件的传递模型"><a href="#消息中间件的传递模型" class="headerlink" title="消息中间件的传递模型"></a>消息中间件的传递模型</h4><ul>
<li><p>点对点模型（PTP）</p>
<ul>
<li>点对点模型用于消息生产者和消息消费者之间点到点的通信。</li>
<li>消息生产者将消息发送到某个名字标识的特定消费者。</li>
<li>这个名字实际上对应消息服务中的一个队列（Queue），在消息传递给消费者之前它被存储在这个队列中。</li>
<li><p>队列消息可以放在内存中也可以是持久的，以保证在消息服务出现故障时仍然能够传递消息。</p>
</li>
<li><p>特性</p>
<blockquote>
<p>1.每个消息只用一个消费者<br>2.发送者和接受者没有时间依赖<br>3.接受者确认消息接收和处理成功 </p>
</blockquote>
<p><img src="http://i.imgur.com/ZuISSSQ.png" alt=""></p>
</li>
</ul>
</li>
<li><p>发布-订阅模型（Pub/Sub）</p>
<ul>
<li>发布者。订阅者模型支持向一个特定的消息主题生产消息。</li>
<li>0或多个订阅者可能对接收来自特定消息主题的消息感兴趣。</li>
<li>在这种模型下，发布者和订阅者彼此不知道对方。这种模型好比是匿名公告板。</li>
<li><p>这种模型概括为：多个消费者可以获得消息，在发布者和订阅者之间存在时间依赖。发布者需要建立一个订阅（subscription），以便能够消费者订阅。订阅者必须保持持续的活动状态以接收消息，除非订阅者建立了持久的订阅。这种情况下，在订阅者未连接时发布的消息将在订阅者重新连接时重新发布。</p>
</li>
<li><p>特性</p>
<blockquote>
<p>1.每个消息可以有多个订阅者<br>2.客户端只有订阅后才能接收到消息<br><br>3.持久订阅和非持久订阅</p>
</blockquote>
<p><img src="http://i.imgur.com/kYNhao1.png" alt=""></p>
<blockquote>
<p>1.发布者和订阅者有时间依赖  </p>
</blockquote>
<p>  接收者和发布者只有建立订阅关系才能收到消息</p>
<blockquote>
<p>2.持久订阅</p>
</blockquote>
<p>  订阅关系建立后，消息就不会消失，不管订阅者是否都在线</p>
<blockquote>
<p>3.非持久订阅</p>
</blockquote>
<p>  订阅为了接收消息、必须一直在线<br>  当只有一个订阅者时约等于点对点模式</p>
</li>
</ul>
</li>
</ul>
<h3 id="互联网消息中间件应用场景"><a href="#互联网消息中间件应用场景" class="headerlink" title="互联网消息中间件应用场景"></a>互联网消息中间件应用场景</h3><h4 id="网站用户注册，注册成功后过一会发送邮件确认或者短信"><a href="#网站用户注册，注册成功后过一会发送邮件确认或者短信" class="headerlink" title="网站用户注册，注册成功后过一会发送邮件确认或者短信"></a>网站用户注册，注册成功后过一会发送邮件确认或者短信</h4><p><img src="http://i.imgur.com/GEouX0k.png" alt=""></p>
<pre><code>注：发布队列模型
    生产者：用户注册服务
    消费者：邮件服务、短信服务
</code></pre><h4 id="日志分析（把日志进行收集中收集，用于计算pv、用户行为分析）"><a href="#日志分析（把日志进行收集中收集，用于计算pv、用户行为分析）" class="headerlink" title="日志分析（把日志进行收集中收集，用于计算pv、用户行为分析）"></a>日志分析（把日志进行收集中收集，用于计算pv、用户行为分析）</h4><p><img src="http://i.imgur.com/hEQsASf.png" alt=""></p>
<pre><code>注：发布队列模型
    生产者：应用服务
    消费者：pv分析服务、行为分析服务
</code></pre><h4 id="数据复制案例"><a href="#数据复制案例" class="headerlink" title="数据复制案例"></a>数据复制案例</h4><ul>
<li>1.将数据从源头复制到多个目的地，一般是要求顺序或者保证因果序列<blockquote>
<p>因果序列：保证部分顺序，如部分1和2 内部不要求顺序，但是1和2是按顺序的</p>
</blockquote>
</li>
<li><p>2.用于跨机房数据传输、搜索、离线数据计算等<br><img src="http://i.imgur.com/OehfDXP.png" alt=""></p>
<pre><code>注：发布队列模型
    生产者：DB、DB Sync       主机房
    消费者：Search Hadoop DB  副机房
</code></pre><h4 id="延迟消息发送和暂存"><a href="#延迟消息发送和暂存" class="headerlink" title="延迟消息发送和暂存"></a>延迟消息发送和暂存</h4></li>
<li>1.把消息中间件当成可靠的消息暂存地</li>
<li>2.定时进行消息投递，比如模拟用户秒杀访问、进行系统性能压测。 </li>
</ul>
<p><img src="http://i.imgur.com/7L4lBcD.png" alt=""></p>
<h4 id="消息广播"><a href="#消息广播" class="headerlink" title="消息广播"></a>消息广播</h4><ul>
<li>缓存数据同步更新</li>
<li>往应用推送数据</li>
<li>比如更新本地缓存：<br><img src="http://i.imgur.com/CSYlzcs.png" alt=""></li>
</ul>
<h4 id="消息中间件分类"><a href="#消息中间件分类" class="headerlink" title="消息中间件分类"></a>消息中间件分类</h4><ul>
<li>1.（push）推消息模型：消息生产者将消息发送给消息传递服务，消息传递服务又将消息推给消费者。</li>
<li>2.（pull）拉消息模型：消费者请求消息服务接收消息，消息生产者从消息中间件拉该消息。</li>
<li>两种类型的区别<br><img src="http://i.imgur.com/hW9IhMX.png" alt=""></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;消息中间件介绍及特点&lt;/li&gt;
&lt;li&gt;消息服务传递模型及各自的特点详解&lt;/li&gt;
&lt;li&gt;互联网消息中间件应用场景&lt;/li&gt;
&lt;li&gt;消息中间件分类&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;消息中间件介绍及特点&quot;&gt;&lt;a href=&quot;#消息中间件介绍及特点&quot; class=&quot;headerlink&quot; title=&quot;消息中间件介绍及特点&quot;&gt;&lt;/a&gt;消息中间件介绍及特点&lt;/h3&gt;&lt;h4 id=&quot;消息中间件简介&quot;&gt;&lt;a href=&quot;#消息中间件简介&quot; class=&quot;headerlink&quot; title=&quot;消息中间件简介&quot;&gt;&lt;/a&gt;消息中间件简介&lt;/h4&gt;&lt;p&gt;消息中间件是在消息的传输过程中保存消息的容器，消息中间件再将消息从它的源中继（生成者）到它的目标（消费者）时充当中间人的作用。队列的主要目的是提供路由并保证消息的传递；如果发送消息是接收者不可用，消息队列也保留消息，直到消息可以成功传递它为止，当然，消息队列保存消息也是有限期的。&lt;br&gt;
    
    </summary>
    
      <category term="消息中间件" scheme="http://yoursite.com/categories/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    
      <category term="rabbitMQ" scheme="http://yoursite.com/tags/rabbitMQ/"/>
    
      <category term="kafka" scheme="http://yoursite.com/tags/kafka/"/>
    
      <category term="metaq" scheme="http://yoursite.com/tags/metaq/"/>
    
  </entry>
  
  <entry>
    <title>TensorFlow MNIST数据集分类</title>
    <link href="http://yoursite.com/2018/09/03/TensorFlow/MNIST%E6%95%B0%E6%8D%AE%E9%9B%86%E5%88%86%E7%B1%BB/"/>
    <id>http://yoursite.com/2018/09/03/TensorFlow/MNIST数据集分类/</id>
    <published>2018-09-03T01:01:50.479Z</published>
    <updated>2017-06-02T12:29:22.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="MNIST数据集"><a href="#MNIST数据集" class="headerlink" title="MNIST数据集"></a>MNIST数据集</h4><ul>
<li>MNIST数据集的官网：<a href="http://yann.lecun.com/exdb/mnist/" target="_blank" rel="external">Yann LeCun’s website</a> </li>
<li>下载下来的数据集被分成两部分：60000行的训练数据集（mnist.train）和10000行的测试数据 集（mnist.test）<br>  <img src="http://i.imgur.com/hdmAsXj.png" alt=""></li>
<li>每一张图片包含28*28个像素，我们把这一个数组展开成一个向量，长度是28*28=784。因此在 MNIST训练数据集中mnist.train.images 是一个形状为 [60000, 784] 的张量，第一个维度数字用 来索引图片，第二个维度数字用来索引每张图片中的像素点。图片里的某个像素的强度值介于0-1 之间。<br><img src="http://i.imgur.com/FGRiusz.png" alt=""><br><img src="http://i.imgur.com/mtJ4Qyo.png" alt=""></li>
<li>MNIST数据集的标签是介于0-9的数字，我们要把标签转化为“one-hot vectors”。一个onehot向量除了某一位数字是1以外，其余维度数字都是0，比如标签0将表示为([1,0,0,0,0,0,0,0,0,0]) ，标签3将表示为([0,0,0,1,0,0,0,0,0,0]) 。 </li>
<li>因此， mnist.train.labels 是一个 [60000, 10] 的数字矩阵。<br><img src="http://i.imgur.com/mhxiCpp.png" alt=""><h4 id="神经网络构建"><a href="#神经网络构建" class="headerlink" title="神经网络构建"></a>神经网络构建</h4></li>
</ul>
<p><img src="http://i.imgur.com/UnEYyU9.png" alt=""></p>
<h4 id="Softmax函数"><a href="#Softmax函数" class="headerlink" title="Softmax函数"></a>Softmax函数</h4><ul>
<li>我们知道MNIST的结果是0-9，我们的模型可能推测出一张图片是数字9的概率是80%，是数字8 的概率是10%，然后其他数字的概率更小，总体概率加起来等于1。这是一个使用softmax回归模 型的经典案例。softmax模型可以用来给不同的对象分配概率。<br><img src="http://i.imgur.com/GcU3k6o.png" alt=""></li>
<li>比如输出结果为[1,5,3]<br><img src="http://i.imgur.com/JLe14k6.png" alt=""></li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># coding: utf-8</span></div><div class="line"></div><div class="line"><span class="comment"># In[2]:</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</div><div class="line"><span class="keyword">from</span> tensorflow.examples.tutorials.mnist <span class="keyword">import</span> input_data</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># In[3]:</span></div><div class="line"></div><div class="line"><span class="comment">#载入数据集</span></div><div class="line"><span class="comment">#"MNIST_data" 数据集和程序在同一个路径下面</span></div><div class="line"><span class="comment">#one_hot=True 1转化[1,0,0,0,0,0,0,0,0,0]</span></div><div class="line">mnist = input_data.read_data_sets(<span class="string">"MNIST_data"</span>,one_hot=<span class="keyword">True</span>)</div><div class="line"></div><div class="line"><span class="comment">#每个批次的大小</span></div><div class="line">batch_size = <span class="number">100</span></div><div class="line"><span class="comment">#计算一共有多少个批次</span></div><div class="line"><span class="comment">#mnist.train.num_examples 数据的数量 // 整除</span></div><div class="line">n_batch = mnist.train.num_examples // batch_size</div><div class="line"></div><div class="line"><span class="comment">#定义两个placeholder</span></div><div class="line"><span class="comment"># 输入层的节点数。对于MNIST数据集，这个就等于图片的像素。   </span></div><div class="line"><span class="comment"># 输出层的节点数。这个等于类别的数目。因为在MNIST数据集中</span></div><div class="line"><span class="comment"># 需要区分的是0~9这10个数字，所以这里输出层的节点数为10。</span></div><div class="line"></div><div class="line">x = tf.placeholder(tf.float32,[<span class="keyword">None</span>,<span class="number">784</span>])</div><div class="line">y = tf.placeholder(tf.float32,[<span class="keyword">None</span>,<span class="number">10</span>])</div><div class="line"></div><div class="line"><span class="comment">#创建一个简单的神经网络</span></div><div class="line">W = tf.Variable(tf.zeros([<span class="number">784</span>,<span class="number">10</span>]))</div><div class="line">b = tf.Variable(tf.zeros([<span class="number">10</span>]))</div><div class="line">prediction = tf.nn.softmax(tf.matmul(x,W)+b)</div><div class="line"></div><div class="line"><span class="comment">#二次代价函数</span></div><div class="line">loss = tf.reduce_mean(tf.square(y-prediction))</div><div class="line"><span class="comment">#使用梯度下降法</span></div><div class="line">train_step = tf.train.GradientDescentOptimizer(<span class="number">0.2</span>).minimize(loss)</div><div class="line"></div><div class="line"><span class="comment">#初始化变量</span></div><div class="line">init = tf.global_variables_initializer()</div><div class="line"></div><div class="line"><span class="comment">#结果存放在一个布尔型列表中</span></div><div class="line">correct_prediction = tf.equal(tf.argmax(y,<span class="number">1</span>),tf.argmax(prediction,<span class="number">1</span>))<span class="comment">#argmax返回一维张量中最大的值所在的位置</span></div><div class="line"><span class="comment">#求准确率 tf.cast类型转换</span></div><div class="line">accuracy = tf.reduce_mean(tf.cast(correct_prediction,tf.float32))</div><div class="line"></div><div class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</div><div class="line">    sess.run(init)</div><div class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> range(<span class="number">21</span>):</div><div class="line">        <span class="keyword">for</span> batch <span class="keyword">in</span> range(n_batch):</div><div class="line">            batch_xs,batch_ys =  mnist.train.next_batch(batch_size)</div><div class="line">            sess.run(train_step,feed_dict=&#123;x:batch_xs,y:batch_ys&#125;)</div><div class="line">        </div><div class="line">        acc = sess.run(accuracy,feed_dict=&#123;x:mnist.test.images,y:mnist.test.labels&#125;)</div><div class="line">        print(<span class="string">"Iter "</span> + str(epoch) + <span class="string">",Testing Accuracy "</span> + str(acc))</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># In[ ]:</span></div></pre></td></tr></table></figure>
<h4 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</div><div class="line"><span class="keyword">from</span> tensorflow.examples.tutorials.mnist <span class="keyword">import</span> input_data</div><div class="line"></div><div class="line"><span class="comment"># MNIST数据集相关的常数。</span></div><div class="line">INPUT_NODE = <span class="number">784</span>      <span class="comment"># 输入层的节点数。对于MNIST数据集，这个就等于图片的像素。   </span></div><div class="line">OUTPUT_NODE = <span class="number">10</span>     <span class="comment"># 输出层的节点数。这个等于类别的数目。因为在MNIST数据集中</span></div><div class="line">                         <span class="comment"># 需要区分的是0~9这10个数字，所以这里输出层的节点数为10。</span></div><div class="line"></div><div class="line"><span class="comment"># 配置神经网络的参数。</span></div><div class="line">LAYER1_NODE = <span class="number">500</span>   <span class="comment"># 隐藏层节点数。这里使用只有一个隐藏层的网络结构作为样例。</span></div><div class="line">                        <span class="comment"># 这个隐藏层有500个节点。</span></div><div class="line">BATCH_SIZE = <span class="number">100</span>    <span class="comment"># 一个训练batch中的训练数据个数。数字越小时，训练过程越接近</span></div><div class="line">                        <span class="comment"># 随机梯度下降；数字越大时，训练越接近梯度下降。</span></div><div class="line">LEARNING_RATE = <span class="number">0.01</span>           <span class="comment"># 学习率。</span></div><div class="line">TRAINING_STEPS = <span class="number">10000</span>              <span class="comment"># 训练轮数。</span></div><div class="line"></div><div class="line"><span class="comment"># 训练模型的过程。</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">train</span><span class="params">(mnist)</span>:</span></div><div class="line">    x = tf.placeholder(tf.float32, [<span class="keyword">None</span>, INPUT_NODE], name=<span class="string">'x-input'</span>)</div><div class="line">    y_ = tf.placeholder(tf.float32, [<span class="keyword">None</span>, OUTPUT_NODE], name=<span class="string">'y-input'</span>)</div><div class="line">    </div><div class="line">    <span class="comment"># 定义神经网络参数。</span></div><div class="line">weights1 = tf.Variable(</div><div class="line">    tf.truncated_normal([INPUT_NODE, LAYER1_NODE], stddev=<span class="number">0.1</span>))</div><div class="line">bias1 = tf.Variable(tf.constant(<span class="number">0.0</span>, shape=[LAYER1_NODE]))</div><div class="line">weights2 = tf.Variable(</div><div class="line">    tf.truncated_normal([LAYER1_NODE, OUTPUT_NODE], stddev=<span class="number">0.1</span>))</div><div class="line">bias2 = tf.Variable(tf.constant(<span class="number">0.0</span>, shape=[OUTPUT_NODE]))</div><div class="line"></div><div class="line"><span class="comment"># 计算在当前参数下神经网络前向传播的结果。</span></div><div class="line">    layer1 = tf.nn.relu(tf.matmul(input_tensor, weights1) + bias1)</div><div class="line">    y = tf.matmul(layer1, weights2) + bias2</div><div class="line"></div><div class="line"><span class="comment"># 定义存储训练轮数的变量。 </span></div><div class="line">    global_step = tf.Variable(<span class="number">0</span>, trainable=<span class="keyword">False</span>)</div><div class="line">    </div><div class="line"><span class="comment"># 计算交叉熵作为刻画预测值和真实值之间差距的损失函数。</span></div><div class="line">cross_entropy = tf.nn.softmax_cross_entropy_with_logits(</div><div class="line">    labels=y_, logits=y)</div><div class="line">    loss = tf.reduce_mean(cross_entropy)</div><div class="line">           </div><div class="line">    <span class="comment"># 使用tf.train.GradientDescentOptimizer优化算法来优化损失函数。注意这里损失</span></div><div class="line">    <span class="comment"># 函数包含了交叉熵损失和L2正则化损失。</span></div><div class="line">    train_op=tf.train.GradientDescentOptimizer(LEARNING_RATE)\</div><div class="line">                 .minimize(loss, global_step=global_step)</div><div class="line"></div><div class="line">    <span class="comment"># 检验神经网络的正确率。</span></div><div class="line">correct_prediction = tf.equal(tf.argmax(y, <span class="number">1</span>), tf.argmax(y_,<span class="number">1</span>))</div><div class="line">    accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))</div><div class="line">  </div><div class="line">    <span class="comment"># 初始化会话并开始训练过程。</span></div><div class="line">    <span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</div><div class="line">    tf.initialize_all_variables().run()</div><div class="line">    <span class="comment"># 准备验证数据。一般在神经网络的训练过程中会通过验证数据来大致判断停止的</span></div><div class="line">    <span class="comment"># 条件和评判训练的效果。</span></div><div class="line">        validate_feed = &#123;x: mnist.validation.images, </div><div class="line">                             y_: mnist.validation.labels&#125;</div><div class="line"></div><div class="line">    <span class="comment"># 准备测试数据。在真实的应用中，这部分数据在训练时是不可见的，这个数据只是作为  </span></div><div class="line">    <span class="comment"># 模型优劣的最后评价标准。</span></div><div class="line">        test_feed = &#123;x: mnist.test.images, y_: mnist.test.labels&#125;     </div><div class="line"></div><div class="line">        <span class="comment"># 迭代地训练神经网络。</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(TRAINING_STEPS):</div><div class="line">            <span class="comment"># 每1000轮输出一次在验证数据集上的测试结果。</span></div><div class="line">            <span class="keyword">if</span> i % <span class="number">1000</span> == <span class="number">0</span>:</div><div class="line">    validate_acc = sess.run(accuracy, feed_dict=validate_feed)</div><div class="line">                  print(<span class="string">"After %d training step(s), validation accuracy "</span></div><div class="line">                         <span class="string">"using average model is %g "</span> % (i, validate_acc))</div><div class="line">            </div><div class="line">            <span class="comment"># 产生这一轮使用的一个batch的训练数据，并运行训练过程。</span></div><div class="line">            xs, ys = mnist.train.next_batch(BATCH_SIZE)</div><div class="line">            sess.run(train_op, feed_dict=&#123;x: xs, y_: ys&#125;)</div><div class="line"></div><div class="line">        <span class="comment"># 在训练结束之后，在测试数据上检测神经网络模型的最终正确率。</span></div><div class="line">        test_acc = sess.run(accuracy, feed_dict=test_feed)</div><div class="line">    print(<span class="string">"After %d training step(s), test accuracy using average "</span></div><div class="line">           <span class="string">"model is %g"</span> % (TRAINING_STEPS, test_acc))</div><div class="line"> </div><div class="line"><span class="comment"># 主程序入口</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(argv=None)</span>:</span> </div><div class="line">    <span class="comment"># 声明处理MNIST数据集的类，这个类在初始化时会自动下载数据。</span></div><div class="line">    mnist = input_data.read_data_sets(<span class="string">"/tmp/data"</span>, one_hot=<span class="keyword">True</span>)</div><div class="line">    train(mnist)</div><div class="line"></div><div class="line"><span class="comment"># TensorFlow提供的一个主程序入口，tf.app.run会调用上面定义的main函数。</span></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">tf.app.run()</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;MNIST数据集&quot;&gt;&lt;a href=&quot;#MNIST数据集&quot; class=&quot;headerlink&quot; title=&quot;MNIST数据集&quot;&gt;&lt;/a&gt;MNIST数据集&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;MNIST数据集的官网：&lt;a href=&quot;http://yann.lecun.c
    
    </summary>
    
      <category term="深度学习" scheme="http://yoursite.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="TensorFlow" scheme="http://yoursite.com/tags/TensorFlow/"/>
    
  </entry>
  
  <entry>
    <title>HashMap原理及实现</title>
    <link href="http://yoursite.com/2018/09/03/%E7%AE%97%E6%B3%95/hashmap/"/>
    <id>http://yoursite.com/2018/09/03/算法/hashmap/</id>
    <published>2018-09-03T01:01:50.479Z</published>
    <updated>2017-06-15T13:42:22.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是hash"><a href="#什么是hash" class="headerlink" title="什么是hash"></a>什么是hash</h3><ul>
<li>它将一个长度为二进制通过一个映射关系转换成一个固定长度的二进制值。<br><img src="http://i.imgur.com/sxzJQY5.png" alt=""><ul>
<li>1.任意长度的二进制</li>
<li>2.映射关系（哈希算法–就相当于一个大学里面的学号的一个映射规则）</li>
<li>3.固定的二进制（哈希值–相当于我大学里面的学号）</li>
</ul>
</li>
<li>任意长度的二进制和固定长度的二进制 是一个一一对应关系</li>
<li>固定长度的二进制就相当于一个任意长度的二进制的摘要</li>
<li>固定长度的二进制 相当于一个关键字 key</li>
<li>真正有效的数据 就是这个学生的基本信息，一个任意长度的二进制value<h4 id="key-–-value"><a href="#key-–-value" class="headerlink" title="key – value"></a>key – value</h4></li>
<li>hash 只是确定了一个key和一个value的唯一映射关系</li>
</ul>
<h3 id="hash表"><a href="#hash表" class="headerlink" title="hash表"></a>hash表</h3><ul>
<li>特点：它存储效率很高，取数据的时间复杂度是1 o(1)<br>-hash 通过一个key一个输入，通过一个哈希函数，来找到数组与这个key唯一映射的value，根据这个hash函数找到数组中这个value的下标<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">table a = []</div><div class="line">int index = hash(key)</div><div class="line">int value = a[index]</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="hash函数"><a href="#hash函数" class="headerlink" title="hash函数"></a>hash函数</h3><p>key,找下标，有哪些方法可以找到下标</p>
<h4 id="除留取余数法（取模）"><a href="#除留取余数法（取模）" class="headerlink" title="除留取余数法（取模）"></a>除留取余数法（取模）</h4><ul>
<li>定义数 a 长度是16<ul>
<li>int index = key%m;</li>
</ul>
</li>
<li>m的取值规则：<ul>
<li>m要取比数组长长度小的最大质数</li>
<li>m = 13</li>
</ul>
</li>
</ul>
<h4 id="平方取中法"><a href="#平方取中法" class="headerlink" title="平方取中法"></a>平方取中法</h4><h3 id="hash-表处理冲突"><a href="#hash-表处理冲突" class="headerlink" title="hash 表处理冲突"></a>hash 表处理冲突</h3><ul>
<li>1.线性探测法：探测的步长n=1；<ul>
<li>如果插入新数据时在index位置发现有老数据存在，新数据插入的位置向后移动 步长n,如果后面还有数据则继续往后移动步长n，直到把新数据没有数据存在的位置</li>
</ul>
</li>
<li>2.链表形式<ul>
<li>插入发现位置有老数据存在，新的放在老的位置并使新的数据next指向刚覆盖的老数据<br><img src="http://i.imgur.com/cuqpxQP.png" alt=""></li>
</ul>
</li>
</ul>
<h3 id="MD5-函数"><a href="#MD5-函数" class="headerlink" title="MD5 函数"></a>MD5 函数</h3><ul>
<li>MD5 签名是一个哈希函数，可以将任意长度的数据量转换为一个固定长度的数字（通常是4个整型，128位）。计算机不可能有2的128次方那么大内存，因此实际的哈希表都会是URL.MD5再%n（即取模）。现实世界的URL组合必然超越哈希表的槽位数，因此碰撞是一定存在的，一般的HASH函数，例如Java的 HashTable 是一个HASH表再跟上一个链表，链表里存的是碰撞结果</li>
</ul>
<p><img src="http://i.imgur.com/V608V3y.png" alt=""></p>
<h3 id="hashMap-java-代码实现"><a href="#hashMap-java-代码实现" class="headerlink" title="hashMap(java)代码实现"></a>hashMap(java)代码实现</h3><h4 id="定义接口Ihashmap-java"><a href="#定义接口Ihashmap-java" class="headerlink" title="定义接口Ihashmap.java"></a>定义接口Ihashmap.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Ihashmap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K k,V v)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(K k)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>;</div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span>  <span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span>&#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> K <span class="title">getKey</span><span class="params">()</span></span>;</div><div class="line">        <span class="function"><span class="keyword">public</span> V <span class="title">getValue</span><span class="params">()</span></span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="实现接口hMap-java"><a href="#实现接口hMap-java" class="headerlink" title="实现接口hMap.java"></a>实现接口hMap.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">hMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Ihashmap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">private</span>  <span class="keyword">static</span> <span class="keyword">int</span> defaultLength = <span class="number">16</span>;</div><div class="line">    <span class="comment">//负载因子 超过defaultLength*defalutLoader Hasp必须扩容</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">double</span> defalutLoader = <span class="number">0.75</span>;</div><div class="line">    <span class="keyword">private</span> Entry&lt;K,V&gt; [] table = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">private</span>  <span class="keyword">int</span> size = <span class="number">0</span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">hMap</span><span class="params">(<span class="keyword">int</span> length,<span class="keyword">double</span> loader)</span></span>&#123;</div><div class="line">        defalutLoader = loader;</div><div class="line">        defaultLength = length;</div><div class="line">        table = <span class="keyword">new</span> Entry[defaultLength];</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">hMap</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>(defaultLength,defalutLoader);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K k,V v)</span></span>&#123;</div><div class="line">        <span class="comment">//在这里判断一下size是否达到扩容的标准</span></div><div class="line">        <span class="keyword">if</span>(size &gt;= defaultLength*defalutLoader)&#123;</div><div class="line">            up2size();</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//1.创建一个hash函数，根据key和hash函数算出数组下标</span></div><div class="line">        <span class="keyword">int</span> index = getIndex(k);</div><div class="line">        Entry&lt;K,V&gt; entry = table[index];</div><div class="line">        <span class="keyword">if</span> (entry == <span class="keyword">null</span>)&#123;</div><div class="line">            <span class="comment">//如果entry为null，说明table的index位置没有元素</span></div><div class="line">            table[index] = newEntry(k,v,<span class="keyword">null</span>);</div><div class="line">            size++;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="comment">//如果index位置不为空，说明index位置有元素，那么要进行一个替换，然后next指针指向老数据</span></div><div class="line">            table[index] = newEntry(k,v,entry);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> table[index].getValue();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">up2size</span><span class="params">()</span></span>&#123;</div><div class="line">        Entry&lt;K,V&gt;[] newTable = <span class="keyword">new</span> Entry[<span class="number">2</span>*defaultLength];</div><div class="line">        <span class="comment">//新创建的数组以后，以前老数组里面的元素要对新数组再进行散列</span></div><div class="line">        againHash(newTable);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">private</span>  <span class="keyword">void</span> <span class="title">againHash</span><span class="params">(Entry&lt;K,V&gt;[]newTable)</span></span>&#123;</div><div class="line">        List&lt;Entry&lt;K,V&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;Entry&lt;K, V&gt;&gt;();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;table.length;i++)&#123;</div><div class="line">            <span class="keyword">if</span>(table[i] == <span class="keyword">null</span>)&#123;</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line">            findEntryByNext(table[i],list);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(list.size()&gt;<span class="number">0</span>)&#123;</div><div class="line">            <span class="comment">//要进行一个数组的再散列</span></div><div class="line">            size = <span class="number">0</span>;</div><div class="line">            defaultLength = defaultLength * <span class="number">2</span>;</div><div class="line">            table = newTable;</div><div class="line">            <span class="keyword">for</span>(Entry&lt;K,V&gt; entry:list)&#123;</div><div class="line">                <span class="keyword">if</span>(entry.next != <span class="keyword">null</span>)&#123;</div><div class="line">                    entry.next = <span class="keyword">null</span>;</div><div class="line">                &#125;</div><div class="line">                put(entry.getKey(),entry.getValue());</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">private</span>  <span class="keyword">void</span> <span class="title">findEntryByNext</span><span class="params">(Entry&lt;K,V&gt; entry,List&lt;Entry&lt;K,V&gt;&gt; list)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(entry != <span class="keyword">null</span> &amp;&amp; entry.next != <span class="keyword">null</span>)&#123;</div><div class="line">            list.add(entry);</div><div class="line">            findEntryByNext(entry.next,list);</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            list.add(entry);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">private</span>  Entry&lt;K,V&gt; <span class="title">newEntry</span><span class="params">(K k,V v,Entry&lt;K,V&gt;next)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Entry(k,v,next);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getIndex</span><span class="params">(K k)</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> m = defaultLength;</div><div class="line">        <span class="keyword">int</span> index = k.hashCode()%m;</div><div class="line">        <span class="keyword">return</span>  index&gt;=<span class="number">0</span> ? index:-index;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(K k)</span></span>&#123;</div><div class="line">        <span class="comment">//1.创建一个hash函数，根据key和hash函数算出数组下标</span></div><div class="line">        <span class="keyword">int</span> index = getIndex(k);</div><div class="line">        <span class="keyword">if</span> (table[index] == <span class="keyword">null</span>)&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> findValueByEqualKey(k,table[index]);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">findValueByEqualKey</span><span class="params">(K k,Entry&lt;K,V&gt; entry)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(k == entry.getKey() || k.equals((entry.getKey())))&#123;</div><div class="line">            <span class="keyword">return</span>  entry.getValue();</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">if</span> (entry.next != <span class="keyword">null</span>)&#123;</div><div class="line">                <span class="keyword">return</span>  findValueByEqualKey(k,entry.next);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> size;</div><div class="line">    &#125;</div><div class="line">    <span class="class"><span class="keyword">class</span>   <span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Ihashmap</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span>&#123;</div><div class="line">        K k;</div><div class="line">        V v;</div><div class="line">        Entry&lt;K,V&gt; next;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Entry</span><span class="params">(K k,V v,Entry&lt;K,V&gt; next)</span></span>&#123;</div><div class="line">            <span class="keyword">this</span>.k = k;</div><div class="line">            <span class="keyword">this</span>.v = v;</div><div class="line">            <span class="keyword">this</span>.next = next;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> K <span class="title">getKey</span><span class="params">()</span></span>&#123;</div><div class="line">            <span class="keyword">return</span> k;</div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="keyword">public</span> V <span class="title">getValue</span><span class="params">()</span></span>&#123;</div><div class="line">            <span class="keyword">return</span> v;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="测试类test-java"><a href="#测试类test-java" class="headerlink" title="测试类test.java"></a>测试类test.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.HashMap;</div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by Administrator on 2017/6/15.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">        Ihashmap&lt;String,String&gt; lmap = <span class="keyword">new</span> hMap&lt;String,String&gt;();</div><div class="line">        Long t1 = System.currentTimeMillis();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</div><div class="line">            lmap.put(<span class="string">"key"</span>+i,<span class="string">"value"</span>+i);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</div><div class="line">            System.out.println(<span class="string">"key:"</span>+<span class="string">"key"</span>+i + <span class="string">"   value:"</span>+lmap.get(<span class="string">"key"</span>+i));</div><div class="line">        &#125;</div><div class="line">        Long t2 = System.currentTimeMillis();</div><div class="line">        System.out.println(<span class="string">"手写实现haspmap耗时："</span>+(t2-t1));</div><div class="line">        System.out.println(<span class="string">"--------------hashMap--------------"</span>);</div><div class="line"></div><div class="line">        Map&lt;String,String&gt; map = <span class="keyword">new</span> HashMap&lt;String,String&gt;();</div><div class="line">        Long t3 = System.currentTimeMillis();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</div><div class="line">            lmap.put(<span class="string">"key"</span>+i,<span class="string">"value"</span>+i);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</div><div class="line">            System.out.println(<span class="string">"key:"</span>+<span class="string">"key"</span>+i + <span class="string">"  value:"</span>+lmap.get(<span class="string">"key"</span>+i));</div><div class="line">        &#125;</div><div class="line">        Long t4 = System.currentTimeMillis();</div><div class="line">        System.out.println(<span class="string">"JDK实现haspmap耗时："</span>+(t4-t3));</div><div class="line">        System.out.println(<span class="string">"手写实现haspmap耗时："</span>+(t2-t1));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><a href="https://github.com/liuzhupeng/hashmaps" target="_blank" rel="external">git源码</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;什么是hash&quot;&gt;&lt;a href=&quot;#什么是hash&quot; class=&quot;headerlink&quot; title=&quot;什么是hash&quot;&gt;&lt;/a&gt;什么是hash&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;它将一个长度为二进制通过一个映射关系转换成一个固定长度的二进制值。&lt;br&gt;&lt;img sr
    
    </summary>
    
      <category term="算法与数据结构" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="算法与数据结构" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="HashMap" scheme="http://yoursite.com/tags/HashMap/"/>
    
  </entry>
  
  <entry>
    <title>二叉树 前序、中序、后序、层次遍历及非递归实现 查找、统计个数、比较、求深度的递归实现</title>
    <link href="http://yoursite.com/2018/09/03/%E7%AE%97%E6%B3%95/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>http://yoursite.com/2018/09/03/算法/二叉树/</id>
    <published>2018-09-03T01:01:50.479Z</published>
    <updated>2017-06-06T14:44:44.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、基本概念"><a href="#一、基本概念" class="headerlink" title="一、基本概念"></a>一、基本概念</h3><ul>
<li>每个结点最多有两棵子树，左子树和右子树，次序不可以颠倒。<br>性质：<ul>
<li>1、非空二叉树的第n层上至多有2^(n-1)个元素。</li>
<li>2、深度为h的二叉树至多有2^h-1个结点。</li>
</ul>
</li>
<li>满二叉树：所有终端都在同一层次，且非终端结点的度数为2<ul>
<li>在满二叉树中若其深度为h，则其所包含的结点数必为2^h-1。</li>
</ul>
</li>
<li>完全二叉树：除了最大的层次即成为一颗满二叉树且层次最大那层所有的结点均向左靠齐，即集中在左面的位置上，不能有空位置。<ul>
<li>对于完全二叉树，设一个结点为i则其父节点为i/2，2i为左子节点，2i+1为右子节点。</li>
</ul>
</li>
</ul>
<h3 id="二、存储结构"><a href="#二、存储结构" class="headerlink" title="二、存储结构"></a>二、存储结构</h3><h4 id="顺序存储："><a href="#顺序存储：" class="headerlink" title="顺序存储："></a>顺序存储：</h4><pre><code>- 将数据结构存在一块固定的数组中
</code></pre><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LENGTH 100  </span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> datatype;  </div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span>  </div><div class="line">    datatype data;  </div><div class="line">    <span class="keyword">int</span> lchild,rchild;  </div><div class="line">    <span class="keyword">int</span> parent;  </div><div class="line">&#125;Node;  </div><div class="line">  </div><div class="line">Node tree[LENGTH];  </div><div class="line"><span class="keyword">int</span> length;  </div><div class="line"><span class="keyword">int</span> root;  </div><div class="line">```  </div><div class="line">虽然在遍历速度上有一定的优势，但因所占空间比较大，是非主流二叉树。二叉树通常以链式存储。</div><div class="line">#### 链式存储：</div><div class="line">```cpp</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> datatype;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BinNode</span>&#123;</span></div><div class="line">    datatype data;</div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BinNode</span>* <span class="title">lchild</span>;</span></div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BinNode</span>* <span class="title">rchild</span>;</span></div><div class="line">&#125;BinNode;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> BinNode* bintree;          <span class="comment">//bintree本身是个指向结点的指针</span></div></pre></td></tr></table></figure>
<h3 id="三、二叉树的遍历"><a href="#三、二叉树的遍历" class="headerlink" title="三、二叉树的遍历"></a>三、二叉树的遍历</h3><ul>
<li>遍历即将树的所有结点访问且仅访问一次。按照根节点位置的不同分为前序遍历，中序遍历，后序遍历。<ul>
<li>前序遍历：根节点-&gt;左子树-&gt;右子树</li>
<li>中序遍历：左子树-&gt;根节点-&gt;右子树</li>
<li>后序遍历：左子树-&gt;右子树-&gt;根节点</li>
</ul>
</li>
<li><p>例如：求下面树的三种遍历</p>
<p><img src="http://i.imgur.com/oxgE506.png" alt=""></p>
<ul>
<li>前序遍历：abdefgc</li>
<li>中序遍历：debgfac</li>
<li>后序遍历：edgfbca</li>
</ul>
</li>
</ul>
<h3 id="遍历的实现"><a href="#遍历的实现" class="headerlink" title="遍历的实现"></a>遍历的实现</h3><h4 id="递归实现"><a href="#递归实现" class="headerlink" title="递归实现"></a>递归实现</h4><ul>
<li>以前序遍历为例，其他的只是输出的位置稍有不同<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">preorder</span><span class="params">(bintree t)</span></span>&#123;  </div><div class="line">    <span class="keyword">if</span>(t)&#123;  </div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%c "</span>,t-&gt;data);  </div><div class="line">        preorder(t-&gt;lchild);  </div><div class="line">        preorder(t-&gt;rchild);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="非递归的实现"><a href="#非递归的实现" class="headerlink" title="非递归的实现"></a>非递归的实现</h4><p>因为当遍历过根节点之后还要回来，所以必须将其存起来。考虑到后进先出的特点，选用栈存储。数量确定，以顺序栈存储。</p>
<h5 id="定义栈"><a href="#定义栈" class="headerlink" title="定义栈"></a>定义栈</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> SIZE 100</span></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">seqstack</span>&#123;</span>  </div><div class="line">    bintree data[SIZE];  </div><div class="line">    <span class="keyword">int</span> tag[SIZE];   <span class="comment">//为后续遍历准备的  </span></div><div class="line">    <span class="keyword">int</span> top;     <span class="comment">//top为数组的下标  </span></div><div class="line">&#125;seqstack;  </div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(seqstack *s,bintree t)</span></span>&#123;  </div><div class="line">  </div><div class="line">    <span class="keyword">if</span>(s-&gt;top == SIZE)&#123;  </div><div class="line">        <span class="built_in">printf</span>(<span class="string">"the stack is full\n"</span>);  </div><div class="line">    &#125;<span class="keyword">else</span>&#123;  </div><div class="line">        s-&gt;top++;  </div><div class="line">        s-&gt;data[s-&gt;top]=t;  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="function">bintree <span class="title">pop</span><span class="params">(seqstack *s)</span></span>&#123;  </div><div class="line">    <span class="keyword">if</span>(s-&gt;top == <span class="number">-1</span>)&#123;  </div><div class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;  </div><div class="line">    &#125;<span class="keyword">else</span>&#123;  </div><div class="line">        s-&gt;top--;  </div><div class="line">        <span class="keyword">return</span> s-&gt;data[s-&gt;top+<span class="number">1</span>];  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line">``` </div><div class="line">##### 前序遍历</div><div class="line">```<span class="function">cpp</span></div><div class="line"><span class="keyword">void</span> <span class="title">preorder_dev</span><span class="params">(bintree t)</span>&#123;  </div><div class="line">    seqstack s;  </div><div class="line">    s.top = <span class="number">-1</span>;     <span class="comment">//因为top在这里表示了数组中的位置，所以空为-1  </span></div><div class="line">    <span class="keyword">if</span>(!t)&#123;  </div><div class="line">        <span class="built_in">printf</span>(<span class="string">"the tree is empty\n"</span>);  </div><div class="line">    &#125;<span class="keyword">else</span>&#123;  </div><div class="line">        <span class="keyword">while</span>(t || s.stop != <span class="number">-1</span>)&#123;  </div><div class="line">            <span class="keyword">while</span>(t)&#123;    <span class="comment">//只要结点不为空就应该入栈保存，与其左右结点无关      </span></div><div class="line">                <span class="built_in">printf</span>(<span class="string">"%c "</span>,t-&gt;data);  </div><div class="line">                push(&amp;s,t);  </div><div class="line">                t= t-&gt;lchild;  </div><div class="line">            &#125;  </div><div class="line">            t=pop(&amp;s);  </div><div class="line">            t=t-&gt;rchild;  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">midorder</span><span class="params">(bintree t)</span></span>&#123;  </div><div class="line">    seqstack s;  </div><div class="line">    s.top = <span class="number">-1</span>;  </div><div class="line">    <span class="keyword">if</span>(!t)&#123;  </div><div class="line">        <span class="built_in">printf</span>(<span class="string">"the tree is empty!\n"</span>);  </div><div class="line">    &#125;<span class="keyword">else</span>&#123;  </div><div class="line">        <span class="keyword">while</span>(t ||s.top != <span class="number">-1</span>)&#123;  </div><div class="line">            <span class="keyword">while</span>(t)&#123;  </div><div class="line">                push(&amp;s,t);  </div><div class="line">                t= t-&gt;lchild;  </div><div class="line">            &#125;  </div><div class="line">            t=pop(&amp;s);  </div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%c "</span>,t-&gt;data);  </div><div class="line">            t=t-&gt;rchild;  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>转自：<a herf="http://blog.csdn.net/fansongy/article/details/6798278">数据结构（六）——二叉树 前序、中序、后序、层次遍历及非递归实现 查找、统计个数、比较、求深度的递归</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、基本概念&quot;&gt;&lt;a href=&quot;#一、基本概念&quot; class=&quot;headerlink&quot; title=&quot;一、基本概念&quot;&gt;&lt;/a&gt;一、基本概念&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;每个结点最多有两棵子树，左子树和右子树，次序不可以颠倒。&lt;br&gt;性质：&lt;ul&gt;
&lt;li&gt;1、非空
    
    </summary>
    
      <category term="算法与数据结构" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="算法与数据结构" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="二叉树" scheme="http://yoursite.com/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>字符串相关算法（0-1交换、字符替换和复制、交换星号、子串变位词、单词翻转 ）</title>
    <link href="http://yoursite.com/2018/09/03/%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>http://yoursite.com/2018/09/03/算法/字符串/</id>
    <published>2018-09-03T01:01:50.479Z</published>
    <updated>2017-06-06T08:06:20.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="0-1交换"><a href="#0-1交换" class="headerlink" title="0-1交换"></a>0-1交换</h4><ul>
<li>把一个0-1串（只包含0和1的串）进行排序，你<br>可以交换任意两个位置，问最少交换的次数<br>？<h5 id="分析：-快排partition-最左边的那些0和最右边的"><a href="#分析：-快排partition-最左边的那些0和最右边的" class="headerlink" title="分析： 快排partition?最左边的那些0和最右边的"></a>分析： 快排partition?最左边的那些0和最右边的</h5>那些1都可以不管<ul>
<li>o 00…0001…….0111….1<h5 id="伪代码实现"><a href="#伪代码实现" class="headerlink" title="伪代码实现"></a>伪代码实现</h5><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">void exchangeo1&#123;</div><div class="line">    int answer = 0;</div><div class="line">    for(int i=-,j=len-1;i&lt;j;++i,--j)&#123;</div><div class="line">        for(;(i&lt;j)&amp;&amp;(a[i]=='0');++i);</div><div class="line">        for(;(j&gt;i)&amp;&amp;(a[j]=='');--j);</div><div class="line">        if(i&lt;j) ++answer;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h4 id="字符替换和复制"><a href="#字符替换和复制" class="headerlink" title="字符替换和复制"></a>字符替换和复制</h4><ul>
<li><p>删除一个字符串所有的a,并且复制所有的b。注：字符数<br>组足够大</p>
<h5 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h5><ul>
<li>先删除a,可以利用原来字符串的空间<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">int</span> n = <span class="number">0</span>, numb = <span class="number">0</span>;</div><div class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;s[i];++i)&#123;</div><div class="line">     <span class="keyword">if</span>(s[i]!=<span class="string">'a'</span>)&#123;s[n++]=s[i];&#125;</div><div class="line">     <span class="keyword">if</span>(s[i]==<span class="string">'b'</span>)&#123;++numb;&#125;</div><div class="line"> &#125;</div><div class="line">s[n]=<span class="number">0</span>;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>再复制b，注意字符串要加长</p>
<ul>
<li>先计算字符串里有几个b，得到复制后的长度</li>
<li><font color="red">然后“倒着”复制——惯用技巧</font><h5 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> newLength = n+numb;</div><div class="line">s[newLength] = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=newLength,j=n<span class="number">-1</span>;j&gt;=<span class="number">0</span>;--j)&#123;</div><div class="line">    s[i--] = s[j];</div><div class="line">    <span class="keyword">if</span>(s[j]==<span class="string">'b'</span>)s[i--]=<span class="string">'b'</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h4 id="交换星号"><a href="#交换星号" class="headerlink" title="交换星号"></a>交换星号</h4><ul>
<li>一个字符串只包含<em>和数字，请把它的</em><br>号都放开头。<h5 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h5><h6 id="方法1-快排partition——数字相对顺序会变化"><a href="#方法1-快排partition——数字相对顺序会变化" class="headerlink" title="方法1 快排partition——数字相对顺序会变化"></a>方法1 快排partition——<font color="red">数字相对顺序会变化</font></h6><ul>
<li>循环不变式： [0..i – 1]都是*, [i..j – 1]是数字，[j..n –<br>1]未探测</li>
</ul>
</li>
<li><p>代码实现</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;j&lt;n;++j)&#123;</div><div class="line">    <span class="keyword">if</span>(s[j]==<span class="string">'*'</span>)swap(s[i++],s[j])</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>实现样例（样例 <em>01</em>2*4）</p>
<ul>
<li>i＝0, j = 0, <em>01</em>2*4 交换s[0]，不变，i = 1</li>
<li>i＝1, j = 1, <em>01</em>2*4 不变</li>
<li>i = 1, j = 2, <em>01</em>2*4 不变</li>
<li>i＝1, j = 3, 交换s[1],s[3]变为 <em>*102</em>4 并且i ＝ 2</li>
<li>i＝2, j = 4，<em>*102</em>4不变</li>
<li>i = 2, j = 5, 交换s[2],s[5]变为<em>*</em>0214 且i = 3</li>
<li>再往后没变化了</li>
</ul>
</li>
</ul>
<h6 id="方法2-数字相对顺序不变"><a href="#方法2-数字相对顺序不变" class="headerlink" title="方法2 数字相对顺序不变"></a>方法2 数字相对顺序不变</h6><ul>
<li><font color="red">“倒着”</font></li>
<li>代码实现<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> j = n<span class="number">-1</span></div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>;i&gt;+<span class="number">0</span>;--i)</div><div class="line">    <span class="keyword">if</span>(isdigist(s[i]))s[j--]=s[i];</div><div class="line"><span class="keyword">for</span>(;j&gt;=<span class="number">0</span>;--j)s[j]=<span class="string">'*'</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="子串变位词"><a href="#子串变位词" class="headerlink" title="子串变位词"></a>子串变位词</h4><ul>
<li>给定两个串a和b，问b是否是a的子串的变位词。例如输入a = hello, b = lel, lle, ello都是<br>true,但是b = elo是false。<ul>
<li>滑动窗口的思想<ul>
<li>动态维护一个“窗口”。</li>
<li>比如b的长度是3，我们考察a[0..2], [1..3],[2..4]是否和b是变位词</li>
<li>如何与b比较？</li>
</ul>
</li>
</ul>
</li>
<li>我们用一个hash,基于字符串的特殊性，我们可以用[0..255]或者[0..65535]的数组，我们暂且认为它们都是小写英文字母，用[0..25]来表示b中每个单词出现多少次。</li>
<li><p>我们可以存一下有多少个非0次出现的，以后有用</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">int nonzero</div><div class="line">for(int i=0;i&lt;lenb;++i)</div><div class="line">    if(++num[b[i]-'a'==1])++nonZero;</div></pre></td></tr></table></figure>
</li>
<li><p>我们用b中的次数减去a中一个“窗口”内的字符种类，如果结果全是0，则找到这样的子串了。 <font color="red">注意num[]的含义变为了字符种类差</font></p>
</li>
<li><p>第一个窗口 [0..lenb – 1] (注意lena &lt; lenb无解)</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;lenb;++i)&#123;</div><div class="line">    <span class="keyword">int</span> c = a[i] - <span class="string">'a'</span>;</div><div class="line">    --num[c];</div><div class="line">    <span class="keyword">if</span>(num[c]==<span class="number">0</span>)--nonZero;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(num[c]==<span class="number">-1</span>)++nonZero;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(nonZero == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>;</div></pre></td></tr></table></figure>
</li>
<li><p>窗口如何滑动？ 向右移动一位</p>
<ul>
<li>新窗口a[(i － lenb + 1)..i]</li>
<li>旧窗口a[(i – lenb).. (i – 1)]<ul>
<li>扔掉a[i – lenb]</li>
<li>加入a[i]<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=lenb;i&lt;lana;++i)&#123;</div><div class="line">    <span class="keyword">int</span> c = a[i-lenb] - <span class="string">'a'</span>;</div><div class="line">    ++num[c];</div><div class="line">    <span class="keyword">if</span>(num[c]==<span class="number">1</span>)++nonZero;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(num[c]==<span class="number">0</span>) --nonZero;</div><div class="line">    c = a[i] - <span class="string">'a'</span>;</div><div class="line">    --num[c];</div><div class="line">    <span class="keyword">if</span>(num[c]==<span class="number">0</span>)--nonZero;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(num[c]==<span class="number">-1</span>)++nonZero;</div><div class="line">    <span class="keyword">if</span>(nonZero == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>;    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="单词翻转"><a href="#单词翻转" class="headerlink" title="单词翻转"></a>单词翻转</h4><ul>
<li>翻转句子中全部的单词，单词内容不变<ul>
<li>例如I’m a student. 变为student. a I’m</li>
<li>in-place翻转 字符串第i位到第j位<ul>
<li>while (i &lt; j) swap(s[i++], s[j–]);</li>
</ul>
</li>
<li>有什么用？<ul>
<li>翻转整个句子 ： .tneduts a m’I</li>
<li>每个单词单独翻转： student. a I’m</li>
</ul>
</li>
<li>难点？ 如何区分单词？找空格，split</li>
<li>思考题： 字符串循环移位abcd<ul>
<li>移动1次变为bcda</li>
<li>移动2次变为cdab</li>
<li>移动3次变为dabc</li>
</ul>
</li>
<li>结论： 长度为n， 移动m次，相当于移动m % n次<ul>
<li>前m % n位翻转， 后n – m % n位翻转</li>
<li>总体再翻转一次 试验一下？</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;0-1交换&quot;&gt;&lt;a href=&quot;#0-1交换&quot; class=&quot;headerlink&quot; title=&quot;0-1交换&quot;&gt;&lt;/a&gt;0-1交换&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;把一个0-1串（只包含0和1的串）进行排序，你&lt;br&gt;可以交换任意两个位置，问最少交换的次数&lt;br&gt;？&lt;
    
    </summary>
    
      <category term="算法与数据结构" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="算法与数据结构" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>栈相关算法（括号匹配 ）</title>
    <link href="http://yoursite.com/2018/09/03/%E7%AE%97%E6%B3%95/%E6%A0%88%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/2018/09/03/算法/栈算法/</id>
    <published>2018-09-03T01:01:50.479Z</published>
    <updated>2017-06-02T11:22:12.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h4><ul>
<li>堆栈是一种特殊的线性表，只允许在表的顶 端top进行插入或者删除操作，是一种操作受 限制的线性表。 </li>
<li>栈元素服从后进先出原则 <ul>
<li>LIFO——Last In First Out</li>
</ul>
</li>
</ul>
<h4 id="括号匹配"><a href="#括号匹配" class="headerlink" title="括号匹配"></a>括号匹配</h4><ul>
<li>给定字符串，仅由”()[]{}”六个字符组成。设 计算法，判断该字符串是否有效。 <ul>
<li>括号必须以正确的顺序配对，如：“()”、“()[]” 是有效的，但“([)]”无效。</li>
</ul>
</li>
</ul>
<h5 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h5><ul>
<li>在考察第i位字符c与前面的括号是否匹配时： </li>
<li>如果c为左括号，开辟缓冲区记录下来，希望c能够 与后面出现的同类型最近右括号匹配。 </li>
<li>如果c为右括号，考察它能否与缓冲区中的左括号 匹配。 <ul>
<li>这个匹配过程，是检查缓冲区最后出现的同类型左括号 <ul>
<li>即：后进先出——栈</li>
</ul>
</li>
</ul>
</li>
</ul>
<h5 id="括号匹配算法流程"><a href="#括号匹配算法流程" class="headerlink" title="括号匹配算法流程"></a>括号匹配算法流程</h5><ul>
<li>从前向后扫描字符串： </li>
<li>遇到左括号x，就压栈x； </li>
<li>遇到右括号y： <ul>
<li>如果发现栈顶元素x和该括号y匹配，则栈顶元素出栈， 继续判断下一个字符。 </li>
<li>如果栈顶元素x和该括号y不匹配，字符串不匹配； </li>
<li>如果栈为空，字符串不匹配； </li>
</ul>
</li>
<li>扫描完成后，如果栈恰好为空，则字符串匹配，否则，字符串不匹配。<h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsLeftParentheses</span><span class="params">(<span class="keyword">char</span> c)</span></span>&#123;</div><div class="line">	<span class="keyword">return</span> (c==<span class="string">'('</span>)||(c==<span class="string">'['</span>)||(c==<span class="string">'&#123;'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsMatch</span><span class="params">(<span class="keyword">char</span> left,<span class="keyword">char</span> c)</span></span>&#123;</div><div class="line">	<span class="keyword">if</span>(left == <span class="string">'('</span>)</div><div class="line">		<span class="keyword">return</span> c==<span class="string">')'</span>;</div><div class="line">	<span class="keyword">if</span>(left == <span class="string">'['</span>)</div><div class="line">		<span class="keyword">return</span> c==<span class="string">']'</span>;</div><div class="line">	<span class="keyword">if</span>(left == <span class="string">'&#123;'</span>)</div><div class="line">		<span class="keyword">return</span> c==<span class="string">'&#125;'</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">MatchParentheses</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* p)</span></span>&#123;</div><div class="line">	<span class="built_in">stack</span>&lt;<span class="keyword">char</span>&gt; s;</div><div class="line">	<span class="keyword">char</span> cur;</div><div class="line">	<span class="keyword">while</span>(*p)&#123;</div><div class="line">		cur = *p;</div><div class="line">		<span class="keyword">if</span>(IsLeftParentheses(cur))</div><div class="line">			s.push(cur)</div><div class="line">		<span class="keyword">else</span> <span class="comment">//if(IsRightParentheses(cur))</span></div><div class="line">		&#123;</div><div class="line">			<span class="keyword">if</span>(s.empty() || !IsMatch(s.top,cur))</div><div class="line">				<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">			s.pop();</div><div class="line">		&#125;</div><div class="line">		p++;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> s.empty();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> _tmain(<span class="keyword">int</span> argc,_TCHAR* argv[])&#123;</div><div class="line">	<span class="keyword">char</span>* p = <span class="string">"((&#123;&#125;)[])[()]"</span></div><div class="line">	<span class="keyword">bool</span> bMatch = MatchParentheses(p);</div><div class="line">	<span class="keyword">if</span>(bMatch)</div><div class="line">		<span class="built_in">cout</span> &lt;&lt; p &lt;&lt;<span class="string">"括号匹配。\n"</span>;</div><div class="line">	<span class="keyword">else</span></div><div class="line">		<span class="built_in">cout</span> &lt;&lt; p &lt;&lt; <span class="string">"括号不匹配。\n"</span>;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="最长括号匹配"><a href="#最长括号匹配" class="headerlink" title="最长括号匹配"></a>最长括号匹配</h4><ul>
<li>给定字符串，仅包含左括号‘(’和右括号‘)’， 它可能不是括号匹配的，设计算法，找出最 长匹配的括号子串，返回该子串的长度。 </li>
<li>如:<ul>
<li>(()：2 </li>
<li>()()：4 </li>
<li>()(())：6 </li>
<li>(()())：6</li>
</ul>
</li>
</ul>
<h5 id="算法分析-1"><a href="#算法分析-1" class="headerlink" title="算法分析"></a>算法分析</h5><ul>
<li>记起始匹配位置start=-1；最大匹配长度ml=0： </li>
<li>考察第i位字符c： </li>
<li>如果c为左括号，压栈； </li>
<li>如果c为右括号，它一定与栈顶左括号匹配； <ul>
<li>如果栈为空，表示没有匹配的左括号，start=i，为下一次可能 的匹配做准备 <ul>
<li>如果栈不空，出栈(因为和c匹配了)； <ul>
<li>如果栈为空，i-start即为当前找到的匹配长度，检查i-start是否比 ml更大，使得ml得以更新； </li>
<li>如果栈不空，则当前栈顶元素t是上次匹配的最后位置，检查i-t是否比ml更大，使得ml得以更新。 </li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>注：因为入栈的一定是左括号，显然没有必要将它们本身入栈，应该入栈的是该字符在字符串中的索引。</p>
<h5 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">int</span> <span class="title">GetLongestParenthese</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *p)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> size = (<span class="keyword">int</span>)<span class="built_in">strlen</span>(p);</div><div class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s;</div><div class="line">    <span class="keyword">int</span> answer = <span class="number">0</span>; <span class="comment">//最终解</span></div><div class="line">    <span class="keyword">int</span> start = <span class="number">-1</span>; <span class="comment">//左括号的前一个位置</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (p[i] == <span class="string">'('</span>)</div><div class="line">        &#123;</div><div class="line">            s, push(i);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="comment">//p[i]==')'</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span> (s.empty())</div><div class="line">                start = i;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                s.pop();</div><div class="line">                <span class="keyword">if</span> (s.empty())</div><div class="line">                    answer = max(answer, i - start);<span class="comment">//(()) /(())(i()(()) </span></div><div class="line">                <span class="keyword">else</span></div><div class="line">                    answer = max(answer, i - s.top());<span class="comment">//(()</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> answer;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;stack&quot;&gt;&lt;a href=&quot;#stack&quot; class=&quot;headerlink&quot; title=&quot;stack&quot;&gt;&lt;/a&gt;stack&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;堆栈是一种特殊的线性表，只允许在表的顶 端top进行插入或者删除操作，是一种操作受 限制的线性表。 &lt;/
    
    </summary>
    
      <category term="算法与数据结构" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="算法与数据结构" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="栈" scheme="http://yoursite.com/tags/%E6%A0%88/"/>
    
      <category term="stack" scheme="http://yoursite.com/tags/stack/"/>
    
  </entry>
  
  <entry>
    <title>链表相关算法（链表相加, 链表的部分翻转,链表划分链表划分,排序链表中去重）</title>
    <link href="http://yoursite.com/2018/09/03/%E7%AE%97%E6%B3%95/%E9%93%BE%E8%A1%A8%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/2018/09/03/算法/链表算法/</id>
    <published>2018-09-03T01:01:50.479Z</published>
    <updated>2017-06-02T06:55:18.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="链表相加"><a href="#链表相加" class="headerlink" title="链表相加"></a>链表相加</h4><ul>
<li>给定两个链表，分别表示两个非负整数。它 们的数字逆序存储在链表中，且每个结点只 存储一个数字，计算两个数的和，并且返回 和的链表头指针<ul>
<li>如：输入：2→4→3、5→6→4，输出：7→0→8</li>
</ul>
</li>
<li>问题分析 <ul>
<li>输入：2-&gt;4-&gt;3、5-&gt;6-&gt;4，输出：7-&gt;0-&gt;8 </li>
<li>因为两个数都是逆序存储，正好可以从头向 后依次相加，完成“两个数的竖式计算”。</li>
</ul>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tagSNode</span>&#123;</span></div><div class="line">	<span class="keyword">int</span> value;</div><div class="line">	tagSnode *pNext;</div><div class="line"></div><div class="line">	tagSNode(<span class="keyword">int</span> v):value(v),pNext(<span class="literal">NULL</span>)&#123;&#125;</div><div class="line">&#125;SNode;</div><div class="line"></div><div class="line"><span class="keyword">int</span> _tmain(<span class="keyword">int</span> argc,_TCHAR* argv[])&#123;</div><div class="line">	SNode *pHead1 = <span class="keyword">new</span> SNode(<span class="number">0</span>);</div><div class="line">	<span class="keyword">int</span> i;</div><div class="line">	<span class="keyword">for</span>(i = <span class="number">0</span>;i&lt;<span class="number">6</span>;i++)&#123;</div><div class="line">		SNode* p = <span class="keyword">new</span> SNode(rand()%<span class="number">10</span>)</div><div class="line">		p-&gt;pNext = pHead1-&gt;pNext;</div><div class="line">		pHead1-&gt;pNext = p;</div><div class="line">	&#125;</div><div class="line">	SNode *pHead2 = <span class="keyword">new</span> SNode(<span class="number">0</span>);</div><div class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)&#123;</div><div class="line">		SNode *p = <span class="keyword">new</span> SNode(rand() % <span class="number">10</span>);</div><div class="line">		p-&gt;pNext = pHead2-&gt;pNext;</div><div class="line">		pHead2-&gt;pNext = p;</div><div class="line">	&#125;</div><div class="line">	Print(pHead1);</div><div class="line">	Print(pHead2);</div><div class="line">	SNode *pSum = Add(pHead1,pHead2);</div><div class="line">	Print(pSum);</div><div class="line">	Destory(pHead1);</div><div class="line">	Destory(pHead2);</div><div class="line">	Destory(pSum);</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="function">SNode* <span class="title">Add</span><span class="params">(SNode* pHead1,SNode* pHead2)</span></span>&#123;</div><div class="line"></div><div class="line">	SNode * pSum = <span class="keyword">new</span> SNode(<span class="number">0</span>);</div><div class="line">	SNode *pTail = pSum;<span class="comment">//新节点插入到pTail的后面</span></div><div class="line">	SNode *p1 = pHead1-&gt;pNext;</div><div class="line">	SNode *p2 = pHead2-&gt;pNext;</div><div class="line">	SNode *pCur;</div><div class="line">	<span class="keyword">int</span> carry = <span class="number">0</span>;<span class="comment">//进位</span></div><div class="line">	<span class="keyword">int</span> value;</div><div class="line">	<span class="keyword">while</span>(p1 &amp;&amp; p2)&#123;</div><div class="line">		value = p1-&gt;value + p2.-&gt;value+carry;</div><div class="line">		carry = value/<span class="number">10</span>;</div><div class="line">		value %= <span class="number">10</span>;</div><div class="line">		pCur = SNode(value);</div><div class="line">		pTail-&gt;pNext = pCur;<span class="comment">//新节点链接到pTail后面</span></div><div class="line">		pTail = pCur;</div><div class="line">		p1 = p1-&gt;pNext;</div><div class="line">		p2 = p2-&gt;pNext; </div><div class="line">	&#125;</div><div class="line">	<span class="comment">//处理较长的链</span></div><div class="line">	SNode *p = p1 ? p1 : p2;</div><div class="line">	<span class="keyword">while</span>(p)&#123;</div><div class="line">		value = p-&gt;value+carry;</div><div class="line">		carry = value/<span class="number">10</span>;</div><div class="line">		value %= <span class="number">10</span>;</div><div class="line">		pCur = <span class="keyword">new</span> SNode(value);</div><div class="line">		pTail-&gt;pNext = pCur;<span class="comment">//新节点链接到pTail的后面</span></div><div class="line">		pTail = pCur;</div><div class="line">		p1 = p1-&gt;pNext;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//处理可能存在的进位</span></div><div class="line">	<span class="keyword">if</span>(carry != <span class="number">0</span>)</div><div class="line">		pTail-&gt;pNext = <span class="keyword">new</span> SNode(carry);</div><div class="line">	<span class="keyword">return</span> pSum;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="链表的部分翻转"><a href="#链表的部分翻转" class="headerlink" title="链表的部分翻转"></a>链表的部分翻转</h4><ul>
<li>给定一个链表，翻转该链表从m到n的位置。 要求直接翻转而非申请新空间。 <ul>
<li>如：给定1→2→3→4→5，m=2，n=4，返回 1→4→3→2→5。 </li>
<li>假定给出的参数满足：1≤m≤n≤链表长度</li>
</ul>
</li>
<li>分析 <ul>
<li>空转m-1次，找到第m-1个结点，即开始翻转的第一个结点的前驱，记做head； </li>
<li>以head为起始结点遍历n-m次，将第i次时， 将找到的结点插入到head的next中即可。<ul>
<li>即头插法</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tagSNode</span>&#123;</span></div><div class="line">	<span class="keyword">int</span> value;</div><div class="line">	tagSnode *pNext;</div><div class="line"></div><div class="line">	tagSNode(<span class="keyword">int</span> v):value(v),pNext(<span class="literal">NULL</span>)&#123;&#125;</div><div class="line">&#125;SNode;</div><div class="line"></div><div class="line"><span class="keyword">int</span> _tmain(<span class="keyword">int</span> argc,_TCHAR* argv[])&#123;</div><div class="line">	SNode* pHead = <span class="keyword">new</span> SNode(<span class="number">0</span>);</div><div class="line">	<span class="keyword">int</span> i;</div><div class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i)</div><div class="line">	&#123;</div><div class="line">		SNode *p = <span class="keyword">new</span> SNode(rand() % <span class="number">100</span>);</div><div class="line">		p-&gt;pNext = pHead-&gt;pNext;</div><div class="line">		pHead-&gt;pNext = p;</div><div class="line">	&#125;</div><div class="line">	Print(pHead);</div><div class="line">	Reverse(pHead,<span class="number">4</span>,<span class="number">8</span>);</div><div class="line">	Print(pHead);</div><div class="line">	Destory(pHead);</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Destory</span><span class="params">(SNode* p)</span></span>&#123;</div><div class="line">	SNode *next;</div><div class="line">	<span class="keyword">while</span>(p)&#123;</div><div class="line">		next = p-&gt;next;</div><div class="line">		<span class="keyword">delete</span> p;</div><div class="line">		p = next;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Reverse</span><span class="params">(SNode* pHead,<span class="keyword">int</span> from,<span class="keyword">int</span> to)</span></span>&#123;</div><div class="line">	SNode *pCur = pHead-&gt;pNext;</div><div class="line">	<span class="keyword">int</span> i;</div><div class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; from<span class="number">-1</span>; ++i)</div><div class="line">	&#123;</div><div class="line">		pHead = pCur;</div><div class="line">		pCur = pCur-&gt;next;</div><div class="line">	&#125;</div><div class="line">	SNode *pPre = pCur;</div><div class="line">	pCur = pCur-&gt;pNext;</div><div class="line">	to--;</div><div class="line"></div><div class="line">	SNode* pNext;</div><div class="line">	<span class="keyword">for</span> (; i &lt; to; i++)<span class="comment">//to-from</span></div><div class="line">	&#123;</div><div class="line">		pNext = pCur-&gt;pNext;</div><div class="line">		pCur-&gt;pNext = pHead-&gt;pNext;</div><div class="line">		pHead-&gt;pNext = pCur;</div><div class="line">		pPre-&gt;pNext = pNext;</div><div class="line">		pCur = pNext;</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>代码执行示意图</li>
</ul>
<p><img src="http://i.imgur.com/blSeH2B.png" alt=""></p>
<h4 id="链表划分"><a href="#链表划分" class="headerlink" title="链表划分"></a>链表划分</h4><ul>
<li><p>给定一个链表和一个值x，将链表划分成两 部分，使得划分后小于x的结点在前，大于 等于x的结点在后。在这两部分中要保持原 链表中的出现顺序。  </p>
<ul>
<li>如：给定链表1→4→3→2→5→2和x = 3，返回 1→2→2→4→3→5</li>
</ul>
</li>
<li><p>问题分析 </p>
<ul>
<li>分别申请两个指针p1和p2，小于x的添加到 p1中，大于等于x的添加到p2中；最后，将 p2链接到p1的末端即可。</li>
<li>时间复杂度是O(N)，空间复杂度为O(1)；该 问题其实说明：快速排序对于单链表存储结 构仍然适用。 <ul>
<li>注：不是所有排序都方便使用链表存储，如堆 排序，将不断的查找数组的n/2和n的位置，用链 表做存储结构会不太方便。</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line">ypedef <span class="class"><span class="keyword">struct</span> <span class="title">tagSNode</span>&#123;</span></div><div class="line">	<span class="keyword">int</span> value;</div><div class="line">	tagSnode *pNext;</div><div class="line"></div><div class="line">	tagSNode(<span class="keyword">int</span> v):value(v),pNext(<span class="literal">NULL</span>)&#123;&#125;</div><div class="line">&#125;SNode;</div><div class="line"></div><div class="line"><span class="keyword">int</span> _tmain(<span class="keyword">int</span> argc,_TCHAR* argv[])&#123;</div><div class="line">	SNode* pHead = <span class="keyword">new</span> SNode(<span class="number">0</span>);</div><div class="line">	pHead-&gt;pNext = <span class="literal">NULL</span>;<span class="comment">//这一步冗余</span></div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i)</div><div class="line">	&#123;</div><div class="line">		SNode *p = <span class="keyword">new</span> SNode(rand() % <span class="number">100</span>);</div><div class="line">		p-&gt;pNext = pHead-&gt;pNext;</div><div class="line">		pHead-&gt;pNext = p;</div><div class="line">	&#125;</div><div class="line">	Print(pHead);</div><div class="line">	Partition(pHead,<span class="number">50</span>);</div><div class="line">	Print(pHead);</div><div class="line">	Destory(pHead);</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Destory</span><span class="params">(SNode* p)</span></span>&#123;</div><div class="line">	SNode *next;</div><div class="line">	<span class="keyword">while</span>(p)&#123;</div><div class="line">		next = p-&gt;next;</div><div class="line">		<span class="keyword">delete</span> p;</div><div class="line">		p = next;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Partition</span><span class="params">(SNode* pHead,<span class="keyword">int</span> pivotKey)</span></span>&#123;</div><div class="line">	<span class="comment">//两个链表的头指针</span></div><div class="line">	SNode* pLeftHead = <span class="keyword">new</span> SNode(<span class="number">0</span>);</div><div class="line">	SNode* pRightHead = <span class="keyword">new</span> SNode(<span class="number">0</span>);</div><div class="line"></div><div class="line">	<span class="comment">//两个链表的当前最后一个元素</span></div><div class="line">	SNode* left = pLeftHead;</div><div class="line">	SNode* right = pRightHead;</div><div class="line">	SNode* p = pHead-&gt;pNext;</div><div class="line">	<span class="keyword">while</span>(p)&#123;<span class="comment">//遍历原链表</span></div><div class="line">		<span class="keyword">if</span>(p-&gt;value &lt; pivotKey)&#123;</div><div class="line">			left-&gt;pNext = p;</div><div class="line">			left = p;</div><div class="line">		&#125;<span class="keyword">else</span>&#123;</div><div class="line">			right-&gt;pNext = p;</div><div class="line">			right = p;</div><div class="line">		&#125;</div><div class="line">		p = p-&gt;pNext;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//将right链接到left尾部</span></div><div class="line">	left-&gt;pNext = pLeftHead-&gt;pNext;</div><div class="line"></div><div class="line">	<span class="keyword">delete</span> pLeftHead;</div><div class="line">	<span class="keyword">delete</span> pRightHead;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="排序链表中去重"><a href="#排序链表中去重" class="headerlink" title="排序链表中去重"></a>排序链表中去重</h4><ul>
<li>给定排序的链表，删除重复元素，只保留重 复元素第一次出现的结点。 </li>
<li>如： <ul>
<li>给定：2→3→3→5→7→8→8→8→9→9→10 </li>
<li>返回：2→3→5→7→8→9→10</li>
</ul>
</li>
<li>问题分析 <ul>
<li>若p-&gt;next的值和p的值相等，则将p-&gt;next&gt;next赋值给p，删除p-&gt;next；重复上述过 程，直至链表尾端。</li>
</ul>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tagSNode</span>&#123;</span></div><div class="line">	<span class="keyword">int</span> value;</div><div class="line">	tagSnode *pNext;</div><div class="line"></div><div class="line">	tagSNode(<span class="keyword">int</span> v):value(v),pNext(<span class="literal">NULL</span>)&#123;&#125;</div><div class="line">&#125;SNode;</div><div class="line"></div><div class="line"><span class="keyword">int</span> _tmain(<span class="keyword">int</span> argc,_TCHAR* argv[])&#123;</div><div class="line">	SNode* pHead = <span class="keyword">new</span> SNode(<span class="number">0</span>);</div><div class="line">	<span class="keyword">int</span> data[] = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">8</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">20</span>,<span class="number">20</span>];</div><div class="line">	<span class="keyword">int</span> size = <span class="keyword">sizeof</span>(data)/<span class="keyword">sizeof</span>(<span class="keyword">int</span>);</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = size <span class="number">-1</span>; i &gt;=<span class="number">0</span>; i--)</div><div class="line">	&#123;</div><div class="line">		SNode* p = <span class="keyword">new</span> SNode(data[i]);</div><div class="line">		p-&gt;pNext = pHead-&gt;pNext;</div><div class="line">		pHead-&gt;pNext = p;</div><div class="line">	&#125;</div><div class="line">	Print(pHead);</div><div class="line">	DeleteDuplicateNode(pHead);</div><div class="line">	Print(pHead);</div><div class="line">	Destroy(pHead);</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">//方法一 2,3,3 pPre=3 pNext = 3</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DeleteDuplicateNode</span><span class="params">(SNode* pHead)</span></span>&#123;</div><div class="line">	SNode* pPre = pHead-&gt;pNext;</div><div class="line">	SNode* pCur;</div><div class="line">	<span class="keyword">while</span>(pPre)&#123;</div><div class="line">		pCur = pPre-&gt;pNext;</div><div class="line">		<span class="keyword">if</span>(pCur &amp;&amp;(pCur-&gt;value == pPre-&gt;value))&#123;</div><div class="line">			pPre-&gt;pNext = pCur-&gt;pNext;</div><div class="line">			<span class="keyword">delete</span> pCur;</div><div class="line">		&#125;<span class="keyword">else</span>&#123;</div><div class="line">			pPre = pCur;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//方法二 2,3,3 pPre=2 pCur = 3 pNext = 3</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DeleteDuplicateNode2</span><span class="params">(SNode *pHead)</span></span>&#123;</div><div class="line">	SNode* pPre = pHead;</div><div class="line">	SNode* pCur = pPre-&gt;pNext;</div><div class="line">	SNode* pNext;</div><div class="line">	<span class="keyword">while</span>(pCur)&#123;</div><div class="line">		pNext = pCur-&gt;pNext;</div><div class="line">		<span class="keyword">while</span>(pNext &amp;&amp; (pCur-&gt;value == pNext-&gt;value))&#123;</div><div class="line">			pPre-&gt;pNext = pNext;</div><div class="line">			<span class="keyword">delete</span> pCur;</div><div class="line">			pCur = pNext;</div><div class="line">			pNext = pCur-&gt;pNext;</div><div class="line">		&#125;</div><div class="line">		pPre = pCur;</div><div class="line">		pCur = pNext;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="排序链表中去重2"><a href="#排序链表中去重2" class="headerlink" title="排序链表中去重2"></a>排序链表中去重2</h4><ul>
<li>若题目变成：若发现重复元素，则重复元素 全部删除，代码应该怎么实现呢？ </li>
<li>如： <ul>
<li>给定：2→3→3→5→7→8→8→8→9→9→10 <ul>
<li>返回：2→5→7→10</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DeleteDuplicateNode3</span><span class="params">(SNode *pHead)</span></span>&#123;</div><div class="line">	SNode* pPre = pHead;</div><div class="line">	SNode* pCur = pPre-&gt;pNext;</div><div class="line">	SNode* pNext;</div><div class="line">	<span class="keyword">bool</span> bDup;</div><div class="line">	<span class="keyword">while</span>(pCur)&#123;</div><div class="line">		pNext = pCur-&gt;pNext;</div><div class="line">		bDup = <span class="literal">false</span>;</div><div class="line">		<span class="keyword">while</span>(pNext &amp;&amp; (pCur-&gt;value == pNext-&gt;value))&#123;</div><div class="line">			pPre-&gt;pNext = pNext;</div><div class="line">			<span class="keyword">delete</span> pCur;</div><div class="line">			pCur = pNext;</div><div class="line">			pNext = pCur-&gt;pNext;</div><div class="line">			bDup = <span class="literal">true</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span>(bDup)&#123;<span class="comment">//此刻的pCur与元数据重复，删之</span></div><div class="line">				pPre-&gt;pNext = pNext;</div><div class="line">				<span class="keyword">delete</span> pCur;</div><div class="line">		&#125;<span class="keyword">else</span>&#123;<span class="comment">//pCur未发现重发，则pPre后移</span></div><div class="line">			pPre = pCur;</div><div class="line">		&#125;</div><div class="line">		pCur = pNext;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;链表相加&quot;&gt;&lt;a href=&quot;#链表相加&quot; class=&quot;headerlink&quot; title=&quot;链表相加&quot;&gt;&lt;/a&gt;链表相加&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;给定两个链表，分别表示两个非负整数。它 们的数字逆序存储在链表中，且每个结点只 存储一个数字，计算两个数的和，并
    
    </summary>
    
      <category term="算法与数据结构" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="算法与数据结构" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="链表" scheme="http://yoursite.com/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>TensorFlow 安装及简单实例</title>
    <link href="http://yoursite.com/2018/09/03/TensorFlow/TensorFlow%20%E5%AE%89%E8%A3%85%E5%8F%8A%E7%AE%80%E5%8D%95%E5%AE%9E%E4%BE%8B/"/>
    <id>http://yoursite.com/2018/09/03/TensorFlow/TensorFlow 安装及简单实例/</id>
    <published>2018-09-03T01:01:50.479Z</published>
    <updated>2017-06-03T01:38:28.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="安装TensorFlow步骤"><a href="#安装TensorFlow步骤" class="headerlink" title="安装TensorFlow步骤"></a>安装TensorFlow步骤</h4><h5 id="Anaconda-安装"><a href="#Anaconda-安装" class="headerlink" title="Anaconda 安装"></a>Anaconda <a href="http://pan.baidu.com/s/1eRG3gbC" target="_blank" rel="external">安装</a></h5><ul>
<li>1.Window,MacOS,Linux 都已支持 都已支持 </li>
<li>2.Window用 户只能使python3.5(64bit) 。MacOS,Linux 支持 python2.7 和python3.3+。</li>
<li><ol>
<li>有GPU 可以安装带 GPU 版本的，没有 GPU 就安装 CPU 版本的。 - - 推荐安装 Anaconda ，pip 版本大于8.1 。<h5 id="TensorflowTensorflow-安装-针对python3-5"><a href="#TensorflowTensorflow-安装-针对python3-5" class="headerlink" title="TensorflowTensorflow 安装(针对python3.5)"></a>TensorflowTensorflow 安装(针对python3.5)</h5></li>
</ol>
<ul>
<li>Windows安装Tensorflow <ul>
<li>CPU版本：<ul>
<li>管理员方式打开命令提示符，输入命令：pip3 install tensorflow </li>
</ul>
</li>
<li>GPU版本： <ul>
<li>管理员方式打开命令提示符，输入命令：pip3 install tensorflow-gpu</li>
</ul>
</li>
</ul>
</li>
<li>更新Tensorflow： <ul>
<li>pip uninstall tensorflow </li>
<li>pip install tensorflow</li>
</ul>
</li>
<li>NOTE: TensorFlow requires MSVCP140.DLL, which may not be installed on your system. If, when you import tensorflow as tf, you see an error about No module named “_pywrap_tensorflow” and/or DLL load failed, check whether MSVCP140.DLL is in your %PATH% and, if not, you should install the <a href="https://www.microsoft.com/en-us/download/details.aspx?id=53587" target="_blank" rel="external"> Visual C++ 2015 </a> redistributable (x64 version).</li>
<li>tensorflow-gpu 需要安装<a href="http://pan.baidu.com/s/1mhJEFX2" target="_blank" rel="external">cuda8+cudnn5.1</a></li>
<li>Linux和MacOS安装Tensorflow<ul>
<li>CPU版本：<ul>
<li>Python 2.7用户：pip install tensorflow</li>
<li>Python3.3+用户：pip3 install tensorflow </li>
</ul>
</li>
<li>GPU版本： <ul>
<li>Python 2.7用户：pip install tensorflow-gpu </li>
<li>Python3.3+用户：pip3 install tensorflow-gpu<h4 id="tensorFlow基本概念"><a href="#tensorFlow基本概念" class="headerlink" title="tensorFlow基本概念"></a>tensorFlow基本概念</h4></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>使用图（graphs）来表示计算任务 </li>
<li>在被称之为会话（Session）的上下文（context）中执行图 </li>
<li>使用tensor表示数据 </li>
<li>通过变量（Variable）维护状态</li>
<li><p>使用feed和fetch可以为任意的操作赋值或者从其中获取数据</p>
<p>Tensorflow是一个编程系统，使用图（graphs）来表示计算任务，图（graphs）中的节点称之为op （operation），一个op获得0个或多个Tensor，执行计算，产生0个或多个Tensor。Tensor 看作是 一个 n 维的数组或列表。图必须在会话（Session）里被启动。</p>
<h4 id="TensorFlow结构"><a href="#TensorFlow结构" class="headerlink" title="TensorFlow结构"></a>TensorFlow结构</h4><p><img src="http://i.imgur.com/9oe2But.png" alt=""></p>
<h4 id="创建图，启动图"><a href="#创建图，启动图" class="headerlink" title="创建图，启动图"></a>创建图，启动图</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="string">"""</span></div><div class="line">Please note, this code is only for python 3+. If you are using python 2+, please modify the code accordingly.</div><div class="line">"""</div><div class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</div><div class="line"><span class="comment">#创建一个常量op</span></div><div class="line">matrix1 = tf.constant([[<span class="number">3</span>, <span class="number">3</span>]])<span class="comment">#1行2列</span></div><div class="line"><span class="comment">#创建一个常量op</span></div><div class="line">matrix2 = tf.constant([[<span class="number">2</span>],</div><div class="line">                       [<span class="number">2</span>]])   <span class="comment">#2行1列</span></div><div class="line"><span class="comment">#创建一个矩阵乘法op,把m1和m2传入</span></div><div class="line">product = tf.matmul(matrix1, matrix2)  <span class="comment"># matrix multiply np.dot(m1, m2)</span></div><div class="line">print(product)</div><div class="line"></div><div class="line"><span class="comment"># method 1</span></div><div class="line"><span class="comment">#定义一个会话，启动默认图</span></div><div class="line">sess = tf.Session()</div><div class="line"><span class="comment">#调用sess的run方法来执行矩阵乘法op</span></div><div class="line"><span class="comment">#run(product)触发了图中3个op</span></div><div class="line">result = sess.run(product)</div><div class="line">print(result)</div><div class="line">sess.close()</div><div class="line"></div><div class="line"><span class="comment"># method 2</span></div><div class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</div><div class="line">	<span class="comment">#调用sess的run方法来执行矩阵乘法op</span></div><div class="line">	<span class="comment">#run(product)触发了图中3个op</span></div><div class="line">	result = sess.run(product)</div><div class="line">	print(result)</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><h5 id="变量加减"><a href="#变量加减" class="headerlink" title="变量加减"></a>变量加减</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</div><div class="line"></div><div class="line">x = tf.Variable([<span class="number">1</span>,<span class="number">2</span>])</div><div class="line">a = tf.constant([<span class="number">3</span>,<span class="number">3</span>])</div><div class="line"><span class="comment">#增加一个减法op</span></div><div class="line">sub = tf.subtract(x,a)</div><div class="line"><span class="comment">#增加一个加法op</span></div><div class="line">add = tf.add(x,sub)</div><div class="line"></div><div class="line">init = tf.global_variables_initializer()</div><div class="line"></div><div class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</div><div class="line">    	sess.run(init)</div><div class="line">    	print(sess.run(sub))</div><div class="line">    	print(sess.run(add))</div><div class="line">--------------------------</div><div class="line">[<span class="number">-2</span> <span class="number">-1</span>]</div><div class="line">[<span class="number">-1</span>  <span class="number">1</span>]</div></pre></td></tr></table></figure>
<h5 id="变量自增"><a href="#变量自增" class="headerlink" title="变量自增"></a>变量自增</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</div><div class="line"><span class="comment">#创建一个变量初始化为0</span></div><div class="line">state = tf.Variable(<span class="number">0</span>,name=<span class="string">'counter'</span>)<span class="comment">#给变量命名</span></div><div class="line"><span class="comment">#创建一个op，作用是state加1</span></div><div class="line">new_value = tf.add(state,<span class="number">1</span>)</div><div class="line"><span class="comment">#赋值op</span></div><div class="line">update = tf.assign(state,new_value)</div><div class="line"><span class="comment">#变量初始化</span></div><div class="line">init = tf.global_variables_initializer()</div><div class="line"></div><div class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</div><div class="line">    sess.run(init)</div><div class="line">    print(sess.run(state))</div><div class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">5</span>):</div><div class="line">        sess.run(update)</div><div class="line">        print(sess.run(state))</div><div class="line">--------------------------</div><div class="line"><span class="number">0</span></div><div class="line"><span class="number">1</span></div><div class="line"><span class="number">2</span></div><div class="line"><span class="number">3</span></div><div class="line"><span class="number">4</span></div><div class="line"><span class="number">5</span></div></pre></td></tr></table></figure>
<h4 id="Fetch-和-Feed"><a href="#Fetch-和-Feed" class="headerlink" title="Fetch 和 Feed"></a>Fetch 和 Feed</h4><h5 id="Fetch"><a href="#Fetch" class="headerlink" title="Fetch"></a>Fetch</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</div><div class="line">inp1 = tf.constant(<span class="number">2.0</span>)</div><div class="line">inp2 = tf.constant(<span class="number">3.0</span>)</div><div class="line">inp3 = tf.constant(<span class="number">4.0</span>)</div><div class="line"></div><div class="line">add = tf.add(inp1,inp2)</div><div class="line">mult = tf.multiply(inp3,add)</div><div class="line"></div><div class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</div><div class="line">    result = sess.run([mult,add])</div><div class="line">   	print(result)</div><div class="line">------------------------</div><div class="line">[<span class="number">20.0</span>, <span class="number">5.0</span>]</div></pre></td></tr></table></figure>
<h5 id="Feed"><a href="#Feed" class="headerlink" title="Feed"></a>Feed</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</div><div class="line"><span class="comment">#创建占位符</span></div><div class="line">inp1 = tf.placeholder(tf.float32)</div><div class="line">inp2 = tf.placeholder(tf.float32)</div><div class="line">oup = tf.multiply(inp1,inp2)</div><div class="line"></div><div class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</div><div class="line">    <span class="comment">#Feed的数据以字典的形式传入</span></div><div class="line">    print(sess.run(oup,feed_dict=&#123;inp1:[<span class="number">5.</span>],inp2:[<span class="number">3.</span>]&#125;))</div><div class="line">-----------------------------</div><div class="line">[ <span class="number">15.</span>]</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;安装TensorFlow步骤&quot;&gt;&lt;a href=&quot;#安装TensorFlow步骤&quot; class=&quot;headerlink&quot; title=&quot;安装TensorFlow步骤&quot;&gt;&lt;/a&gt;安装TensorFlow步骤&lt;/h4&gt;&lt;h5 id=&quot;Anaconda-安装&quot;&gt;&lt;a h
    
    </summary>
    
      <category term="深度学习" scheme="http://yoursite.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="TensorFlow" scheme="http://yoursite.com/tags/TensorFlow/"/>
    
  </entry>
  
</feed>
